<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-487.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>Go 语言结构体链表详解 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Go 语言结构体链表详解                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<p>@</p> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li>1. 什么是链表</li> <li>2. 单项链表的基本操作</li> <li>3. 使用 struct 定义单链表</li> <li>4. 尾部添加节点</li> <li>5. 头部插入节点</li> <li>6. 指定节点后添加新节点</li> <li>7. 删除节点</li> </ul> </div> <hr/> <h1 id="1-什么是链表">1. 什么是链表</h1> <ul> <li> <p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p> </li> <li> <p>链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p> </li> <li> <p>使用链表结构可以避免在使用数组时需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p> </li> <li> <p>链表允许插入和移除表上任意位置上的结点，但是不允许随机存取。</p> </li> <li> <p>链表有三种类型：<code>单向链表</code>、<code>双向链表</code>、<code>循环链表</code>。</p> </li> </ul> <h1 id="2-单项链表的基本操作">2. 单项链表的基本操作</h1> <ul> <li> <p>单向链表中每个结点包含两部分，分别是<code>数据域</code>和<code>指针域</code>，上一个结点的指针指向下一结点，依次相连，形成链表。</p> </li> <li> <p>链表通过指针将一组零散的内存块串联在一起，这里的内存块称为链表的结点。为了将这些节点给串起来，每个链表的结点除了存储数据之外，还会记录下一个结点的指针（即下一个结点的地址），这个指针称为：后继指针</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e12f81f0e4e6b6cc9a7e2cb9abf9df81.jpg" alt="Go 语言结构体链表详解"></p> <h1 id="3-使用-struct-定义单链表">3. 使用 struct 定义单链表</h1> <ul> <li>利用 Struct 可以包容多种数据类型的特性</li> <li>一个结构体内可以包含若干成员，这些成员可以是基本类型、自定义类型、数组类型，也可以是指针类型。</li> </ul> <p><mark>struct 定义的三种形式，其中2和3都是返回结构体的指针</mark></p> <pre><code class="language-go">//定义 var stu Student  var stu *Student = new(Student)  var stu *Student = &Student {}  //调用 stu.Name   stu.Age    stu.Score 或 (*stu).Name	   (*stu).Age   (*stu).Score</code></pre> <p><mark>定义一个单项链表</mark><br /><code>next 是指针类型的属性，指向 Student struct 类型数据，也就是下一个节点的数据类型</code></p> <pre><code class="language-go">type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }</code></pre> <p><mark>为链表赋值，并遍历链表中的每个节点</mark></p> <pre><code class="language-go">package main  import "fmt"  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student		//存放下一个结构体的地址，用*直接指向下一个结构体 }  func main() { 	//头部结构体 	var head Student 	head.Name = "张三" 	head.Age = 28 	head.Score = 88  	//第二个结构体节点 	var stu1 Student 	stu1.Name = "李四" 	stu1.Age = 25 	stu1.Score = 100  	head.next = &stu1  	//第三个结构体节点 	var stu2 Student 	stu2.Name = "王五" 	stu2.Age = 18 	stu2.Score = 60  	stu1.next = &stu2  	Req(&head) }  func Req(tmp *Student) {		//tmp指针是指向下一个结构体的地址，加*就是下一个结构体 	for tmp != nil {			//遍历输出链表中每个结构体，判断是否为空 		fmt.Println(*tmp) 		tmp = tmp.next			//tmp变更为下一个结构体地址 	} }   //输出结果如下 {张三 28 88 0xc000114480} {李四 25 100 0xc0001144b0} {王五 18 60 <nil>}</code></pre> <h1 id="4-尾部添加节点">4. 尾部添加节点</h1> <ul> <li>方法一</li> </ul> <pre><code class="language-go">package main  import ( 	"fmt" 	"math/rand" )  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }  func main() { 	//头部结构体 	var head Student 	head.Name = "head" 	head.Age = 28 	head.Score = 88  	//第二个结构体节点 	var stu1 Student 	stu1.Name = "stu1" 	stu1.Age = 25 	stu1.Score = 100  	head.next = &stu1 //头部指向第一个结构体  	//第三个结构体节点 	var stu2 Student 	stu2.Name = "stu2" 	stu2.Age = 18 	stu2.Score = 60  	stu1.next = &stu2 //第一个结构体指向第二个结构体  	//第四个结构体节点 	var stu3 Student 	stu3.Name = "stu3" 	stu3.Age = 18 	stu3.Score = 80  	stu2.next = &stu3 //第二个结构体指向第三个结构体  	//声明变量 	var tail = &stu3 	for i := 4; i < 10; i++ { 		//定义节点 		var stu Student = Student{ 			Name:  fmt.Sprintf("stu%d", i), 			Age:   rand.Intn(100), 			Score: rand.Float32() * 100, 		} 		//生产结构体串联 		tail.next = &stu 		tail = &stu 	}  	Req(&head) }  func Req(tmp *Student) { 	for tmp != nil { 		fmt.Println(*tmp) 		tmp = tmp.next 	} }  //输出结果如下 {head 28 88 0xc0001144b0} {stu1 25 100 0xc0001144e0} {stu2 18 60 0xc000114510} {stu3 18 80 0xc000114540} {stu4 81 94.05091 0xc000114570} {stu5 47 43.77142 0xc0001145a0} {stu6 81 68.682304 0xc0001145d0} {stu7 25 15.651925 0xc000114600} {stu8 56 30.091187 0xc000114630} {stu9 94 81.36399 <nil>}</code></pre> <ul> <li>方法二，使用函数进行优化</li> </ul> <pre><code class="language-go">package main  import ( 	"fmt" 	"math/rand" )  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }  func main() { 	//头部结构体 	var head Student 	head.Name = "head" 	head.Age = 28 	head.Score = 88  	TailInsert(&head) 	Req(&head) }  //循环遍历 func Req(tmp *Student) { 	for tmp != nil { 		fmt.Println(*tmp) 		tmp = tmp.next 	} }  //添加结构体节点 func TailInsert(tail *Student) { 	for i := 0; i < 10; i++ { 		//定义节点 		var stu Student = Student{ 			Name:  fmt.Sprintf("stu%d", i), 			Age:   rand.Intn(100), 			Score: rand.Float32() * 100, 		} 		//生产结构体串联 		tail.next = &stu	//指向下一个结构体 		tail = &stu			//把当前的结构体给tail，让其继续循环 	} }   //输出结果如下 {head 28 88 0xc0001144b0} {stu0 81 94.05091 0xc0001144e0} {stu1 47 43.77142 0xc000114510} {stu2 81 68.682304 0xc000114540} {stu3 25 15.651925 0xc000114570} {stu4 56 30.091187 0xc0001145a0} {stu5 94 81.36399 0xc0001145d0} {stu6 62 38.06572 0xc000114600} {stu7 28 46.888985 0xc000114630} {stu8 11 29.310184 0xc000114660} {stu9 37 21.855305 <nil>}</code></pre> <h1 id="5-头部插入节点">5. 头部插入节点</h1> <ul> <li>方法一</li> </ul> <pre><code class="language-go">package main  import ( 	"fmt" 	"math/rand" )  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }  func main() { 	//头部结构体 	var head Student 	head.Name = "head" 	head.Age = 28 	head.Score = 88  	//调用头部插入函数 	HeadInsert(&head)  	Req(HeadInsert(&head)) }  func Req(tmp *Student) { 	for tmp != nil { 		fmt.Println(*tmp) 		tmp = tmp.next 	} }  func HeadInsert(p *Student) *Student { 	for i := 0; i < 10; i++ { 		var stu = Student{ 			Name:  fmt.Sprintf("stu%d", i), 			Age:   rand.Intn(100), 			Score: rand.Float32() * 100, 		} 		//当前新节点指向head，因为head是下一个节点 		stu.next = p //指向下一个节点 		p = &stu     //把当前的结构体给tail，让其继续循环 	} 	return p }  //输出结果如下 {stu9 85 30.152267 0xc000094840} {stu8 37 5.912065 0xc000094810} {stu7 29 7.9453626 0xc0000947e0} {stu6 87 60.72534 0xc0000947b0} {stu5 41 2.8303082 0xc000094780} {stu4 90 69.67192 0xc000094750} {stu3 87 20.658266 0xc000094720} {stu2 47 29.708258 0xc0000946f0} {stu1 28 86.249146 0xc0000946c0} {stu0 95 36.08714 0xc0000944b0} {head 28 88 <nil>}</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2a0be3f383c3c358968269ff35620026.jpg" alt="Go 语言结构体链表详解"></p> <ul> <li>方法二</li> </ul> <p><mark>使用指针的指针</mark></p> <pre><code class="language-go">package main  import ( 	"fmt" 	"math/rand" )  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }  func main() { 	//头部结构体 	var head *Student = &Student{} 	head.Name = "head" 	head.Age = 28 	head.Score = 88  	//调用头部插入函数 	HeadInsert(&head)  	Req(head) }  func Req(tmp *Student) { 	for tmp != nil { 		fmt.Println(*tmp) 		tmp = tmp.next 	} }  func HeadInsert(p **Student) { 	for i := 0; i < 10; i++ { 		var stu = Student{ 			Name:  fmt.Sprintf("stu%d", i), 			Age:   rand.Intn(100), 			Score: rand.Float32() * 100, 		} 		//当前新节点指向head，因为head是下一个节点 		stu.next = *p //指向下一个节点 		*p = &stu     //把当前的结构体给tail，让其继续循环 	} }   //输出结果如下 {stu9 37 21.855305 0xc000114660} {stu8 11 29.310184 0xc000114630} {stu7 28 46.888985 0xc000114600} {stu6 62 38.06572 0xc0001145d0} {stu5 94 81.36399 0xc0001145a0} {stu4 56 30.091187 0xc000114570} {stu3 25 15.651925 0xc000114540} {stu2 81 68.682304 0xc000114510} {stu1 47 43.77142 0xc0001144e0} {stu0 81 94.05091 0xc0001144b0} {head 28 88 <nil>}</code></pre> <p><mark>总结</mark><br /><strong>如果想要外部的数据和函数处理结果进行同步，两种方法：<br /> ① 传参，传递指针<br /> ② return 进行值的返回</strong></p> <h1 id="6-指定节点后添加新节点">6. 指定节点后添加新节点</h1> <pre><code class="language-go">package main  import ( 	"fmt" 	"math/rand" )  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }  func main() { 	//头部结构体 	var head *Student = &Student{} //定义指针类型 	head.Name = "head" 	head.Age = 28 	head.Score = 88  	//定义新的节点 	var newNode *Student = &Student{} //定义指针类型 	newNode.Name = "newNode" 	newNode.Age = 19 	newNode.Score = 78 	HeadInsert(&head)  	//指定位置插入函数 	Add(head, newNode)  	Req(head) }  func Req(tmp *Student) { 	for tmp != nil { 		fmt.Println(*tmp) 		tmp = tmp.next 	} }  func HeadInsert(p **Student) { //传入指针的指针 	for i := 0; i < 10; i++ { 		var stu = Student{ 			Name:  fmt.Sprintf("stu%d", i), 			Age:   rand.Intn(100), 			Score: rand.Float32() * 100, 		} 		//当前新节点指向head，因为head是下一个节点 		stu.next = *p //指向下一个节点 		*p = &stu     //把当前的结构体给tail，让其继续循环 	} }  //p为当前节点，newnode为插入的节点 func Add(p *Student, newNode *Student) { 	for p != nil { 		if p.Name == "stu6" { 			//对接下一个节点 			newNode.next = p.next 			p.next = newNode 		} 		//插入节点指向下一个节点 		p = p.next //p.next赋予给p，继续进行循环遍历 	} }   //输出结果如下 {stu9 37 21.855305 0xc0000c0660} {stu8 11 29.310184 0xc0000c0630} {stu7 28 46.888985 0xc0000c0600} {stu6 62 38.06572 0xc0000c04b0} {newNode 19 78 0xc0000c05d0} {stu5 94 81.36399 0xc0000c05a0} {stu4 56 30.091187 0xc0000c0570} {stu3 25 15.651925 0xc0000c0540} {stu2 81 68.682304 0xc0000c0510} {stu1 47 43.77142 0xc0000c04e0} {stu0 81 94.05091 0xc0000c0480} {head 28 88 <nil>}</code></pre> <h1 id="7-删除节点">7. 删除节点</h1> <pre><code class="language-go">package main  import ( 	"fmt" 	"math/rand" )  type Student struct { 	Name  string 	Age   int 	Score float32 	next  *Student }  func main() { 	//头部结构体 	var head *Student = &Student{} //定义指针类型 	head.Name = "head" 	head.Age = 28 	head.Score = 88  	//定义新的节点 	var newNode *Student = &Student{} //定义指针类型 	newNode.Name = "newNode" 	newNode.Age = 19 	newNode.Score = 78 	HeadInsert(&head)  	//指定位置插入函数 	Add(head, newNode)  	//删除节点 	del(head)  	Req(head) }  func Req(tmp *Student) { 	for tmp != nil { 		fmt.Println(*tmp) 		tmp = tmp.next 	} }  func HeadInsert(p **Student) { //传入指针的指针 	for i := 0; i < 10; i++ { 		var stu = Student{ 			Name:  fmt.Sprintf("stu%d", i), 			Age:   rand.Intn(100), 			Score: rand.Float32() * 100, 		} 		//当前新节点指向head，因为head是下一个节点 		stu.next = *p //指向下一个节点 		*p = &stu     //把当前的结构体给tail，让其继续循环 	} }  //p为当前节点，newnode为插入的节点 func Add(p *Student, newNode *Student) { 	for p != nil { 		if p.Name == "stu6" { 			//对接下一个节点 			newNode.next = p.next 			p.next = newNode 		} 		//插入节点指向下一个节点 		p = p.next //p.next赋予给p，继续进行循环遍历 	} }  //删除节点 func del(p *Student) { 	var prev *Student = p			//p=head   prev=head  ——》prev=p 	for p != nil { 		if p.Name == "newNode" { 			prev.next = p.next 			break 		} 		prev = p			//进行平移，前节点赋值 		p = p.next			//后节点赋值 	} }    //输出结果如下  {stu9 37 21.855305 0xc0000c0660} {stu8 11 29.310184 0xc0000c0630} {stu7 28 46.888985 0xc0000c0600} {stu6 62 38.06572 0xc0000c05d0} {stu5 94 81.36399 0xc0000c05a0} {stu4 56 30.091187 0xc0000c0570} {stu3 25 15.651925 0xc0000c0540} {stu2 81 68.682304 0xc0000c0510} {stu1 47 43.77142 0xc0000c04e0} {stu0 81 94.05091 0xc0000c0480} {head 28 88 <nil>}</code></pre> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-486.htm">如何使用Copy-Item在PowerShell中复制多个文件？</a></p>
                                                        <p>下一个：<a href="/html/category/article-488.htm">eslint在vue中如何使用</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6985.htm" title="厦门领养宠物猫中心地址在哪里（厦门哪里有领养猫的）">厦门领养宠物猫中心地址在哪里（厦门哪里有领养猫的）</a></li>
                        <li class="py-2"><a href="/html/category/article-6194.htm" title="瑞鹏宠物医院什么时候上市（瑞鹏宠物医院创始人简历）">瑞鹏宠物医院什么时候上市（瑞鹏宠物医院创始人简历）</a></li>
                        <li class="py-2"><a href="/html/category/article-6018.htm" title="猫三联三针间隔时间多久打第二针（猫三联打2针还是3针）">猫三联三针间隔时间多久打第二针（猫三联打2针还是3针）</a></li>
                        <li class="py-2"><a href="/html/category/article-7076.htm" title="一首《十送红军》为何总让人热泪盈眶呢（这样也行？）一首《十送红军》为何总让人热泪盈眶的歌，东方母亲，十送红军电视剧，">一首《十送红军》为何总让人热泪盈眶呢（这样也行？）一首《十送红军》为何总让人热泪盈眶的歌，东方母亲，十送红军电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-6754.htm" title="宠物医院收费价目（宠物医院收费价目表内江）">宠物医院收费价目（宠物医院收费价目表内江）</a></li>
                        <li class="py-2"><a href="/html/category/article-6150.htm" title="上海市青浦区二中分数线是多少分（上海市青浦区二中分数线是多少分啊）">上海市青浦区二中分数线是多少分（上海市青浦区二中分数线是多少分啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-5930.htm" title="厦门领养宠物猫中心电话地址（厦门领养宠物猫中心电话地址）">厦门领养宠物猫中心电话地址（厦门领养宠物猫中心电话地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-7214.htm" title="宠物粮食市场份额预测分析 宠物粮食市场份额预测分析报告">宠物粮食市场份额预测分析 宠物粮食市场份额预测分析报告</a></li>
                        <li class="py-2"><a href="/html/category/article-6709.htm" title="宠物店一个月挣5万（宠物店一个月盈利大概是多少）">宠物店一个月挣5万（宠物店一个月盈利大概是多少）</a></li>
                        <li class="py-2"><a href="/html/category/article-6663.htm" title="同安宠物领养中心电话多少（厦门同安宠物领养中心地址）">同安宠物领养中心电话多少（厦门同安宠物领养中心地址）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>