<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-434.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>Go并发编程sync.Cond的具体使用_Golang - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Go并发编程sync.Cond的具体使用_Golang                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">简介</a></li> <li><a href="#_label1" rel="nofollow">详细介绍</a></li> <li><a href="#_label2" rel="nofollow">案例：Redis连接池</a></li> <li><a href="#_label3" rel="nofollow">注意点</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>简介</h2> <p><code>Go </code>标准库提供 <code>Cond </code>原语的目的是，为等待 / 通知场景下的并发问题提供支持。<code>Cond</code> 通常应用于等待某个条件的一组 <code>goroutine</code>，等条件变为 <code>true</code> 的时候，其中一个 <code>goroutine</code> 或者所有的 <code>goroutine</code> 都会被唤醒执行。</p> <p><code>Cond</code> 是和某个条件相关，这个条件需要一组 <code>goroutine</code> 协作共同完成，在条件还没有满足的时候，所有等待这个条件的 <code>goroutine</code> 都会被阻塞住，只有这一组 <code>goroutine</code> 通过协作达到了这个条件，等待的 goroutine 才可能继续进行下去。</p> <p>这个条件可以是我们自定义的 <code>true/false</code> 逻辑表达式。</p> <p>但是 <code>Cond</code> 使用的比较少，因为在大部分场景下是可以被 <code>Channel</code> 和 <code>WaitGroup</code> 来替换的。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>详细介绍</h2> <p>下面就是 <code>Cond</code> 的数据结构和对外提供的方法，<code>Cond</code> 内部维护了一个等待队列和锁实例。</p> <div class="ay1code"> <pre class="brush:go;">type Cond struct {     noCopy noCopy       // 锁     L Locker       // 等待队列     notify  notifyList     checker copyChecker  }    func NeWCond(l Locker) *Cond  func (c *Cond) Broadcast()  func (c *Cond) Signal()  func (c *Cond) Wait()</pre> </div> <ul> <li> <p><strong>NeWCond</strong>： <code>NeWCond</code> 方法需要调用者传入一个 <code>Locker</code> 接口，这个接口就 <code>Lock/UnLock</code> 方法，所以我们可以传入一个 <code>sync.Metex</code> 对象</p> </li> <li> <p><strong>Signal</strong>：允许调用者唤醒一个等待当前 <code>Cond</code> 的 <code>goroutine</code>。如果 <code>Cond</code> 等待队列中有一个或者多个等待的 <code>goroutine</code> ，则从等待队列中移除第一个 <code>goroutine</code> 并把它唤醒</p> </li> <li> <p><strong>Broadcast</strong>：允许调用者唤醒所有等待当前 <code>Cond</code> 的 <code>goroutine</code>。如果 Cond 等待队列中有一个或者多个等待的 <code>goroutine</code>，则清空所有等待的 <code>goroutine</code>，并全部唤醒</p> </li> <li> <p><strong>Wait</strong>：会把调用者放入<code> Cond</code> 的等待队列中并阻塞，直到被 <code>Signal</code> 或者 <code>Broadcast</code> 的方法从等待队列中移除并唤醒</p> </li> </ul> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>案例：Redis连接池</h2> <p>可以看一下下面的代码，使用了 <code>Cond</code> 实现一个 <code>Redis</code> 的连接池，最关键的代码就是在链表为空的时候需要调用 <code>Cond</code> 的 <code>Wait</code> 方法，将 <code>gorutine</code> 进行阻塞。然后 <code>goruntine</code> 在使用完连接后，将连接返回池子后，需要通知其他阻塞的 <code>goruntine</code> 来获取连接。</p> <div class="ay1code"> <pre class="brush:xhtml;">package main    import (     "container/list"     "fmt"     "math/rand"     "sync"     "time"  )    // 连接池  type Pool struct {     lock    sync.Mutex // 锁     clients list.List  // 连接     cond    *sync.Cond // cond实例     close   bool       // 是否关闭  }    // Redis Client  type Client struct {     id int32  }    // 创建Redis Client  func NewClient() *Client {     return &amp;Client{        id: rand.Int31n(100000),     }  }    // 关闭Redis Client  func (this *Client) Close() {     fmt.Printf("Client:%d 正在关闭", this.id)  }    // 创建连接池  func NewPool(maxConnNum int) *Pool {     pool := new(Pool)     pool.cond = sync.NewCond(&amp;pool.lock)       // 创建连接     for i := 0; i &lt; maxConnNum; i++ {        client := NewClient()        pool.clients.PushBack(client)     }       return pool  }    // 从池子中获取连接  func (this *Pool) Pull() *Client {     this.lock.Lock()     defer this.lock.Unlock()       // 已关闭     if this.close {        fmt.Println("Pool is closed")        return nil     }       // 如果连接池没有连接 需要阻塞     for this.clients.Len() &lt;= 0 {        this.cond.Wait()     }       // 从链表中取出头节点，删除并返回     ele := this.clients.Remove(this.clients.Front())     return ele.(*Client)  }    // 将连接放回池子  func (this *Pool) Push(client *Client) {     this.lock.Lock()     defer this.lock.Unlock()       if this.close {        fmt.Println("Pool is closed")        return     }       // 向链表尾部插入一个连接     this.clients.PushBack(client)       // 唤醒一个正在等待的goruntine     this.cond.Signal()  }    // 关闭池子  func (this *Pool) Close() {     this.lock.Lock()     defer this.lock.Unlock()       // 关闭连接     for e := this.clients.Front(); e != nil; e = e.Next() {        client := e.Value.(*Client)        client.Close()     }       // 重置数据     this.close = true     this.clients.Init()  }    func main() {       var wg sync.WaitGroup       pool := NewPool(3)     for i := 1; i &lt;= 10; i++ {        wg.Add(1)        go func(index int) {             defer wg.Done()             // 获取一个连接           client := pool.Pull()             fmt.Printf("Time:%s | 【goruntine#%d】获取到client[%d]\n", time.Now().Format("15:04:05"), index, client.id)           time.Sleep(time.Second * 5)           fmt.Printf("Time:%s | 【goruntine#%d】使用完毕，将client[%d]放回池子\n", time.Now().Format("15:04:05"), index, client.id)             // 将连接放回池子           pool.Push(client)        }(i)     }       wg.Wait()  }</pre> </div> <p>运行结果：</p> <blockquote> <p>Time:15:10:25 | 【goruntine#7】获取到client[31847]<br />Time:15:10:25 | 【goruntine#5】获取到client[27887]<br />Time:15:10:25 | 【goruntine#10】获取到client[98081]<br />Time:15:10:30 | 【goruntine#5】使用完毕，将client[27887]放回池子<br />Time:15:10:30 | 【goruntine#6】获取到client[27887]               <br />Time:15:10:30 | 【goruntine#10】使用完毕，将client[98081]放回池子<br />Time:15:10:30 | 【goruntine#7】使用完毕，将client[31847]放回池子 <br />Time:15:10:30 | 【goruntine#1】获取到client[31847]               <br />Time:15:10:30 | 【goruntine#9】获取到client[98081]               <br />Time:15:10:35 | 【goruntine#6】使用完毕，将client[27887]放回池子<br />Time:15:10:35 | 【goruntine#3】获取到client[27887]              <br />Time:15:10:35 | 【goruntine#1】使用完毕，将client[31847]放回池子<br />Time:15:10:35 | 【goruntine#4】获取到client[31847]              <br />Time:15:10:35 | 【goruntine#9】使用完毕，将client[98081]放回池子<br />Time:15:10:35 | 【goruntine#2】获取到client[98081]              <br />Time:15:10:40 | 【goruntine#3】使用完毕，将client[27887]放回池子<br />Time:15:10:40 | 【goruntine#8】获取到client[27887]              <br />Time:15:10:40 | 【goruntine#2】使用完毕，将client[98081]放回池子<br />Time:15:10:40 | 【goruntine#4】使用完毕，将client[31847]放回池子<br />Time:15:10:45 | 【goruntine#8】使用完毕，将client[27887]放回池子</p> </blockquote> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>注意点</h2> <ul> <li>在调用 <code>Wait</code> 方法前，需要先加锁，就像我上面例子中 <code>Pull</code> 方法也是先加锁</li> </ul> <p>看一下源码就知道了，因为 <code>Wait</code> 方法的执行逻辑是先将 <code>goruntine</code> 添加到等待队列中，然后释放锁，然后阻塞，等唤醒后，会继续加锁。如果在调用 <code>Wait</code> 前不加锁，但是里面会解锁，执行的时候就会报错。</p> <div class="ay1code"> <pre class="brush:go;">//  //    c.L.Lock()  //    for !condition() {  //        c.Wait()  //    }  //    ... make use of condition ...  //    c.L.Unlock()  //  func (c *Cond) Wait() {     c.checker.check()          // 添加到等待队列     t := runtime_notifyListAdd(&amp;c.notify)     c.L.Unlock()          // 阻塞     runtime_notifyListWait(&amp;c.notify, t)     c.L.Lock()  }</pre> </div> <ul> <li>还是 <code>Wait</code> 方法，在唤醒后需要继续检查 <code>Cond</code> 条件</li> </ul> <p>就拿上面的 <code>redis</code> 连接案例来进行说明吧，我这里是使用了 <code>for</code> 循环来进行检测。如果将 <code>for</code> 循环改成使用 <code>if</code>，也就是只判断一次，会有什么问题？可以停下来先想想</p> <p>上面说了调用者也可以使用 <code>Broadcast</code> 方法来唤醒 <code>goruntine</code> ，如果使用的是 <code>Broadcast</code> 方法，所有的 <code>goruntine</code> 都会被唤醒，然后大家都去链表中去获取 <code>redis</code> 连接了，就会出现部分 <code>goruntine</code>拿不到连接，实际上没有那么多连接可以获取，因为每次只会放回一个连接到池子中。</p> <div class="ay1code"> <pre class="brush:go;">// 如果连接池没有连接 需要阻塞  for this.clients.Len() &lt;= 0 {    this.cond.Wait()  }    // 获取连接  ele := this.clients.Remove(this.clients.Front())  return ele.(*Client)</pre> </div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-433.htm">python内置函数有哪些？</a></p>
                                                        <p>下一个：<a href="/html/category/article-435.htm">C#程序中使用DataView的ToTable方法实现distinct功能</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-482.htm" title="Hyperledger Fabric节点的动态添加和删除">Hyperledger Fabric节点的动态添加和删除</a></li>
                        <li class="py-2"><a href="/html/category/article-520.htm" title="什么是MySQL ENUM数据类型？使用ENUM数据类型有什么优势？">什么是MySQL ENUM数据类型？使用ENUM数据类型有什么优势？</a></li>
                        <li class="py-2"><a href="/html/category/article-518.htm" title="使用TreeMap在Java中对用户定义的对象进行排序">使用TreeMap在Java中对用户定义的对象进行排序</a></li>
                        <li class="py-2"><a href="/html/category/article-495.htm" title="python读写hdfs">python读写hdfs</a></li>
                        <li class="py-2"><a href="/html/category/article-792.htm" title="SpringMVC+Log4j配置定时生成、删除日志">SpringMVC+Log4j配置定时生成、删除日志</a></li>
                        <li class="py-2"><a href="/html/category/article-507.htm" title="vue 封装图片路径">vue 封装图片路径</a></li>
                        <li class="py-2"><a href="/html/category/article-513.htm" title="springboot整合log4j的踩坑实战记录_java">springboot整合log4j的踩坑实战记录_java</a></li>
                        <li class="py-2"><a href="/html/category/article-497.htm" title="HTML5画布 canvas移动">HTML5画布 canvas移动</a></li>
                        <li class="py-2"><a href="/html/category/article-504.htm" title="Infrastructure 知识: dnf对module的处理">Infrastructure 知识: dnf对module的处理</a></li>
                        <li class="py-2"><a href="/html/category/article-489.htm" title="CSS中文本居中显示">CSS中文本居中显示</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>