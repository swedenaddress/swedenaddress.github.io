<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-363.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>C#自定义配置文件方法详解_在线工具 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        C#自定义配置文件方法详解_在线工具                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h1 id="c自定义配置文件">C#自定义配置文件</h1> <blockquote> <p>.NET程序中，经常使用Config文件来配置应用程序中经常使用的值，比如数据库连接字符串。最近项目遇到一个需要配置好多节点在配置文件中的需求。为了使配置节点整洁易维护，在代码调用时也保证获取时比较直观，结合自定义配置文件专门整理了一个配置文件帮助类Demo。此篇文章主要讲述自定义配置文件的使用方法。</p> </blockquote> <hr/> <h3 id="常见配置文件使用方法">常见配置文件使用方法</h3> <ul> <li>直接在connectionStrings\appSettings这两个节点中添加add节点配置 <ul> <li>这种方式在项目中很常见，使用简单，这里不做介绍</li> </ul> </li> <li>文件操作 <ul> <li>很多程序中（自己公司老项目），通过获取指定路径下XML\ini\json\txt等文件，通过IO获取文件内容并对文件进行解析，从而获取程序需要的配置信息（不推荐）</li> </ul> </li> </ul> <h3 id="自定义配置文件">自定义配置文件</h3> <p>在App.Config(web.config)中指定其他配置文件的路径和节点。<br /> 在configSections节点下配置section节点，.NET提供自带的类型进行封装。（NameValue键值对、Dictionary字典、SingTag基础结构）。Section节点的name属性是自定义节点的名称，type是接收信息的数据类型。<br /><strong>注意！configSections节点必须为configuration下第一个节点</strong></p> <blockquote> <p><kbd>configSections</kbd>的<kbd>name</kbd>属性为自定义配置节点的名称，<kbd>type<kbd> 为转换的类型</kbd></kbd></p> <p><code>ConfigurationManager.GetSection("name")</code> 方法的参数是自定义配置文件节点的名称</p> </blockquote> <h4 id="namevalue键值对">NameValue键值对</h4> <p>配置语法格式：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--以NameValueCollection键值对的形式返回配置节点中的信息，type值固定为System.Configuration.NameValueSectionHandler--&gt; 		&lt;section name="NameValueConfigNode" type="System.Configuration.NameValueSectionHandler"/&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点--&gt; 	&lt;NameValueConfigNode&gt; 		&lt;add key="Name一" value="Value一" /&gt; 		&lt;add key="Name二" value="Value二" /&gt; 		&lt;add key="Name三" value="Value三" /&gt; 	&lt;/NameValueConfigNode&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>调用方法：这里以一个静态属性的方法获取并返回Dictionary格式（后面几种方法也采用这个方式）</p> <pre><code class="language-CSharp">/// &lt;summary&gt; /// NameValueCollection /// &lt;/summary&gt; public static Dictionary&lt;string, string&gt; NameValueConfigNode {     get     {         NameValueCollection nvc = (NameValueCollection)ConfigurationManager.GetSection("NameValueConfigNode");         Dictionary&lt;string, string&gt; result = new Dictionary&lt;string,string&gt;();          foreach (string key in nvc.AllKeys)         {              result.Add(key, nvc[key]);         }         return result;     } }</code></pre> <h4 id="dictionary">Dictionary</h4> <p>配置文件语法格式：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--以Dictionary字典的形式返回配置节点中的信息，type固定为System.Configuration.DictionarySectionHandler--&gt; 		&lt;section name="DictionaryConfigNode" type="System.Configuration.DictionarySectionHandler"/&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点--&gt; 	&lt;DictionaryConfigNode&gt; 		&lt;add key="Key一" value="DictValue一" /&gt; 		&lt;add key="Key二" value="DictValue二" /&gt; 		&lt;add key="Key三" value="DictValue三" /&gt; 	&lt;/DictionaryConfigNode&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>调用方法：</p> <pre><code class="language-CSharp">/// &lt;summary&gt; /// Dictionary /// &lt;/summary&gt; public static Dictionary&lt;string, string&gt; DictionaryConfigNode {     get     {         IDictionary dict = (IDictionary)ConfigurationManager.GetSection("DictionaryConfigNode");         Dictionary&lt;string, string&gt; result = new Dictionary&lt;string, string&gt;();         foreach (string key in dict.Keys)         {             result.Add(key, dict[key].ToString());         }         return result;     } }</code></pre> <h4 id="singtag">SingTag</h4> <p>配置文件语法格式：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--基础结构处理 .config 文件中由单个 XML 标记所表示的各配置节点中的值，type固定为System.Configuration.SingleTagSectionHandler--&gt; 		&lt;section name="SingleTagConfigNode" type="System.Configuration.SingleTagSectionHandler" /&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点--&gt; 	&lt;!--注意，只能是单个节SingleTagSectionHandler才能处理，无论有多少个属性都能处理--&gt; 	&lt;SingleTagConfigNode PropertyOne="1" PropertyTwo="2" PropertyThree="3" PropertyFour="4" PropertyFive="5" /&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>调用方法：</p> <pre><code class="language-CSharp">/// &lt;summary&gt; /// SingleTag /// &lt;/summary&gt; public static Dictionary&lt;string, string&gt; SingleTagConfigNode {     get     {         Hashtable dict = (Hashtable)ConfigurationManager.GetSection("SingleTagConfigNode");         Dictionary&lt;string, string&gt; result = new Dictionary&lt;string, string&gt;();         foreach (string key in dict.Keys)         {             result.Add(key, dict[key].ToString());         }         return result;     } }</code></pre> <p><font color="red">以上程序通过控制台应用程序测试调用效果如下:</font></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://imgtu.com/i/Lsbv5T"  target="_blank" rel="nofollow"><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d779a13309c55b97bfd760bd3b6571cd.jpg" alt="C#自定义配置文件方法详解_在线工具"></a></p> <h4 id="自定义配置文件-1">自定义配置文件</h4> <p>以上三种方法，只能读取应用程序的Web.config或者app.config中的配置信息，但是在大多数项目中，业务场景复杂，配置信息更是多到看不过来，所以如果都写在web.config或者app.config中的话，不太美观，也不易维护。</p> <p>那么有没有一种方法，可以根据需要，配置一个或者多个的config，并且在程序中直接调用使用的方法？<code>（问就是有^_^）</code></p> <p>下面举例一种自定义配置文件的写法<br /> 配置文件写法：<br /><kbd>&lt;configSections&gt;</kbd>节点下<kbd>&lt;section&gt;</kbd>的属性值内容与上面三个方法相同。需要注意的是自定义节点，自定义节点只需要设置configSource属性即可，属性值指向自定义配置文件的路径；<br /><font color="red">注意：路径必须要写成相对路径。</font></p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--把MyConfigData节点的数据映射到MyConfigData类中--&gt; 		&lt;section name="MyConfigData" type="ConsoleApplication.ConfigFiles.ConfigFile,ConsoleApplication"/&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点，configSource指定自定义配置文件的路径（必须是相对路径）--&gt; 	&lt;MyConfigData configSource="ConfigFiles\Framework.config"/&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>这是自定义的文件内容,</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;MyConfigData&gt; 	&lt;add key="Key一" value="自定义文件一" /&gt; 	&lt;add key="Key二" value="自定义文件二" /&gt; 	&lt;add key="Key三" value="自定义文件三" /&gt; &lt;/MyConfigData&gt;</code></pre> <p><font color="DarkGreen">程序中的调用方法与上面的方式一致，这种自定义配置文件的精髓在于，不用将所有配置信息都挤在一个文件中，而是根据项目需要合理的分成多个配置，只需要在web.config或者app.config中指定文件路径即可。其他使用方法没有差别</font></p> <h4 id="自定义结构配置文件">自定义结构配置文件</h4> <p>以上方法为常用的基本配置文件的使用方法，都是使用C#提供的类型进行获取，配置文件的节点需要按照对应格式设置，C#中还有一种可以自定义配置文件格式的调用方法，Config中科自定义节点的结构，然后在程序中需要自定义一个配置文件的类，用于接收自定义配置文件的内容；<br /> 其中使用到的类型：<br /> ConfigurationSection、ConfigurationElementCollection、ConfigurationElement、ConfigurationProperty<br /> 上面介绍的几种方法基本上已经足够日常使用，此篇文章不在进行介绍自定义格式的写法，后期会根据个人情况（是否懒惰的情况），可能会补充此部分功能，有兴趣可以去了解一下。</p> <h3 id="写在最后">写在最后</h3> <p>以上源代码已经放在Gitee上，可自行下载，<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/yang-yong-666/csharp"  target="_blank" rel="nofollow">https://gitee.com/yang-yong-666/csharp</a><br /> 该项目还包含其他关于C#的帮助类，并且会持续更新！</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-362.htm">Python os.path常用操作</a></p>
                                                        <p>下一个：<a href="/html/category/article-364.htm">建立对分布式锁的系统认知 &#8211; 从 Redlock 开始</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-498.htm" title="js 小案例 跑马灯效果">js 小案例 跑马灯效果</a></li>
                        <li class="py-2"><a href="/html/category/article-523.htm" title="vue &#8211; 如何实现导入excel功能">vue &#8211; 如何实现导入excel功能</a></li>
                        <li class="py-2"><a href="/html/category/article-791.htm" title="Linux网络——NFS服务">Linux网络——NFS服务</a></li>
                        <li class="py-2"><a href="/html/category/article-1343.htm" title="HttpClient 设置超时时间">HttpClient 设置超时时间</a></li>
                        <li class="py-2"><a href="/html/category/article-1334.htm" title="【openstack】cloudkitty组件，入门级安装（快速）_在线工具">【openstack】cloudkitty组件，入门级安装（快速）_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1324.htm" title="Task提高异步执行效率技巧_C#教程_">Task提高异步执行效率技巧_C#教程_</a></li>
                        <li class="py-2"><a href="/html/category/article-518.htm" title="使用TreeMap在Java中对用户定义的对象进行排序">使用TreeMap在Java中对用户定义的对象进行排序</a></li>
                        <li class="py-2"><a href="/html/category/article-1344.htm" title="Java8新特性之Instant详解">Java8新特性之Instant详解</a></li>
                        <li class="py-2"><a href="/html/category/article-487.htm" title="Go 语言结构体链表详解">Go 语言结构体链表详解</a></li>
                        <li class="py-2"><a href="/html/category/article-512.htm" title="VUE3 之 使用 Mixin 实现代码的复用 &#8211; 这个系列的教程通俗易懂，适合新手">VUE3 之 使用 Mixin 实现代码的复用 &#8211; 这个系列的教程通俗易懂，适合新手</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">40</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>