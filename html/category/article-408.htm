<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-408.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>victoriaMetrics中的一些Sao操作_在线工具 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        victoriaMetrics中的一些Sao操作_在线工具                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 id="victoriametrics中的一些sao操作">victoriaMetrics中的一些Sao操作</h2> </p> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li> victoriaMetrics中的一些Sao操作</p> <ul> <li>快速获取当前时间</li> <li>计算结构体的哈希值</li> <li>将字符串添加到已有的[]byte中</li> <li>将int64的数组转换为byte数组</li> <li>并发访问的sync.WaitGroup</li> <li>时间池</li> <li>访问限速</li> <li>优先级控制</li> </ul> </li> </ul> </div> <h3 id="快速获取当前时间">快速获取当前时间</h3> <p>victoriaMetrics中有一个<code>fasttime</code>库，用于快速获取当前的Unix时间，实现其实挺简单，就是在后台使用一个goroutine不断以1s为周期刷新表示当前时间的变量<code>currentTimestamp</code>，获取的时候直接原子加载该变量即可。其性能约是<code>time.Now()</code>的8倍。</p> <p>其核心方式就是将主要任务放到后台运行，通过一个中间变量来传递运算结果，以此来通过异步的方式提升性能，但需要业务能包容一定的精度偏差。</p> <pre><code class="language-go">func init() { 	go func() { 		ticker := time.NewTicker(time.Second) 		defer ticker.Stop() 		for tm := range ticker.C {  			t := uint64(tm.Unix()) 			atomic.StoreUint64(&currentTimestamp, t) 		} 	}() }  var currentTimestamp = uint64(time.Now().Unix())  // UnixTimestamp returns the current unix timestamp in seconds. // // It is faster than time.Now().Unix() func UnixTimestamp() uint64 { 	return atomic.LoadUint64(&currentTimestamp) } </code></pre> <h3 id="计算结构体的哈希值">计算结构体的哈希值</h3> <p><code>hashUint64</code>函数中使用<code>xxhash.Sum64</code>计算了结构体<code>Key</code>的哈希值。通过<code>unsafe.Pointer</code>将指针转换为<code>*[]byte</code>类型，byte数组的长度为<code>unsafe.Sizeof(*k)</code>，<code>unsafe.Sizeof()</code>返回结构体的字节大小。</p> <p>如果一个数据为固定的长度，如h的类型为uint64，则可以直接指定长度为8进行转换，如：<em>bp:=([8]byte)(unsafe.Pointer(&h))</em></p> <blockquote> <p>需要注意的是<code>unsafe.Sizeof()</code>返回的是数据结构的大小而不是其指向内容的数据大小，如下返回的slice大小为24，为slice首部数据结构<code>SliceHeader</code>的大小，而不是其引用的数据大小(可以使用len获取slice引用的数据大小)。此外如果结构体中有指针，则转换成的byte中存储的也是指针存储的地址。</p> <pre><code>slice := []int{1,2,3,4,5,6,7,8,9,10} fmt.Println(unsafe.Sizeof(slice)) //24 </code></pre> </blockquote> <pre><code class="language-go">type Key struct { 	Part interface{} 	Offset uint64 }  func (k *Key) hashUint64() uint64 { 	buf := (*[unsafe.Sizeof(*k)]byte)(unsafe.Pointer(k)) 	return xxhash.Sum64(buf[:]) } </code></pre> <h3 id="将字符串添加到已有的byte中">将字符串添加到已有的[]byte中</h3> <p>使用如下方式即可：</p> <pre><code class="language-go">str := "1231445" arr := []byte{1, 2, 3} arr = append(arr, str...) </code></pre> <h3 id="将int64的数组转换为byte数组">将int64的数组转换为byte数组</h3> <p>直接操作了底层的<code>SliceHeader</code></p> <pre><code class="language-go">func int64ToByteSlice(a []int64) (b []byte) {    sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))    sh.Data = uintptr(unsafe.Pointer(&a[0]))    sh.Len = len(a) * int(unsafe.Sizeof(a[0]))    sh.Cap = sh.Len    return } </code></pre> <h3 id="并发访问的syncwaitgroup">并发访问的sync.WaitGroup</h3> <p>并发访问的<code>sync.WaitGroup</code>的目的是为了在运行时添加需要等待的goroutine</p> <pre><code class="language-go">// WaitGroup wraps sync.WaitGroup and makes safe to call Add/Wait // from concurrent goroutines. // // An additional limitation is that call to Wait prohibits further calls to Add // until return. type WaitGroup struct { 	sync.WaitGroup 	mu sync.Mutex }  // Add registers n additional workers. Add may be called from concurrent goroutines. func (wg *WaitGroup) Add(n int) { 	wg.mu.Lock() 	wg.WaitGroup.Add(n) 	wg.mu.Unlock() }  // Wait waits until all the goroutines call Done. // // Wait may be called from concurrent goroutines. // // Further calls to Add are blocked until return from Wait. func (wg *WaitGroup) Wait() { 	wg.mu.Lock() 	wg.WaitGroup.Wait() 	wg.mu.Unlock() }  // WaitAndBlock waits until all the goroutines call Done and then prevents // from new goroutines calling Add. // // Further calls to Add are always blocked. This is useful for graceful shutdown // when other goroutines calling Add must be stopped. // // wg cannot be used after this call. func (wg *WaitGroup) WaitAndBlock() { 	wg.mu.Lock() 	wg.WaitGroup.Wait()  	// Do not unlock wg.mu, so other goroutines calling Add are blocked. }  // There is no need in wrapping WaitGroup.Done, since it is already goroutine-safe. </code></pre> <h3 id="时间池">时间池</h3> <p>高频次创建<code>timer</code>会消耗一定的性能，为了减少某些情况下的性能损耗，可以使用<code>sync.Pool</code>来回收利用创建的<code>timer</code></p> <pre><code class="language-go">// Get returns a timer for the given duration d from the pool. // // Return back the timer to the pool with Put. func Get(d time.Duration) *time.Timer { 	if v := timerPool.Get(); v != nil { 		t := v.(*time.Timer) 		if t.Reset(d) { 			logger.Panicf("BUG: active timer trapped to the pool!") 		} 		return t 	} 	return time.NewTimer(d) }  // Put returns t to the pool. // // t cannot be accessed after returning to the pool. func Put(t *time.Timer) { 	if !t.Stop() { 		// Drain t.C if it wasn't obtained by the caller yet. 		select { 		case <-t.C: 		default: 		} 	} 	timerPool.Put(t) }  var timerPool sync.Pool </code></pre> <h3 id="访问限速">访问限速</h3> <p>victoriaMetrics的<code>vminsert</code>作为<code>vmagent</code>和<code>vmstorage</code>之间的组件，接收<code>vmagent</code>的流量并将其转发到<code>vmstorage</code>。在<code>vmstorage</code>卡死、处理过慢或下线的情况下，有可能会导致无法转发流量，进而造成<code>vminsert</code> CPU和内存飙升，造成组件故障。为了防止这种情况，<code>vminsert</code>使用了限速器，当接收到的流量激增时，可以在牺牲一部分数据的情况下保证系统的稳定性。</p> <p><code>victoriaMetrics</code>的源码中对限速器有如下描述：</p> <blockquote> <p><em>Limit the number of conurrent f calls in order to prevent from excess memory usage and CPU thrashing</em></p> </blockquote> <p>限速器使用了两个参数：<code>maxConcurrentInserts</code>和<code>maxQueueDuration</code>，前者给出了突发情况下可以处理的最大请求数，后者给出了某个请求的最大超时时间。需要注意的是<code>Do(f func() error)</code>是异步执行的，而<code>ch</code>又是全局的，因此会异步等待其他请求释放资源(<code>struct{}</code>)。</p> <p>可以看到限速器使用了指标来指示当前的限速状态。同时使用<code>cgroup.AvailableCPUs()*4</code> (即<code>runtime.GOMAXPROCS(-1)*4</code>)来设置默认的<code>maxConcurrentInserts</code>长度。</p> <blockquote> <p>当该限速器用在处理如http请求时，该限速器并不能限制底层上送的请求，其限制的是对请求的处理。在高流量业务处理中，这也是最消耗内存的地方，通常包含数据读取、内存申请拷贝等。底层的数据受<code>/proc/sys/net/core/somaxconn</code>和socket缓存区的限制。</p> </blockquote> <pre><code class="language-go">var ( 	maxConcurrentInserts = flag.Int("maxConcurrentInserts", cgroup.AvailableCPUs()*4, "The maximum number of concurrent inserts. Default value should work for most cases, "+ 		"since it minimizes the overhead for concurrent inserts. This option is tigthly coupled with -insert.maxQueueDuration") 	maxQueueDuration = flag.Duration("insert.maxQueueDuration", time.Minute, "The maximum duration for waiting in the queue for insert requests due to -maxConcurrentInserts") )  // ch is the channel for limiting concurrent calls to Do. var ch chan struct{}  // Init initializes concurrencylimiter. // // Init must be called after flag.Parse call. func Init() { 	ch = make(chan struct{}, *maxConcurrentInserts) //初始化limiter，最大突发并行请求量为maxConcurrentInserts }  // Do calls f with the limited concurrency. func Do(f func() error) error { 	// Limit the number of conurrent f calls in order to prevent from excess 	// memory usage and CPU thrashing. 	select { 	case ch <- struct{}{}: //在channel中添加一个元素，表示开始处理一个请求 		err := f() //阻塞等大请求处理结束 		<-ch //请求处理完之后释放channel中的一个元素，释放出的空间可以用于处理下一个请求 		return err 	default: 	}      //如果当前达到处理上限maxConcurrentInserts，则需要等到其他Do(f func() error)释放资源。 	// All the workers are busy. 	// Sleep for up to *maxQueueDuration. 	concurrencyLimitReached.Inc() 	t := timerpool.Get(*maxQueueDuration) //获取一个timer，设置等待超时时间为 maxQueueDuration 	select { 	case ch <- struct{}{}: //在maxQueueDuration时间内等待其他请求释放资源，如果获取到资源，则回收timer，继续处理 		timerpool.Put(t) 		err := f() 		<- 		return err 	case <-t.C: //在maxQueueDuration时间内没有获取到资源，定时器超时后回收timer，丢弃请求并返回错误信息 		timerpool.Put(t) 		concurrencyLimitTimeout.Inc() 		return &httpserver.ErrorWithStatusCode{ 			Err: fmt.Errorf("cannot handle more than %d concurrent inserts during %s; possible solutions: "+ 				"increase `-insert.maxQueueDuration`, increase `-maxConcurrentInserts`, increase server capacity", *maxConcurrentInserts, *maxQueueDuration), 			StatusCode: http.StatusServiceUnavailable, 		} 	} }  var ( 	concurrencyLimitReached = metrics.NewCounter(`vm_concurrent_insert_limit_reached_total`) 	concurrencyLimitTimeout = metrics.NewCounter(`vm_concurrent_insert_limit_timeout_total`)  	_ = metrics.NewGauge(`vm_concurrent_insert_capacity`, func() float64 { 		return float64(cap(ch)) 	}) 	_ = metrics.NewGauge(`vm_concurrent_insert_current`, func() float64 { 		return float64(len(ch)) 	}) ) </code></pre> <h3 id="优先级控制">优先级控制</h3> <p>victoriaMetrics的<code>pacelimiter</code>库实现了优先级控制。主要方法由<code>Inc</code>、<code>Dec</code>和<code>WaitIfNeeded</code>。低优先级任务需要调用<code>WaitIfNeeded</code>方法，如果此时有高优先级任务(调用<code>Inc</code>方法)，则低优先级任务需要等待高优先级任务结束(调用<code>Dec</code>方法)之后才能继续执行。</p> <pre><code class="language-go">// PaceLimiter throttles WaitIfNeeded callers while the number of Inc calls is bigger than the number of Dec calls. // // It is expected that Inc is called before performing high-priority work, // while Dec is called when the work is done. // WaitIfNeeded must be called inside the work which must be throttled (i.e. lower-priority work). // It may be called in the loop before performing a part of low-priority work. type PaceLimiter struct { 	mu          sync.Mutex 	cond        *sync.Cond 	delaysTotal uint64 	n           int32 }  // New returns pace limiter that throttles WaitIfNeeded callers while the number of Inc calls is bigger than the number of Dec calls. func New() *PaceLimiter { 	var pl PaceLimiter 	pl.cond = sync.NewCond(&pl.mu) 	return &pl }  // Inc increments pl. func (pl *PaceLimiter) Inc() { 	atomic.AddInt32(&pl.n, 1) }  // Dec decrements pl. func (pl *PaceLimiter) Dec() { 	if atomic.AddInt32(&pl.n, -1) == 0 { 		// Wake up all the goroutines blocked in WaitIfNeeded, 		// since the number of Dec calls equals the number of Inc calls. 		pl.cond.Broadcast() 	} }  // WaitIfNeeded blocks while the number of Inc calls is bigger than the number of Dec calls. func (pl *PaceLimiter) WaitIfNeeded() { 	if atomic.LoadInt32(&pl.n) <= 0 { 		// Fast path - there is no need in lock. 		return 	} 	// Slow path - wait until Dec is called. 	pl.mu.Lock() 	for atomic.LoadInt32(&pl.n) > 0 { 		pl.delaysTotal++ 		pl.cond.Wait() 	} 	pl.mu.Unlock() }  // DelaysTotal returns the number of delays inside WaitIfNeeded. func (pl *PaceLimiter) DelaysTotal() uint64 { 	pl.mu.Lock() 	n := pl.delaysTotal 	pl.mu.Unlock() 	return n } </code></pre> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-407.htm">springboot过滤器和拦截器的实现和区别</a></p>
                                                        <p>下一个：<a href="/html/category/article-409.htm">分割数组–</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4126.htm" title="vue 配置全局模块、SASS（自动引入模块）">vue 配置全局模块、SASS（自动引入模块）</a></li>
                        <li class="py-2"><a href="/html/category/article-4552.htm" title="济南领养宠物的地方 济南领养宠物的地方有哪些">济南领养宠物的地方 济南领养宠物的地方有哪些</a></li>
                        <li class="py-2"><a href="/html/category/article-6571.htm" title="﻿动物疫苗价格 ">﻿动物疫苗价格 </a></li>
                        <li class="py-2"><a href="/html/category/article-7031.htm" title="圣诞树是什么品种的松树(圣诞树是什么品种的松树图片)">圣诞树是什么品种的松树(圣诞树是什么品种的松树图片)</a></li>
                        <li class="py-2"><a href="/html/category/article-4445.htm" title="三国杀特殊技能说明书（三国杀特殊技能说明书图片）">三国杀特殊技能说明书（三国杀特殊技能说明书图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-6194.htm" title="瑞鹏宠物医院什么时候上市（瑞鹏宠物医院创始人简历）">瑞鹏宠物医院什么时候上市（瑞鹏宠物医院创始人简历）</a></li>
                        <li class="py-2"><a href="/html/category/article-5572.htm" title="1970年农历四月二十七是几号 1970年农历四月二十七是几号出生">1970年农历四月二十七是几号 1970年农历四月二十七是几号出生</a></li>
                        <li class="py-2"><a href="/html/category/article-7030.htm" title="动物疫苗规定最新消息通知（动物 疫苗）">动物疫苗规定最新消息通知（动物 疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4404.htm" title="动物疫苗品牌排名前十 动物疫苗品牌排名前十名">动物疫苗品牌排名前十 动物疫苗品牌排名前十名</a></li>
                        <li class="py-2"><a href="/html/category/article-4405.htm" title="兽药疫苗查询（兽药疫苗查询真伪）">兽药疫苗查询（兽药疫苗查询真伪）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>