<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-474.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>实际业务处理 Kafka 消息丢失、重复消费和顺序消费的问题 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        实际业务处理 Kafka 消息丢失、重复消费和顺序消费的问题                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h1 id="关于-kafka-消息丢失重复消费和顺序消费的问题">关于 Kafka 消息丢失、重复消费和顺序消费的问题</h1> <blockquote> <p>消息丢失，消息重复消费，消息顺序消费等问题是我们使用 MQ 时不得不考虑的一个问题，下面我结合实际的业务来和你分享一下解决方案。</p> </blockquote> <h3 id="消息丢失问题">消息丢失问题</h3> <p>比如我们使用 Kakfa 时，以下场景都会发生消息丢失：</p> <ul> <li>producer -&gt; broker （生产者生产消息）</li> <li>broker -&gt; broker (集群环境，broker 同步给其他 broker)</li> <li>broker -&gt; consumer （消费者消费消息）</li> </ul> <p>解决方案也很简单，设置<strong>acks</strong>（消息确认机制）<strong>retries</strong>（重试机制）<strong>factor</strong>（设置 partition 数量）...</p> <p>一般来说，最常见的消息丢失场景就是：<strong>consumer 消费消息</strong>。</p> <p>要保证<strong>consumer</strong> 消费消息时不丢失消息，必须使用<strong>手动提交 ack</strong></p> <p>我们业务是这样实现的：</p> <ol> <li>从<strong>Kafka</strong> 拉取消息（一次批量拉取 100条）</li> <li>为每条消息分配一个<strong>msgId</strong>（递增）</li> <li>将<strong>msgId</strong> 存入内存队列（sortSet）</li> <li>使用<strong>Map</strong> 存储<strong>msgId</strong> 与<strong>msg</strong> （包含 offset）的<strong>映射关系</strong></li> <li>当业务处理完消息后，获取当前消息的<strong>msgId</strong>，然后从<strong>sortSet</strong> 中删除该<strong>msgId</strong>（表示该消息已经处理过了）</li> <li><strong>ack</strong> 时，如果当前 msgId &lt;= sortSet（msgId 在 sortSet 中是从小到大排列） ，就提交当前<strong>offset</strong></li> <li>就算<strong>consumer</strong> 在处理消息时挂了，下次重启时就会从<strong>sortSet</strong> 队首的消息开始拉取，实现至少处理一次语义。</li> <li>步骤 7 存在一个问题：当消息处理完后，还没从<strong>sortSet</strong> 中删除该<strong>msgId</strong>，系统就挂了，当系统重启时，又会<strong>重新处理</strong>一次刚刚已处理过的消息，这就引出<strong>消息重复消费</strong>的问题了。</li> </ol> <h3 id="消息重复消费">消息重复消费</h3> <p>要解决消息重复消费，也就是要实现<strong>幂等</strong>（幂等就是：多次请求，但结果保持不变，举一个例子你就明白了：<code>在 http 中，你发送同一个 get 请求，无论发送多少次，返回结果都是一样的</code>）</p> <p>回到我们的业务场景上，我以处理订单消息为例：</p> <ul> <li> <p><strong>幂等Key</strong> 由我们的<strong>订单Id</strong> +<strong>订单状态</strong>组成（一笔订单的状态只会处理一次）</p> </li> <li> <p>在处理之前，我们首先会去<strong>Redis</strong> 查询是否存在这个<strong>Key</strong></p> <p>如果存在，说明我们已经处理过了，直接丢掉；</p> <p>	  如果不存在，说明没处理过，继续往下处理；</p> </li> <li> <p>最终的逻辑是：将处理过的数据存到<strong>DB</strong>上，再把<strong>幂等Key</strong> 存到<strong>Redis</strong> 上</p> </li> </ul> <p>显然一般场景下 Redis 是无法保证幂等的</p> <p>所以<strong>Redis</strong>只是一个<strong>前置处理</strong>，最终的幂等性依赖<strong>DB</strong> 的<strong>唯一Key</strong>（订单Id+订单状态）</p> <p>总的来说就是：通过 Redis 做<strong>前置处理</strong>，DB 唯一索引做<strong>最终保证</strong>实现<strong>幂等性</strong></p> <h3 id="消息顺序消费">消息顺序消费</h3> <p>消息的顺序性很好理解，还是以订单处理为例</p> <p>订单的状态有：支付、确认收货、完成等等，而订单下还有计费、退款的消息报</p> <p>理论上来说：支付的消息肯定要比退款的消息先到。</p> <p>但是程序处理的过程就不一定了，所以我们处理消息顺序消费的流程如下：</p> <ul> <li>宽表：创建一张宽表，唯一索引是<strong>订单Id</strong>，将订单的<strong>每个状态</strong>拆分为一个列，当消息来了，只更新对应的字段就好，消息只会存在短暂的状态不一致问题，但是最终状态是一致的</li> <li>消息补偿机制</li> <li>把相同的<strong>userID/orderId</strong> 发送到相同的<strong>partition</strong>（因为一个 consumer 消费一个 partition）</li> </ul> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-473.htm">VUE前端开发环境版本查看命令方法详解</a></p>
                                                        <p>下一个：<a href="/html/category/article-475.htm">redis持久化概述</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-484.htm" title="Springboot启动原理详细解析">Springboot启动原理详细解析</a></li>
                        <li class="py-2"><a href="/html/category/article-519.htm" title="Springboot 整合 xxljob 动态API调度任务(进阶篇)">Springboot 整合 xxljob 动态API调度任务(进阶篇)</a></li>
                        <li class="py-2"><a href="/html/category/article-499.htm" title="我们如何将值添加到MySQL表的列中？">我们如何将值添加到MySQL表的列中？</a></li>
                        <li class="py-2"><a href="/html/category/article-1056.htm" title="vue项目的excel的导入与导出">vue项目的excel的导入与导出</a></li>
                        <li class="py-2"><a href="/html/category/article-504.htm" title="Infrastructure 知识: dnf对module的处理">Infrastructure 知识: dnf对module的处理</a></li>
                        <li class="py-2"><a href="/html/category/article-510.htm" title="PHP对象序列化">PHP对象序列化</a></li>
                        <li class="py-2"><a href="/html/category/article-517.htm" title="解决rancher和k8s集群ingress部署在同一台机器导致的80及443端口占用问题">解决rancher和k8s集群ingress部署在同一台机器导致的80及443端口占用问题</a></li>
                        <li class="py-2"><a href="/html/category/article-505.htm" title="Springboot2 集成Swagger2，解决配置完成后不显示的坑">Springboot2 集成Swagger2，解决配置完成后不显示的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-523.htm" title="vue &#8211; 如何实现导入excel功能">vue &#8211; 如何实现导入excel功能</a></li>
                        <li class="py-2"><a href="/html/category/article-520.htm" title="什么是MySQL ENUM数据类型？使用ENUM数据类型有什么优势？">什么是MySQL ENUM数据类型？使用ENUM数据类型有什么优势？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>