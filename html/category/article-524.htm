<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-524.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>数据库四大特性及数据库隔离级别（*） - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        数据库四大特性及数据库隔离级别（*）                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>如果想要说明一个数据库或者一个框架支持事务性操作，则必须要满足下面的四大特性</p> <p><strong>1. 原子性（Atomicity）</strong><br /> 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。失败回滚的操作事务，将不能对事务有任何影响。</p> <p><strong>2. 一致性（Consistency）</strong><br /> 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。<br /> 数据库状态如何变化？每一次数据变更就会导致数据库的状态迁移。如果数据库的初始状态是C0，第一次事务T1的提交就会导致系统生成一个SYSTEM CHANGE NUMBER（SCN），这是数据库状态从C0转变成C1。执行第二个事务T2的时候数据库状态从C1变成C2，以此类推，执行第Tn次事务的时候数据库状态由C(n-1)变成Cn。<br /> 一致性可以从一致读和一致写两个方面来理解。<br /><strong>一致读</strong> 事务读取数据只能从一个状态中读取，不能从2个或者2个以上状态读取。也就是T(n)只能从C(n-1），C(n-2)… C(1)中的一个状态读取数据，不能一部分数据读取自C(n-1)，而另一部分数据读取自C(n-2)。<br /><strong>一致写</strong>事务执行的数据变更只能基于上一个一致的状态，且只能体现在一个状态中。T(n)的变更结果只能基于C(n-1)，C(n-2), …C(1)状态，且只能体现在C(n)状态中。也就是说，一个状态只能有一个事务变更数据，不允许有2个或者2个以上事务在一个状态中变更数据。至于具体一致写基于哪个状态，需要判断T(n)事务是否和T(n-1)，T(n-2),…T(1)有依赖关系。<br /><strong>3. 隔离性（Isolation）</strong><br /> 隔离性是指当多个用户并发访问数据库时，比如同时访问一张表，数据库每一个用户开启的事务，不能被其他事务所做的操作干扰，多个并发事务之间，应当相互隔离。<br /> 例如同时有T1和T2两个并发事务，从T1角度来看，T2要不在T1执行之前就已经结束，要么在T1执行完成后才开始。将多个事务隔离开，每个事务都不能访问到其他事务操作过程中的状态。<br /> 关于事务的隔离性，数据库也提供了多种方案，后面我们将会进行详细介绍</p> <p><strong>4. 持久性（Durability）</strong><br /> 持久性是指事务的操作，一旦提交，对于数据库中数据的改变是永久性的，即使数据库发生故障也不能丢失已提交事务所完成的改变。<br /> 在了解完数据库的四大特性之后，我们来讨论一下数据库的隔离级别的问题。在此之前，我们考虑在没有数据库隔离性的情况下，多用户并发操作可能会发生的问题。</p> <p><strong>1. 脏读</strong><br /> 脏读是指一个事务读取了未提交事务执行过程中的数据。<br /> 当一个事务的操作正在多次修改数据，而在事务还未提交的时候，另外一个并发事务来读取了数据，就会导致读取到的数据并非是最终持久化之后的数据，这个数据就是脏读的数据。<br /> 最典型的例子就是银行转账，从A账户转账100到B账户，脚本命令为</p> <pre><code class="prism language-java">update account set money<span class="token operator">=</span> money<span class="token operator">+</span><span class="token number">100</span> where username<span class="token operator">=</span><span class="token char">'B'</span><span class="token punctuation">;</span> update account set money<span class="token operator">=</span> money<span class="token operator">-</span><span class="token number">100</span> where username<span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span></code></pre> <p>在这个事务执行过程中，另外一个事务读取结果发现B账户中的钱已经到账，提示B钱已到账，B就进行了下一步的操作。但是最终转账事务失败，导致操作回滚。实际上B并未收到钱，但是进行了下一步的操作，造成了损失，这就是脏读。</p> <p><strong>2. 不可重复读</strong><br /> 不可重复读是指对于数据库中的某个数据，一个事务执行过程中多次查询返回不同查询结果，这就是在事务执行过程中，数据被其他事务提交修改了。<br /> 不可重复读同脏读的区别在于，脏读是一个事务读取了另一未完成的事务执行过程中的数据，而不可重复读是一个事务执行过程中，另一事务提交并修改了当前事务正在读取的数据。</p> <p><strong>3. 虚读(幻读)</strong><br /> 幻读是事务非独立执行时发生的一种现象，例如事务T1批量对一个表中某一列列值为1的数据修改为2的变更，但是在这时，事务T2对这张表插入了一条列值为1的数据，并完成提交。此时，如果事务T1查看刚刚完成操作的数据，发现还有一条列值为1的数据没有进行修改，而这条数据其实是T2刚刚提交插入的，这就是幻读。<br /> 幻读和不可重复读都是读取了另一条已经提交的事务（这点同脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p> <h2>隔离级别说明</h2> <p>MySQL定义了四种隔离级别，包括一些具体规则，用于限定事务内外哪些改变是可见的，哪些改变是不可见的。低级别的隔离一般支持更高的并发处理，并且拥有更低的系统开销。<br /><strong>REPEATABLE READ Repeatable Read 可重复读</strong><br /> MySQL数据库默认的隔离级别。该级别解决了READ UNCOMMITTED隔离级别导致的问题。它保证同一事务的多个实例在并发读取事务时，会“看到同样的”数据行。不过，这会导致另外一个棘手问题“幻读”。InnoDB和Falcon存储引擎通过多版本并发控制机制解决了幻读问题。<br /><strong>READ COMMITTED Read Committed 读取提交内容</strong><br /> 大多数数据库系统的默认隔离级别（但是不是MySQL的默认隔离级别），满足了隔离的早先简单定义：一个事务开始时，只能“看见”已经提交事务所做的改变，一个事务从开始到提交前，所做的任何数据改变都是不可见的，除非已经提交。这种隔离级别也支持所谓的“不可重复读”。这意味着用户运行同一个语句两次，看到的结果是不同的。<br /><strong>READ UNCOMMITTED Read UnCommitted 读取未提交内容</strong><br /> 在这个隔离级别，所有事务都可以“看到”未提交事务的执行结果。在这种级别上，可能会产生很多问题，除非用户真的知道自己在做什么，并有很好的理由选择这样做。本隔离级别很少用于实际应用，因为它的性能也不比其他性能好多少，而别的级别还有其他更多的优点。读取未提交数据，也被称为“脏读”<br /><strong>SERIALIZABLE Serializable 可串行化</strong><br /> 该级别是最高级别的隔离级。它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简而言之，SERIALIZABLE是在每个读的数据行上加锁。在这个级别，可能导致大量的超时Timeout和锁竞争Lock Contention现象，实际应用中很少使用到这个级别，但如果用户的应用为了数据的稳定性，需要强制减少并发的话，也可以选择这种隔离级<br /> 下面的表格总结了各种隔离级别和各自的缺点<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220822/13683dc3da9d19e1e5c1959588f4a560.jpg" alt="数据库四大特性及数据库隔离级别（*）"></p> <h2>修改隔离级别的方法</h2> <p>全局修改<br /> 全局修改需要修改MySql的全局文件mysql.ini，修改内容如下</p> <pre><code class="prism language-java"><span class="token number">1</span> #可选参数有：READ<span class="token operator">-</span>UNCOMMITTED<span class="token punctuation">,</span> READ<span class="token operator">-</span>COMMITTED<span class="token punctuation">,</span> REPEATABLE<span class="token operator">-</span>READ<span class="token punctuation">,</span> SERIALIZABLE<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token number">3</span> transaction<span class="token operator">-</span>isolation<span class="token operator">=</span> REPEATABLE<span class="token operator">-</span>READ</code></pre> <p>语句修改<br /> 在命令行模式下连上MySql后，可以使用下列语句查看MySql当前隔离级别</p> <pre><code class="prism language-java">mysql<span class="token operator">></span> select @<span class="token annotation punctuation">@tx_isolation</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> @<span class="token annotation punctuation">@tx_isolation</span><span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> REPEATABLE<span class="token operator">-</span>READ<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row in set<span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre> <p>可以使用下面的命令修改当前会话Session的隔离级</p> <pre><code class="prism language-java">mysql<span class="token operator">></span> set session transaction isolation level read committed<span class="token punctuation">;</span><span class="token class-name">Query</span> OK<span class="token punctuation">,</span><span class="token number">0</span> rows affected<span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>   mysql<span class="token operator">></span> select @<span class="token annotation punctuation">@tx_isolation</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> @<span class="token annotation punctuation">@tx_isolation</span><span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> READ<span class="token operator">-</span>COMMITTED<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">1</span> row in set<span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre> <p>AutoCommit 事务自动提交<br /> MySql中有AutoCommit参数，默认为on，也就是开启状态。它的作用是每一条单独的查询都是一个事务，自动开始，自动提交（语句执行完成就提交。如果你要适用select for update，而不手动调用 start transaction，这个for update的行锁机制等于没用，因为行锁在自动提交后就释放了）。所以事务隔离级别和锁机制即使你不显式调用start transaction，这种机制在单独一条语句查询中也是适用的。<br /> 在命令行模式下可以使用下面的命令查看当前MySql的autocommit是否开启</p> <pre><code class="prism language-java">mysql<span class="token operator">></span> show variables like 'autocommit'<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span><span class="token class-name">Variable_name</span><span class="token operator">|</span><span class="token class-name">Value</span><span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> autocommit<span class="token operator">|</span> ON<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row in set<span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre> <p>如果需要关闭autocommit，我们可以使用下面语句设置</p> <pre><code class="prism language-java">mysql<span class="token operator">></span> set autocommit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre> <p>0就是OFF，1就是ON。设置为OFF之后，则用户执行语句之后，将一直处于一个事务中，直到执行commit或者rollback，才会结束当前事务，重新开始新的事务。</p> <h2>锁机制</h2> <p><strong>共享锁</strong><br /> 由读表操作加上的锁，加锁后其他用户只能获取该表或行的共享锁，不能获取排它锁，也就是说只能读不能写<br /><strong>排它锁</strong><br /> 由写表操作加上的锁，加锁后其他用户不能获取该表或行的任何锁，典型是mysql事务<br /> 根据锁的范围，可以分为表锁（给整张表加锁）行锁（给行数据加锁）<br /> 因此锁可以分为表级共享锁、行级共享锁、表级排它锁、行级排它锁。</p> </div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-523.htm">vue &#8211; 如何实现导入excel功能</a></p>
                                                        <p>下一个：<a href="/html/category/article-527.htm">Confluent之Kafka Connector详细分析</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6985.htm" title="厦门领养宠物猫中心地址在哪里（厦门哪里有领养猫的）">厦门领养宠物猫中心地址在哪里（厦门哪里有领养猫的）</a></li>
                        <li class="py-2"><a href="/html/category/article-4370.htm" title="女生学动物医学好吗专科生（女生学动物医学专业好吗）">女生学动物医学好吗专科生（女生学动物医学专业好吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4405.htm" title="兽药疫苗查询（兽药疫苗查询真伪）">兽药疫苗查询（兽药疫苗查询真伪）</a></li>
                        <li class="py-2"><a href="/html/category/article-4097.htm" title="Java程序整数的位运算">Java程序整数的位运算</a></li>
                        <li class="py-2"><a href="/html/category/article-4325.htm" title="都挺好苏明玉人物前史（苏明玉）干货满满，">都挺好苏明玉人物前史（苏明玉）干货满满，</a></li>
                        <li class="py-2"><a href="/html/category/article-6754.htm" title="宠物医院收费价目（宠物医院收费价目表内江）">宠物医院收费价目（宠物医院收费价目表内江）</a></li>
                        <li class="py-2"><a href="/html/category/article-4324.htm" title="动物疫苗证明怎么写（动物疫苗证明怎么写的）">动物疫苗证明怎么写（动物疫苗证明怎么写的）</a></li>
                        <li class="py-2"><a href="/html/category/article-5571.htm" title="附近的宠物领养中心地址（附近领养宠物小猫）">附近的宠物领养中心地址（附近领养宠物小猫）</a></li>
                        <li class="py-2"><a href="/html/category/article-6001.htm" title="动物疫苗的正确使用方法视频讲解大全（动物疫苗的正确使用方法视频讲解大全图片）">动物疫苗的正确使用方法视频讲解大全（动物疫苗的正确使用方法视频讲解大全图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-4480.htm" title="一岁的猫还用打猫三联吗（一岁的猫还打疫苗吗）">一岁的猫还用打猫三联吗（一岁的猫还打疫苗吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>