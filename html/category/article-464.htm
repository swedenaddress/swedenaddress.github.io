<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-464.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>Python技法：实现简单的递归下降Parser_在线工具 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Python技法：实现简单的递归下降Parser_在线工具                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 id="1-算术运算表达式求值">1. 算术运算表达式求值</h2> <p>在上一篇博文<font color="blue">《Python技法：用re模块实现简易tokenizer》</font>中，我们介绍了用正则表达式来匹配对应的模式，以实现简单的分词器。然而，正则表达式不是万能的，它本质上是一种有限状态机（finite state machine，FSM）, 无法处理含有递归语法的文本，比如算术运算表达式。</p> <p>要解析这类文本，需要另外一种特定的语法规则。我们这里介绍可以表示上下文无关文法（context free grammer）的语法规则巴科斯范式(BNF)和扩展巴科斯范式(EBNF)。实际上，小到一个算术运算表达式，大到几乎所有程序设计语言，都是通过上下文无关文法来定义的。</p> <p>对于简单的算术运算表达式，假定我们已经用分词技术将其转化为输入的tokens流，如<code>NUM+NUM*NUM</code>（分词方法参见上一篇博文）。</p> <p>在此基础上，我们定义BNF规则定义如下：</p> <pre><code>expr ::= expr + term      | expr - term       | term term ::= term * factor      | term / factor      | factor factor ::= (expr)      | NUM </code></pre> <p>当然，这种计法还不够简洁明了，我们实际采用的为EBNF形式：</p> <pre><code>expr ::= term { (+|-) term }* term ::= factor { (*|/) factor }* factor ::= (expr)         | NUM </code></pre> <p>BNF和EBNF每一条规则(形如<code>::=</code>的式子)都可以看做是一种替换，即左侧的符号可以被右侧的符号所替换。而解析的过程中我们尝试将输入文本同语法规则做匹配，通过BNF/EBNF来完成各种替换和扩展。其中，EBNF中包含在<code>{...}*</code>中的规则是可选的，<code>*</code>意味着零个或多个重复项（参考正则表达式）。</p> <p>下图形象地展示了递归下降解析器(parser)中“递归”和“下降”部分和ENBF的关系：</p> <p><img fetchpriority="high" decoding="async" src="https://images.cnblogs.com/cnblogs_com/blogs/538207/galleries/2102214/o_1c08d01f.png" alt="Python技法：实现简单的递归下降Parser_在线工具" width="550" height="270"></p> <p>在实际的解析过程中，我们对tokens流从左到右进行扫描，在扫描的过程中处理token，如果卡住就产生一个语法错误。对于规则，我们将每一条语法规则转变为一个函数或方法，比如上面的ENBF规则就转换为下列的方法：</p> <pre><code class="language-python">class ExpressionEvaluator():     ...     def expr(self):         ...     def term(self):         ...     def factor(self):         ...          </code></pre> <p>在调用某个规则对应方法的过程中，如果我们发现接下来的符号需要采用另一个规则来匹配，则我们就会“下降”到另一个规则方法（如在<code>expr</code>中调用<code>term</code>，<code>term</code>中调用<code>factor</code>），则也就是递归下降中“下降”的部分。</p> <p>有时也会调用已经在执行的方法（比如在<code>expr</code>中调用<code>term</code>，<code>term</code>中调用<code>factor</code>后，又在<code>factor</code>中调用<code>expr</code>，相当于一条衔尾蛇），这也就是递归下降中“递归”的部分。</p> <p>对于语法中出现的重复部分（例如<code>expr ::= term { (+|-) term }*</code>），我们则通过<code>while</code>循环来实现。</p> <p>下面我们来看具体的代码实现。首先是分词部分，我们参照上一篇介绍分词博客的代码。</p> <pre><code class="language-python">import re import collections  # 定义匹配token的模式 NUM = r'(?P<NUM>\d+)'  # \d表示匹配数字，+表示任意长度 PLUS = r'(?P<PLUS>\+)'  # 注意转义 MINUS = r'(?P<MINUS>-)' TIMES = r'(?P<TIMES>\*)'  # 注意转义 DIVIDE = r'(?P<DIVIDE>/)' LPAREN = r'(?P<LPAREN>\()'  # 注意转义 RPAREN = r'(?P<RPAREN>\))'  # 注意转义 WS = r'(?P<WS>\s+)'  # 别忘记空格，\s表示空格，+表示任意长度  master_pat = re.compile(     '|'.join([NUM, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, WS]))  # Tokenizer Token = collections.namedtuple('Token', ['type', 'value'])   def generate_tokens(text):     scanner = master_pat.scanner(text)     for m in iter(scanner.match, None):         tok = Token(m.lastgroup, m.group())         if tok.type != 'WS':  # 过滤掉空格符             yield tok </code></pre> <p>下面是表达式求值器的具体实现：</p> <pre><code class="language-python">class ExpressionEvaluator():     """ 递归下降的Parser实现，每个语法规则都对应一个方法，     使用 ._accept()方法来测试并接受当前处理的token，不匹配不报错，     使用 ._except()方法来测试当前处理的token，并在不匹配的时候抛出语法错误     """      def parse(self, text):         """ 对外调用的接口 """         self.tokens = generate_tokens(text)         self.tok, self.next_tok = None, None  # 已匹配的最后一个token，下一个即将匹配的token         self._next()  # 转到下一个token         return self.expr()  # 开始递归      def _next(self):         """ 转到下一个token """         self.tok, self.next_tok = self.next_tok, next(self.tokens, None)      def _accept(self, tok_type):         """ 如果下一个token与tok_type匹配，则转到下一个token """         if self.next_tok and self.next_tok.type == tok_type:             self._next()             return True         else:             return False      def _except(self, tok_type):         """ 检查是否匹配，如果不匹配则抛出异常 """         if not self._accept(tok_type):             raise SyntaxError("Excepted"+tok_type)      # 接下来是语法规则，每个语法规则对应一个方法          def expr(self):         """ 对应规则： expression ::= term { ('+'|'-') term }* """         exprval = self.term() # 取第一项         while self._accept("PLUS") or self._accept("DIVIDE"): # 如果下一项是"+"或"-"             op = self.tok.type              # 再取下一项，即运算符右值             right = self.term()              if op == "PLUS":                 exprval += right             elif op == "MINUS":                 exprval -= right         return exprval                  def term(self):         """ 对应规则： term ::= factor { ('*'|'/') factor }* """                  termval = self.factor() # 取第一项         while self._accept("TIMES") or self._accept("DIVIDE"): # 如果下一项是"+"或"-"             op = self.tok.type              # 再取下一项，即运算符右值             right = self.factor()              if op == "TIMES":                 termval *= right             elif op == "DIVIDE":                 termval /= right         return termval                                     def factor(self):         """ 对应规则： factor ::= NUM | ( expr ) """         if self._accept("NUM"): # 递归出口             return int(self.tok.value)         elif self._accept("LPAREN"):             exprval = self.expr() # 继续递归下去求表达式值             self._except("RPAREN") # 别忘记检查是否有右括号，没有则抛出异常             return exprval         else:             raise SyntaxError("Expected NUMBER or LPAREN") </code></pre> <p>我们输入以下表达式进行测试：</p> <pre><code class="language-python">e = ExpressionEvaluator() print(e.parse("2")) print(e.parse("2+3")) print(e.parse("2+3*4")) print(e.parse("2+(3+4)*5")) </code></pre> <p>求值结果如下：</p> <pre><code>2 5 14 37 </code></pre> <p>如果我们输入的文本不符合语法规则：</p> <pre><code class="language-python">print(e.parse("2 + (3 + * 4)")) </code></pre> <p>则会抛出<code>SyntaxError</code>异常：<code>Expected NUMBER or LPAREN</code>。<br /> 综上，可见我们的表达式求值算法运行正确。</p> <h2 id="2-生成表达式树">2. 生成表达式树</h2> <p>上面我们是得到表达式的结果，但是如果我们想分析表达式的结构，生成一棵简单的表达式解析树呢？那么我们需要对上述类的方法做一定修改：</p> <pre><code class="language-python">class ExpressionTreeBuilder(ExpressionEvaluator):     def expr(self):             """ 对应规则： expression ::= term { ('+'|'-') term }* """             exprval = self.term() # 取第一项             while self._accept("PLUS") or self._accept("DIVIDE"): # 如果下一项是"+"或"-"                 op = self.tok.type                  # 再取下一项，即运算符右值                 right = self.term()                  if op == "PLUS":                     exprval = ('+', exprval, right)                 elif op == "MINUS":                     exprval -= ('-', exprval, right)             return exprval          def term(self):         """ 对应规则： term ::= factor { ('*'|'/') factor }* """                  termval = self.factor() # 取第一项         while self._accept("TIMES") or self._accept("DIVIDE"): # 如果下一项是"+"或"-"             op = self.tok.type              # 再取下一项，即运算符右值             right = self.factor()              if op == "TIMES":                 termval = ('*', termval, right)             elif op == "DIVIDE":                 termval = ('/', termval, right)         return termval                    def factor(self):         """ 对应规则： factor ::= NUM | ( expr ) """         if self._accept("NUM"): # 递归出口             return int(self.tok.value) # 字符串转整形         elif self._accept("LPAREN"):             exprval = self.expr() # 继续递归下去求表达式值             self._except("RPAREN") # 别忘记检查是否有右括号，没有则抛出异常             return exprval         else:             raise SyntaxError("Expected NUMBER or LPAREN") </code></pre> <p>输入下列表达式测试一下：</p> <pre><code class="language-python">print(e.parse("2+3")) print(e.parse("2+3*4")) print(e.parse("2+(3+4)*5")) print(e.parse('2+3+4')) </code></pre> <p>以下是生成结果：</p> <pre><code>('+', 2, 3) ('+', 2, ('*', 3, 4)) ('+', 2, ('*', ('+', 3, 4), 5)) ('+', ('+', 2, 3), 4) </code></pre> <p>可以看到表达式树生成正确。</p> <p>我们上面的这个例子非常简单，但递归下降的解析器也可以用来实现相当复杂的解析器，例如Python代码就是通过一个递归下降解析器解析的。您要是对此跟感兴趣可以检查Python源码中的<code>Grammar</code>文件来一探究竟。然而，下面我们接着会看到，自己动手写一个解析器会面对各种陷阱和挑战。</p> <h2 id="左递归和运算符优先级陷阱">左递归和运算符优先级陷阱</h2> <p>任何涉及<strong>左递归</strong>形式的语法规则，都没法用递归下降parser来解决。所谓左递归，即规则式子右侧最左边的符号是规则头，比如对于以下规则：</p> <pre><code>items ::= items ',' item        | item </code></pre> <p>完成该解析你可能会定义以下方法：</p> <pre><code class="language-python">def items(self):     itemsval = self.items() # 取第一项，然而此处会无穷递归！     if itemsval and self._accept(','):         itemsval.append(self.item())     else:         itemsval = [self.item()] </code></pre> <p>这样做会在第一行就无穷地调用<code>self.items()</code>从而产生无穷递归错误。</p> <p>还有一种是语法规则自身的错误，比如运算符优先级。我们如果忽视运算符优先级直接将表达式简化如下：</p> <pre><code class="language-python">expr ::= factor { ('+'|'-'|'*'|'/') factor }* factor ::= '(' expr ')'        | NUM </code></pre> <p>这个语法从技术上可以实现，但是没有遵守计算顺序约定，导致<code>"3+4*5"</code>的运算结果为35，而不是预期的23。故此处需要用独立的<code>expr</code>和<code>term</code>规则来确保计算结果的正确性。</p> <h2 id="3-相关包">3. 相关包</h2> <p>最后，对于真正复杂的语法解析，建议采用PyParsing或PLY这样的解析工具。如果你对Python代码的抽象语法树感兴趣，可以看下Python自带的ast模块。</p> <h2 id="参考">参考</h2> <ul> <li>[1] Martelli A, Ravenscroft A, Ascher D. Python cookbook[M]. " O'Reilly Media, Inc.", 2015.</li> <li>[2] https://cs61a.org/study-guide/regex/ </li> <li>[3] https://cs61a.org/study-guide/bnf/ </li> <li>[4] https://zh.wikipedia.org/wiki/巴科斯范式 </li> </ul> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-463.htm">mongodb开发&#8212;GridFS文件存储</a></p>
                                                        <p>下一个：<a href="/html/category/article-465.htm">C语言数据结构、十字链表的分析及实现</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-8273.htm" title="宠物批发商（宠物批发渠道）">宠物批发商（宠物批发渠道）</a></li>
                        <li class="py-2"><a href="/html/category/article-7582.htm" title="哈尔滨阿城区宠物医院（哈尔滨阿城区宠物医院地址）">哈尔滨阿城区宠物医院（哈尔滨阿城区宠物医院地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-7812.htm" title="女孩十大最好专业工资高（女孩什么专业好就业工资高）">女孩十大最好专业工资高（女孩什么专业好就业工资高）</a></li>
                        <li class="py-2"><a href="/html/category/article-8365.htm" title="广州宠物饲料生产企业排名（广州宠物饲料批发市场）">广州宠物饲料生产企业排名（广州宠物饲料批发市场）</a></li>
                        <li class="py-2"><a href="/html/category/article-7215.htm" title="宠物粮厂家招聘 宠物粮厂家招聘最新信息">宠物粮厂家招聘 宠物粮厂家招聘最新信息</a></li>
                        <li class="py-2"><a href="/html/category/article-8088.htm" title="宠物医院申请条件（宠物医院的条件）">宠物医院申请条件（宠物医院的条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-7905.htm" title="猫咪轻微抓伤破皮（猫咪抓伤轻微破皮要紧吗）">猫咪轻微抓伤破皮（猫咪抓伤轻微破皮要紧吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7490.htm" title="厦门领养宠物猫中心电话 厦门领养宠物猫中心电话号码">厦门领养宠物猫中心电话 厦门领养宠物猫中心电话号码</a></li>
                        <li class="py-2"><a href="/html/category/article-7077.htm" title="电影演员李羚近况（这都可以？）演员李羚年轻时候的照片，传闻中的陈芊芊分集剧情，李羚，">电影演员李羚近况（这都可以？）演员李羚年轻时候的照片，传闻中的陈芊芊分集剧情，李羚，</a></li>
                        <li class="py-2"><a href="/html/category/article-7260.htm" title="宠物粮食品牌前十名排名榜图片大全（宠物粮食品牌起名大全）">宠物粮食品牌前十名排名榜图片大全（宠物粮食品牌起名大全）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>