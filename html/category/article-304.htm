<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-304.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>MySQL 连接的基本操作：交叉、内和外连接 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        MySQL 连接的基本操作：交叉、内和外连接                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-kimbie-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li>MySQL常用的三种连接方式</li> <li>一，MySQL 交叉连接</li> <li> <ul> <li> <ul> <li>1）查询 tb_students_info 表中的数据</li> <li>2）查询 tb_course 表中的数据</li> <li>3）使用 CROSS JOIN 查询出两张表中的笛卡尔积</li> </ul> </li> <li>笛卡尔积</li> </ul> </li> <li>二，MySQL 内连接</li> <li>三，MySQL 外连接</li> <li> <ul> <li> <ul> <li>1）左连接</li> <li>2）右连接</li> </ul> </li> </ul> </li> </ul> </div> <hr/> <h1>MySQL常用的三种连接方式</h1> <p>前面所说的查询语句都是针对一个表的，但是在关系型数据库中，表与表之间是有联系的，所以在实际应用中，经常使用多表查询。多表查询就是同时查询两个或两个以上的表。</p> <p>在 MySQL 中，多表查询主要有交叉连接、内连接和外连接。</p> <h1>一，MySQL 交叉连接</h1> <p>交叉连接（CROSS JOIN）一般用来返回连接表的笛卡尔积。</p> <blockquote> <p>本文的末尾介绍了笛卡尔积，不了解笛卡尔积的读者可以先阅读文章末尾部分，然后再继续学习交叉连接。</p> </blockquote> <p>交叉连接的语法格式如下：</p> <pre><code>SELECT <字段名> FROM <表1> CROSS JOIN <表2> [WHERE子句]</code></pre> <p>或</p> <pre><code>SELECT <字段名> FROM <表1>, <表2> [WHERE子句]</code></pre> <p>语法说明如下：</p> <ul> <li>字段名：需要查询的字段名称。</li> <li><表1><表2>：需要交叉连接的表名。</li> <li>WHERE 子句：用来设置交叉连接的查询条件。</li> </ul> <p>注意：多个表交叉连接时，在 FROM 后连续使用 CROSS JOIN 或, 即可。以上两种语法的返回结果是相同的，但是第一种语法才是官方建议的标准写法。</p> <p>当连接的表之间没有关系时，我们会省略掉 WHERE 子句，这时返回结果就是两个表的笛卡尔积，返回结果数量就是两个表的数据行相乘。需要注意的是，如果每个表有 1000 行，那么返回结果的数量就有 1000×1000 = 1000000 行，数据量是非常巨大的。</p> <p>交叉连接可以查询两个或两个以上的表，为了让读者更好的理解，下面先讲解两个表的交叉连接查询。<br /><strong>例 1</strong><br /> 查询学生信息表和科目信息表，并得到一个笛卡尔积。</p> <p>为了方便观察学生信息表和科目表交叉连接后的运行结果，我们先分别查询出这两个表的数据，再进行交叉连接查询。</p> <h3>1）查询 tb_students_info 表中的数据</h3> <p>SQL 语句和运行结果如下：</p> <pre><code>mysql> SELECT * FROM tb_students_info; +----+--------+------+------+--------+-----------+ | id | name   | age  | sex  | height | course_id | +----+--------+------+------+--------+-----------+ |  1 | Dany   |   25 | 男   |    160 |         1 | |  2 | Green  |   23 | 男   |    158 |         2 | |  3 | Henry  |   23 | 女   |    185 |         1 | |  4 | Jane   |   22 | 男   |    162 |         3 | |  5 | Jim    |   24 | 女   |    175 |         2 | |  6 | John   |   21 | 女   |    172 |         4 | |  7 | Lily   |   22 | 男   |    165 |         4 | |  8 | Susan  |   23 | 男   |    170 |         5 | |  9 | Thomas |   22 | 女   |    178 |         5 | | 10 | Tom    |   23 | 女   |    165 |         5 | +----+--------+------+------+--------+-----------+ 10 rows in set (0.00 sec)</code></pre> <h3>2）查询 tb_course 表中的数据</h3> <p>SQL 语句和运行结果如下：</p> <pre><code>mysql> SELECT * FROM tb_course; +----+-------------+ | id | course_name | +----+-------------+ |  1 | Java        | |  2 | MySQL       | |  3 | Python      | |  4 | Go          | |  5 | C++         | +----+-------------+ 5 rows in set (0.00 sec)</code></pre> <h3>3）使用 CROSS JOIN 查询出两张表中的笛卡尔积</h3> <p>SQL 语句和运行结果如下：</p> <pre><code>mysql> SELECT * FROM tb_course CROSS JOIN tb_students_info; +----+-------------+----+--------+------+------+--------+-----------+ | id | course_name | id | name   | age  | sex  | height | course_id | +----+-------------+----+--------+------+------+--------+-----------+ |  1 | Java        |  1 | Dany   |   25 | 男   |    160 |         1 | |  2 | MySQL       |  1 | Dany   |   25 | 男   |    160 |         1 | |  3 | Python      |  1 | Dany   |   25 | 男   |    160 |         1 | |  4 | Go          |  1 | Dany   |   25 | 男   |    160 |         1 | |  5 | C++         |  1 | Dany   |   25 | 男   |    160 |         1 | |  1 | Java        |  2 | Green  |   23 | 男   |    158 |         2 | |  2 | MySQL       |  2 | Green  |   23 | 男   |    158 |         2 | |  3 | Python      |  2 | Green  |   23 | 男   |    158 |         2 | |  4 | Go          |  2 | Green  |   23 | 男   |    158 |         2 | |  5 | C++         |  2 | Green  |   23 | 男   |    158 |         2 | |  1 | Java        |  3 | Henry  |   23 | 女   |    185 |         1 | |  2 | MySQL       |  3 | Henry  |   23 | 女   |    185 |         1 | |  3 | Python      |  3 | Henry  |   23 | 女   |    185 |         1 | |  4 | Go          |  3 | Henry  |   23 | 女   |    185 |         1 | |  5 | C++         |  3 | Henry  |   23 | 女   |    185 |         1 | |  1 | Java        |  4 | Jane   |   22 | 男   |    162 |         3 | |  2 | MySQL       |  4 | Jane   |   22 | 男   |    162 |         3 | |  3 | Python      |  4 | Jane   |   22 | 男   |    162 |         3 | |  4 | Go          |  4 | Jane   |   22 | 男   |    162 |         3 | |  5 | C++         |  4 | Jane   |   22 | 男   |    162 |         3 | |  1 | Java        |  5 | Jim    |   24 | 女   |    175 |         2 | |  2 | MySQL       |  5 | Jim    |   24 | 女   |    175 |         2 | |  3 | Python      |  5 | Jim    |   24 | 女   |    175 |         2 | |  4 | Go          |  5 | Jim    |   24 | 女   |    175 |         2 | |  5 | C++         |  5 | Jim    |   24 | 女   |    175 |         2 | |  1 | Java        |  6 | John   |   21 | 女   |    172 |         4 | |  2 | MySQL       |  6 | John   |   21 | 女   |    172 |         4 | |  3 | Python      |  6 | John   |   21 | 女   |    172 |         4 | |  4 | Go          |  6 | John   |   21 | 女   |    172 |         4 | |  5 | C++         |  6 | John   |   21 | 女   |    172 |         4 | |  1 | Java        |  7 | Lily   |   22 | 男   |    165 |         4 | |  2 | MySQL       |  7 | Lily   |   22 | 男   |    165 |         4 | |  3 | Python      |  7 | Lily   |   22 | 男   |    165 |         4 | |  4 | Go          |  7 | Lily   |   22 | 男   |    165 |         4 | |  5 | C++         |  7 | Lily   |   22 | 男   |    165 |         4 | |  1 | Java        |  8 | Susan  |   23 | 男   |    170 |         5 | |  2 | MySQL       |  8 | Susan  |   23 | 男   |    170 |         5 | |  3 | Python      |  8 | Susan  |   23 | 男   |    170 |         5 | |  4 | Go          |  8 | Susan  |   23 | 男   |    170 |         5 | |  5 | C++         |  8 | Susan  |   23 | 男   |    170 |         5 | |  1 | Java        |  9 | Thomas |   22 | 女   |    178 |         5 | |  2 | MySQL       |  9 | Thomas |   22 | 女   |    178 |         5 | |  3 | Python      |  9 | Thomas |   22 | 女   |    178 |         5 | |  4 | Go          |  9 | Thomas |   22 | 女   |    178 |         5 | |  5 | C++         |  9 | Thomas |   22 | 女   |    178 |         5 | |  1 | Java        | 10 | Tom    |   23 | 女   |    165 |         5 | |  2 | MySQL       | 10 | Tom    |   23 | 女   |    165 |         5 | |  3 | Python      | 10 | Tom    |   23 | 女   |    165 |         5 | |  4 | Go          | 10 | Tom    |   23 | 女   |    165 |         5 | |  5 | C++         | 10 | Tom    |   23 | 女   |    165 |         5 | +----+-------------+----+--------+------+------+--------+-----------+ 50 rows in set (0.00 sec)</code></pre> <p>由运行结果可以看出，tb_course 和 tb_students_info 表交叉连接查询后，返回了 50 条记录。可以想象，当表中的数据较多时，得到的运行结果会非常长，而且得到的运行结果也没太大的意义。所以，通过交叉连接的方式进行多表查询的这种方法并不常用，我们应该尽量避免这种查询。<br /><strong>例 2</strong><br /> 查询 tb_course 表中的 id 字段和 tb_students_info 表中的 course_id 字段相等的内容， SQL 语句和运行结果如下：</p> <pre><code>mysql> SELECT * FROM tb_course CROSS JOIN tb_students_info      -> WHERE tb_students_info.course_id = tb_course.id; +----+-------------+----+--------+------+------+--------+-----------+ | id | course_name | id | name   | age  | sex  | height | course_id | +----+-------------+----+--------+------+------+--------+-----------+ |  1 | Java        |  1 | Dany   |   25 | 男   |    160 |         1 | |  2 | MySQL       |  2 | Green  |   23 | 男   |    158 |         2 | |  1 | Java        |  3 | Henry  |   23 | 女   |    185 |         1 | |  3 | Python      |  4 | Jane   |   22 | 男   |    162 |         3 | |  2 | MySQL       |  5 | Jim    |   24 | 女   |    175 |         2 | |  4 | Go          |  6 | John   |   21 | 女   |    172 |         4 | |  4 | Go          |  7 | Lily   |   22 | 男   |    165 |         4 | |  5 | C++         |  8 | Susan  |   23 | 男   |    170 |         5 | |  5 | C++         |  9 | Thomas |   22 | 女   |    178 |         5 | |  5 | C++         | 10 | Tom    |   23 | 女   |    165 |         5 | +----+-------------+----+--------+------+------+--------+-----------+ 10 rows in set (0.01 sec)  如果在交叉连接时使用 WHERE 子句，MySQL 会先生成两个表的笛卡尔积，然后再选择满足 WHERE 条件的记录。因此，表的数量较多时，交叉连接会非常非常慢。一般情况下不建议使用交叉连接。</code></pre> <p>在 MySQL 中，多表查询一般使用内连接和外连接，它们的效率要高于交叉连接。请猛击《MySQL内连接》和《MySQL外连接》阅读学习 MySQL 中的内连接和外连接。</p> <h2>笛卡尔积</h2> <p>笛卡尔积（Cartesian product）是指两个集合 X 和 Y 的乘积。</p> <p>例如，有 A 和 B 两个集合，它们的值如下：</p> <pre><code>A = {1,2} B = {3,4,5}</code></pre> <p>集合 A×B 和 B×A 的结果集分别表示为：</p> <pre><code>A×B={(1,3), (1,4), (1,5), (2,3), (2,4), (2,5) }; B×A={(3,1), (3,2), (4,1), (4,2), (5,1), (5,2) };</code></pre> <p>以上 A×B 和 B×A 的结果就叫做两个集合的笛卡尔积。</p> <p>并且，从以上结果我们可以看出：</p> <ul> <li>两个集合相乘，不满足交换率，即 A×B≠B×A。</li> <li>A 集合和 B 集合的笛卡尔积是 A 集合的元素个数 × B 集合的元素个数。</li> </ul> <p>多表查询遵循的算法就是以上提到的笛卡尔积，表与表之间的连接可以看成是在做乘法运算。在实际应用中，应避免使用笛卡尔积，因为笛卡尔积中容易存在大量的不合理数据，简单来说就是容易导致查询结果重复、混乱。</p> <h1>二，MySQL 内连接</h1> <p>内连接（INNER JOIN）主要通过设置连接条件的方式，来移除查询结果中某些数据行的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。</p> <p>内连接使用 INNER JOIN 关键字连接两张表，并使用 ON 子句来设置连接条件。如果没有连接条件，INNER JOIN 和 CROSS JOIN 在语法上是等同的，两者可以互换。</p> <p>内连接的语法格式如下：</p> <pre><code>SELECT <字段名> FROM <表1> INNER JOIN <表2> [ON子句]</code></pre> <p>语法说明如下。</p> <ul> <li>字段名：需要查询的字段名称。</li> <li><表1><表2>：需要内连接的表名。</li> <li>INNER JOIN ：内连接中可以省略 INNER 关键字，只用关键字 JOIN。</li> <li>ON 子句：用来设置内连接的连接条件。</li> </ul> <blockquote> <p>INNER JOIN 也可以使用 WHERE 子句指定连接条件，但是 INNER JOIN … ON 语法是官方的标准写法，而且 WHERE 子句在某些时候会影响查询的性能。</p> </blockquote> <p>多个表内连接时，在 FROM 后连续使用 INNER JOIN 或 JOIN 即可。</p> <p>内连接可以查询两个或两个以上的表。为了让大家更好的理解，暂时只讲解两个表的连接查询。<br /><strong>例 1</strong><br /> 在 tb_students_info 表和 tb_course 表之间，使用内连接查询学生姓名和相对应的课程名称，SQL 语句和运行结果如下。</p> <pre><code>mysql> SELECT s.name,c.course_name FROM tb_students_info s INNER JOIN tb_course c      -> ON s.course_id = c.id; +--------+-------------+ | name   | course_name | +--------+-------------+ | Dany   | Java        | | Green  | MySQL       | | Henry  | Java        | | Jane   | Python      | | Jim    | MySQL       | | John   | Go          | | Lily   | Go          | | Susan  | C++         | | Thomas | C++         | | Tom    | C++         | +--------+-------------+ 10 rows in set (0.00 sec)</code></pre> <p>在这里的查询语句中，两个表之间的关系通过 INNER JOIN 指定，连接的条件使用 ON 子句给出。</p> <p>注意：当对多个表进行查询时，要在 SELECT 语句后面指定字段是来源于哪一张表。因此，在多表查询时，SELECT 语句后面的写法是<code>表名.列名</code>。另外，如果表名非常长的话，也可以给表设置别名，这样就可以直接在 SELECT 语句后面写上表的<code>别名.列名</code>。</p> <h1>三，MySQL 外连接</h1> <p>外连接可以分为左外连接和右外连接，下面根据实例分别介绍左外连接和右外连接。</p> <h3>1）左连接</h3> <p>左外连接又称为左连接，使用 LEFT OUTER JOIN 关键字连接两个表，并使用 ON 子句来设置连接条件。</p> <p>左连接的语法格式如下：</p> <pre><code>SELECT <字段名> FROM <表1> LEFT OUTER JOIN <表2> <ON子句></code></pre> <p>语法说明如下。</p> <ul> <li>字段名：需要查询的字段名称。</li> <li><表1><表2>：需要左连接的表名。</li> <li>LEFT OUTER JOIN：左连接中可以省略 OUTER 关键字，只使用关键字 LEFT JOIN。</li> <li>ON 子句：用来设置左连接的连接条件，不能省略。</li> </ul> <p>上述语法中，“表1”为基表，“表2”为参考表。左连接查询时，可以查询出“表1”中的所有记录和“表2”中匹配连接条件的记录。如果“表1”的某行在“表2”中没有匹配行，那么在返回结果中，“表2”的字段值均为空值（NULL）。<br /><strong>例 1</strong><br /> 在进行左连接查询之前，我们先查看 tb_course 和 tb_students_info 两张表中的数据。SQL 语句和运行结果如下。</p> <pre><code>mysql> SELECT * FROM tb_course; +----+-------------+ | id | course_name | +----+-------------+ |  1 | Java        | |  2 | MySQL       | |  3 | Python      | |  4 | Go          | |  5 | C++         | |  6 | HTML        | +----+-------------+ 6 rows in set (0.00 sec)  mysql> SELECT * FROM tb_students_info; +----+--------+------+------+--------+-----------+ | id | name   | age  | sex  | height | course_id | +----+--------+------+------+--------+-----------+ |  1 | Dany   |   25 | 男   |    160 |         1 | |  2 | Green  |   23 | 男   |    158 |         2 | |  3 | Henry  |   23 | 女   |    185 |         1 | |  4 | Jane   |   22 | 男   |    162 |         3 | |  5 | Jim    |   24 | 女   |    175 |         2 | |  6 | John   |   21 | 女   |    172 |         4 | |  7 | Lily   |   22 | 男   |    165 |         4 | |  8 | Susan  |   23 | 男   |    170 |         5 | |  9 | Thomas |   22 | 女   |    178 |         5 | | 10 | Tom    |   23 | 女   |    165 |         5 | | 11 | LiMing |   22 | 男   |    180 |         7 | +----+--------+------+------+--------+-----------+ 11 rows in set (0.00 sec)</code></pre> <p>在 tb_students_info 表和 tb_course 表中查询所有学生姓名和相对应的课程名称，包括没有课程的学生，SQL 语句和运行结果如下。</p> <pre><code>mysql> SELECT s.name,c.course_name FROM tb_students_info s LEFT OUTER JOIN tb_course c      -> ON s.`course_id`=c.`id`; +--------+-------------+ | name   | course_name | +--------+-------------+ | Dany   | Java        | | Henry  | Java        | | NULL   | Java        | | Green  | MySQL       | | Jim    | MySQL       | | Jane   | Python      | | John   | Go          | | Lily   | Go          | | Susan  | C++         | | Thomas | C++         | | Tom    | C++         | | LiMing | NULL        | +--------+-------------+ 12 rows in set (0.00 sec)</code></pre> <p>可以看到，运行结果显示了 12 条记录，name 为 LiMing 的学生目前没有课程，因为对应的 tb_course 表中没有该学生的课程信息，所以该条记录只取出了 tb_students_info 表中相应的值，而从 tb_course 表中取出的值为 NULL。</p> <h3>2）右连接</h3> <p>右外连接又称为右连接，右连接是左连接的反向连接。使用 RIGHT OUTER JOIN 关键字连接两个表，并使用 ON 子句来设置连接条件。</p> <p>右连接的语法格式如下：</p> <blockquote> <p>SELECT <字段名> FROM <表1> RIGHT OUTER JOIN <表2> <ON子句></p> </blockquote> <p>语法说明如下。</p> <ul> <li>字段名：需要查询的字段名称。</li> <li><表1><表2>：需要右连接的表名。</li> <li>RIGHT OUTER JOIN：右连接中可以省略 OUTER 关键字，只使用关键字 RIGHT JOIN。</li> <li>ON 子句：用来设置右连接的连接条件，不能省略。</li> </ul> <p>与左连接相反，右连接以“表2”为基表，“表1”为参考表。右连接查询时，可以查询出“表2”中的所有记录和“表1”中匹配连接条件的记录。如果“表2”的某行在“表1”中没有匹配行，那么在返回结果中，“表1”的字段值均为空值（NULL）。<br /><strong>例 2</strong><br /> 在 tb_students_info 表和 tb_course 表中查询所有课程，包括没有学生的课程，SQL 语句和运行结果如下。</p> <pre><code>mysql> SELECT s.name,c.course_name FROM tb_students_info s RIGHT OUTER JOIN tb_course c      -> ON s.`course_id`=c.`id`; +--------+-------------+ | name   | course_name | +--------+-------------+ | Dany   | Java        | | Green  | MySQL       | | Henry  | Java        | | Jane   | Python      | | Jim    | MySQL       | | John   | Go          | | Lily   | Go          | | Susan  | C++         | | Thomas | C++         | | Tom    | C++         | | NULL   | HTML        | +--------+-------------+ 11 rows in set (0.00 sec)</code></pre> <p>可以看到，结果显示了 11 条记录，名称为 HTML 的课程目前没有学生，因为对应的 tb_students_info 表中并没有该学生的信息，所以该条记录只取出了 tb_course 表中相应的值，而从 tb_students_info 表中取出的值为 NULL。</p> <blockquote> <p>多个表左/右连接时，在 ON 子句后连续使用 LEFT/RIGHT OUTER JOIN 或 LEFT/RIGHT JOIN 即可。</p> </blockquote> <p>使用外连接查询时，一定要分清需要查询的结果，是需要显示左表的全部记录还是右表的全部记录，然后选择相应的左连接和右连接。</p> </div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-303.htm">vue父向子组件传值、兄弟组件间传值、子向父组件传值</a></p>
                                                        <p>下一个：<a href="/html/category/article-305.htm">cors-filter使用，cors-filter解决跨域访问，cors-filter跨域请求</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7996.htm" title="宠物医生在线问诊免费（宠物免费咨询24小时在线医生）">宠物医生在线问诊免费（宠物免费咨询24小时在线医生）</a></li>
                        <li class="py-2"><a href="/html/category/article-6939.htm" title="高宇桥个人资料年龄简介（快来看）高宇桥原名叫什么，丁冬影视，徐若琪，">高宇桥个人资料年龄简介（快来看）高宇桥原名叫什么，丁冬影视，徐若琪，</a></li>
                        <li class="py-2"><a href="/html/category/article-8089.htm" title="北京观赏宠物医院电话号码多少（北京观赏动物医院营业时间）">北京观赏宠物医院电话号码多少（北京观赏动物医院营业时间）</a></li>
                        <li class="py-2"><a href="/html/category/article-7122.htm" title="对手全集（对手电视剧剧情分集介绍）一看就会，">对手全集（对手电视剧剧情分集介绍）一看就会，</a></li>
                        <li class="py-2"><a href="/html/category/article-7997.htm" title="动物疫苗概念的上市公司 动物疫苗上市公司龙头股">动物疫苗概念的上市公司 动物疫苗上市公司龙头股</a></li>
                        <li class="py-2"><a href="/html/category/article-7537.htm" title="正常宠物店一年利润有多少钱（宠物店一年内的收入情况来源）">正常宠物店一年利润有多少钱（宠物店一年内的收入情况来源）</a></li>
                        <li class="py-2"><a href="/html/category/article-7767.htm" title="北京观赏动物医院电话是多少（北京观赏动物医院地址）">北京观赏动物医院电话是多少（北京观赏动物医院地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-8135.htm" title="成都宠物领养平台微博号是多少（成都领养宠物中心）">成都宠物领养平台微博号是多少（成都领养宠物中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-8226.htm" title="郭德纲于谦《好朋友》相声台词/2013年江苏春晚(郭德纲于谦《好兄弟》)">郭德纲于谦《好朋友》相声台词/2013年江苏春晚(郭德纲于谦《好兄弟》)</a></li>
                        <li class="py-2"><a href="/html/category/article-7905.htm" title="猫咪轻微抓伤破皮（猫咪抓伤轻微破皮要紧吗）">猫咪轻微抓伤破皮（猫咪抓伤轻微破皮要紧吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>