<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-503.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>Vue.js 3.x 双向绑定原理_在线工具 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Vue.js 3.x 双向绑定原理_在线工具                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 id="什么是双向绑定">什么是双向绑定？</h2> <p>废话不多说，我们先来看一个 <code>v-model</code> 基本的示例：</p> <pre><code class="language-html">&lt;input type="text" v-model="search"&gt; </code></pre> <p>首先，我们要明白一点的是：<strong><code>v-model</code> 的本质是指令</strong>。因此，它跟我们一般的自定义指令是一样的，需要实现 <code>Vue.js</code> 生命周期的钩子函数。</p> <p>其次，<code>v-model</code> 实现了双向绑定，也就是：<strong>数据到 DOM 的单向流动</strong>、<strong>DOM 到数据的单向流动</strong>。</p> <p>明白了上面这两点，再来看代码就清晰多了。</p> <pre><code class="language-typescript">// packages/runtime-dom/src/directives/vModel.ts  export const vModelText: ModelDirective&lt;   HTMLInputElement | HTMLTextAreaElement &gt; = {   created() {},   mounted() {},   beforeUpdate() {} } </code></pre> <p>打开 <code>v-model</code> 的源码我们可以看到，它实现了对应的 <code>Vue.js</code> 生命周期钩子函数，实际上它就是一个内置的自定义指令。</p> <p>那么，<code>v-model</code> 如何实现双向绑定的呢？具体来说，<strong>数据到 DOM 的单向流动</strong>以及<strong>DOM 到数据的单向流动</strong>是如何实现的。</p> <h2 id="数据到-dom-的单向流动">数据到 DOM 的单向流动</h2> <pre><code class="language-typescript">// packages/runtime-dom/src/directives/vModel.ts  export const vModelText: ModelDirective&lt;   HTMLInputElement | HTMLTextAreaElement &gt; = {   // set value on mounted so it's after min/max for type="range"   mounted(el, { value }) {     el.value = value == null ? '' : value   } } </code></pre> <p>数据到 DOM 的单向流动实现非常简单，一行代码就搞定了，就是把 <code>v-model</code> 绑定的值赋值给 <code>el.value</code>。</p> <h2 id="dom-到数据的单向流动">DOM 到数据的单向流动</h2> <pre><code class="language-typescript">// packages/runtime-dom/src/directives/vModel.ts  export const vModelText: ModelDirective&lt;   HTMLInputElement | HTMLTextAreaElement &gt; = {   created(el, { modifiers: { lazy, trim, number } }, vnode) {     el._assign = getModelAssigner(vnode)          // see: https://github.com/vuejs/core/issues/3813     const castToNumber = number || (vnode.props &amp;&amp; vnode.props.type === 'number')          // 实现 lazy 功能     addEventListener(el, lazy ? 'change' : 'input', e =&gt; {       // `composing=true` 时不把 DOM 的值赋值给数据       if ((e.target as any).composing) return              let domValue: string | number = el.value       if (trim) {         domValue = domValue.trim()       } else if (castToNumber) {         domValue = toNumber(domValue)       }              // DOM 的值改变时，同时改变对应的数据（即改变 v-model 上绑定的变量的值）       el._assign(domValue)     })          // 实现 trim 功能     if (trim) {       addEventListener(el, 'change', () =&gt; {         el.value = el.value.trim()       })     }          // 不配置 lazy 时，监听的是 input 的 input 事件，它会在用户实时输入的时候触发。     // 此外，还会多监听 compositionstart 和 compositionend 事件。     if (!lazy) {     	// 这是因为，用户使用拼音输入法开始输入汉字时，这个事件会被触发，     	// 此时，设置 `composing=true`，在 input 事件回调里可以进行判断，避免将 DOM 的值赋值给数据，       // 因为此时并未输入完成。       addEventListener(el, 'compositionstart', onCompositionStart)              // 当用户从输入法中确定选中了一些数据完成输入后（如中文输入法常见的按空格确认输入的文字），       // 设置 `composing=false`，在 onCompositionEnd 中手动触发 input 事件，完成数据的赋值。       addEventListener(el, 'compositionend', onCompositionEnd)              // Safari &lt; 10.2 &amp; UIWebView doesn't fire compositionend when       // switching focus before confirming composition choice       // this also fixes the issue where some browsers e.g. iOS Chrome       // fires "change" instead of "input" on autocomplete.       addEventListener(el, 'change', onCompositionEnd)     }   } }  function onCompositionStart(e: Event) {   (e.target as any).composing = true }  function onCompositionEnd(e: Event) {   const target = e.target as any   if (target.composing) {     target.composing = false     target.dispatchEvent(new Event('input'))   } }  const getModelAssigner = (vnode: VNode): AssignerFn =&gt; {   const fn = vnode.props!['onUpdate:modelValue']   return isArray(fn) ? value =&gt; invokeArrayFns(fn, value) : fn } </code></pre> <p>代码有点多，但原理很简单：</p> <ul> <li>通过自定义监听事件 <code>addEventListener</code> 来监听 <code>input</code> 元素的 <code>input</code> 或 <code>change</code> 事件</li> <li>当用户手动输入数据时执行对应的函数，并通过 <code>el.value</code> 获取 <code>input</code> 的新值</li> <li>调用 <code>el._assign</code> （<code>onUpdate:modelValue</code> 属性对应的函数）方法 <code>v-model</code> 绑定的值</li> </ul> <p>而实现 DOM 到数据的单向流动，关键就在 <code>onUpdate:modelValue</code>。借助 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://vue-next-template-explorer.netlify.app/"  target="_blank"  rel="nofollow">Vue 3 Template Explorer</a>，我们可以查看其编译后生成的 <code>render</code> 函数，可以发现它做所的事情并没有什么神奇的地方，就是帮我们自动更新 <code>v-model</code> 上绑定的变量的值。</p> <pre><code class="language-javascript">&lt;input type="text" v-model="search"&gt;  import { vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue"  export function render(_ctx, _cache, $props, $setup, $data, $options) {   return _withDirectives((_openBlock(), _createElementBlock("input", {     type: "text",          // `onUpdate:modelValue` 所做的事，     // 就是自动帮我们更新 `v-model` 上绑定的变量的值。     "onUpdate:modelValue": $event =&gt; ((_ctx.search) = $event)        }, null, 8 /* PROPS */, ["onUpdate:modelValue"])), [     [_vModelText, _ctx.search]   ]) } </code></pre> <p>除此之外，还有对 <code>lazy</code> 的处理、<code>trim</code> 的处理、数字的处理、以及解决正在输入时文本被清空的问题。</p> <p>关于 <code>onCompositionStart</code> 和 <code>onCompositionEnd</code> 两个方法的作用，详见 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/vuejs/core/issues/2302"  target="_blank"  rel="nofollow">text added with IME to input that has v-model is gone when the view is updated #2302</a>。</p> <p><strong>一句话总结：通过使用 <code>addEventListener</code> 来实现 DOM 到数据的单向流动</strong>。</p> <p>最后是 <code>beforeUpdate</code> 的实现，如果数据的值和 DOM 的值不一致，则将数据更新到 DOM：</p> <pre><code class="language-javascript">// packages/runtime-dom/src/directives/vModel.ts  beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {     el._assign = getModelAssigner(vnode)     // avoid clearing unresolved text. #2302   	// 输入某些语言如中文，在没有输入完成时，在更新时会自动将已存在的文本清空，具体可见 issue#2302     if ((el as any).composing) return        if (document.activeElement === el) {       if (lazy) {         return       }       if (trim &amp;&amp; el.value.trim() === value) {         return       }       if ((number || el.type === 'number') &amp;&amp; toNumber(el.value) === value) {         return       }     }     const newValue = value == null ? '' : value     if (el.value !== newValue) {       el.value = newValue     }   } </code></pre> <p>以上就是 <code>text</code> 类型的 <code>input</code> 元素双向绑定原理，当然 <code>input</code> 元素类型不止这个，还有诸如 <code>radio</code>、<code>checkbox</code> 等类型，大家有兴趣的话可以自己去看，但是原理都是相同的，就是实现两个功能：<strong>数据到 DOM 的单向流动</strong>、<strong>DOM 到数据的单向流动</strong>。</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-502.htm">python开发HDFS</a></p>
                                                        <p>下一个：<a href="/html/category/article-504.htm">Infrastructure 知识: dnf对module的处理</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1354.htm" title="C ++中具有最大金数的路径">C ++中具有最大金数的路径</a></li>
                        <li class="py-2"><a href="/html/category/article-528.htm" title="我们如何在MySQL返回的结果集的组级别上应用过滤条件？">我们如何在MySQL返回的结果集的组级别上应用过滤条件？</a></li>
                        <li class="py-2"><a href="/html/category/article-521.htm" title="typescript的安装运行与自动编译">typescript的安装运行与自动编译</a></li>
                        <li class="py-2"><a href="/html/category/article-4295.htm" title="妙三多接种注意事项（妙三多接种间隔时间）">妙三多接种注意事项（妙三多接种间隔时间）</a></li>
                        <li class="py-2"><a href="/html/category/article-1942.htm" title="如何在MySQL中添加两个或多个字符串？">如何在MySQL中添加两个或多个字符串？</a></li>
                        <li class="py-2"><a href="/html/category/article-1334.htm" title="【openstack】cloudkitty组件，入门级安装（快速）_在线工具">【openstack】cloudkitty组件，入门级安装（快速）_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4370.htm" title="女生学动物医学好吗专科生（女生学动物医学专业好吗）">女生学动物医学好吗专科生（女生学动物医学专业好吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-522.htm" title="用字符串中的ASCII值替换所有特殊字符-JavaScript">用字符串中的ASCII值替换所有特殊字符-JavaScript</a></li>
                        <li class="py-2"><a href="/html/category/article-4404.htm" title="动物疫苗品牌排名前十 动物疫苗品牌排名前十名">动物疫苗品牌排名前十 动物疫苗品牌排名前十名</a></li>
                        <li class="py-2"><a href="/html/category/article-3425.htm" title="【UWP】实现一个波浪进度条">【UWP】实现一个波浪进度条</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">16</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>