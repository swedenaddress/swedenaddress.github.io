<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-336.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>创建线程方式三实现Callable接口 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        创建线程方式三实现Callable接口                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2>一、步骤</h2> <p>1、定义一个线程任务类实现Callable接口，声明线程执行的结果类型。<br /> 2、重写线程任务类的call()方法，这个方法可以直接返回执行的结果。<br /> 3、创建一个Callable的线程任务对象。<br /> 4、把Callable的线程任务对象包装成一个未来任务对象。<br /> 5、把未来任务对象包装成线程对象。<br /> 6、调用线程start()方法，启动线程。<br /> 7、获取线程执行结果。</p> <h2>二、代码</h2> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>zjl<span class="token punctuation">.</span>study<span class="token punctuation">.</span></span>多线程<span class="token punctuation">;</span><span class="token keyword">import</span><span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span><span class="token comment">/**  * Created by zjl 2022/5/28  **/</span><span class="token keyword">public</span><span class="token keyword">class</span> 创建线程方式<span class="token number">3</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 3、创建一个Callable的线程任务对象。</span><span class="token class-name">MyCallable</span> myCallable<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4、把Callable的线程任务对象包装成一个未来任务对象。</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">String</span><span class="token punctuation">></span></span> futureTask<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation"><</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5、把未来任务对象包装成线程对象。</span><span class="token class-name">Thread</span> thread<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6、调用线程start()方法，启动线程。</span>     thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7、获取线程执行结果。如果此时获取结果的任务还未执行完成，会让出CPU，直至任务执行完成才获取结果。</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token class-name">String</span> s<span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 1、定义一个线程任务类实现Callable接口，声明线程执行的结果类型。</span><span class="token keyword">class</span><span class="token class-name">MyCallable</span><span class="token keyword">implements</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">{<!-- --></span><span class="token comment">// 2、重写线程任务类的call()方法，这个方法可以直接返回执行的结果。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">Exception</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"子线程任务执行,线程名称为："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>三、运行结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/9dbd52c4560893d38ed3be23de3543d0.jpg" alt="创建线程方式三实现Callable接口"></p> <h2>四、优缺点</h2> <h1>1、缺点</h1> <ul> <li>代码复杂</li> </ul> <h1>2、优点</h1> <ul> <li>线程任务只是实现了Callable接口，可以继续继承其他类，而且可以继续实现其他接口。</li> <li>同一个线程任务对象可以被包装成多个线程对象。</li> <li>适合多个线程去共享同一个资源。</li> <li>实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立。</li> <li>线程池可以放入Runnable接口和Callable接口。</li> <li>可以得到线程执行结果。</li> </ul> </div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-335.htm">利用QEMU+GDB搭建Linux内核调试环境</a></p>
                                                        <p>下一个：<a href="/html/category/article-337.htm">PowerDesigner默认双向关联修改为单向关联</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7445.htm" title="东北农业大学动物医学院附属医院招聘公告（东北农业大学动物医院新地址）">东北农业大学动物医学院附属医院招聘公告（东北农业大学动物医院新地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-6151.htm" title="宠物粮食品牌起名大全图片及名称介绍（宠物粮品牌排行榜）">宠物粮食品牌起名大全图片及名称介绍（宠物粮品牌排行榜）</a></li>
                        <li class="py-2"><a href="/html/category/article-7307.htm" title="下载动物医院的软件有哪些（下载动物医院的软件有哪些好用）">下载动物医院的软件有哪些（下载动物医院的软件有哪些好用）</a></li>
                        <li class="py-2"><a href="/html/category/article-6847.htm" title="猫为什么不建议打狂犬疫苗呢（猫为什么不建议打狂犬疫苗呢视频）">猫为什么不建议打狂犬疫苗呢（猫为什么不建议打狂犬疫苗呢视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-7444.htm" title="2011中国城来自市竞争力排行榜，2011最新中国城市排名,2011中国城市人口排名，2011中国城市经济排行榜(2019年中国城市竞争力排名是怎样的？)">2011中国城来自市竞争力排行榜，2011最新中国城市排名,2011中国城市人口排名，2011中国城市经济排行榜(2019年中国城市竞争力排名是怎样的？)</a></li>
                        <li class="py-2"><a href="/html/category/article-6195.htm" title="猫粮生产工艺及设备有哪些 猫粮生产工艺及设备有哪些品牌">猫粮生产工艺及设备有哪些 猫粮生产工艺及设备有哪些品牌</a></li>
                        <li class="py-2"><a href="/html/category/article-7076.htm" title="一首《十送红军》为何总让人热泪盈眶呢（这样也行？）一首《十送红军》为何总让人热泪盈眶的歌，东方母亲，十送红军电视剧，">一首《十送红军》为何总让人热泪盈眶呢（这样也行？）一首《十送红军》为何总让人热泪盈眶的歌，东方母亲，十送红军电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-7306.htm" title="动物疫苗的作用有哪些方面 动物疫苗的作用有哪些方面呢">动物疫苗的作用有哪些方面 动物疫苗的作用有哪些方面呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7675.htm" title="熟醉大闸蟹的做法大全(大闸蟹的做法大全家常)">熟醉大闸蟹的做法大全(大闸蟹的做法大全家常)</a></li>
                        <li class="py-2"><a href="/html/category/article-7215.htm" title="宠物粮厂家招聘 宠物粮厂家招聘最新信息">宠物粮厂家招聘 宠物粮厂家招聘最新信息</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>