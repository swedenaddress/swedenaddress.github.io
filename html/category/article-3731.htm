<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-3731.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>夯实基础图解作用域链和闭包 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        夯实基础图解作用域链和闭包                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 id="前言">前言</h2> <p>本文承接上篇<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/qcjay/p/16122334.html"  target="_blank" rel="nofollow">夯实基础上篇-图解 JavaScript 执行机制</a>，请<strong>先阅读上篇</strong>~</p> <p>讲基础不容易，本文通过 7个demo和6张图，和大家一起学习温故作用域链和闭包，本文大纲：</p> <ol> <li>什么是作用域链</li> <li>什么是词法作用域</li> <li>什么是闭包</li> <li>闭包的实际使用案例</li> </ol> <h2 id="什么是作用域链">什么是作用域链</h2> <p>正文开始~</p> <p>请思考下面 demo 的 name 打印什么</p> <pre><code class="language-js">    function test() {       console.log(name)     }     function test1() {       const name = 'test1的name'       test()     }     const name = 'global的name'     test1()</code></pre> <p>通过执行上下文来分析代码的执行流程，执行到 test 函数时：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3a8f614a8f90fe33db06c15fc41742b6.jpg" alt="夯实基础图解作用域链和闭包"></p> <p>那 test 函数里的 name 是哪个呢？这就涉及到了作用域链的定义：<strong>变量和函数的查找</strong>链条就是作用域链。它决定了各级上下文中的代码在访问变量和函数时的顺序：查找变量和函数时，先在当前执行上下文找，当前没有，到下一个执行上下文找，没有再到下一个，直到全局执行上下文，都没有就报错<code>使用未定义的变量或函数</code>。</p> <p>而在每个执行上下文的变量环境中，都包含了一个外部引用 outer，用来指向外部的执行上下文，链条结构是<code>当前执行上下文 &gt; 包含当前上下文的上下文1 &gt; 包含上下文1的上下文2 ...</code>。</p> <p>而这个 demo 会打印<code>global的name</code>，原因是 test 执行上下文的 outer 指向全局执行上下文，包括 test1 的 outer 也是指向全局执行上下文：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/77a47f71da7dcd3d603f53d6d1703f0d.jpg" alt="夯实基础图解作用域链和闭包"></p> <p>也许会有同学疑惑，为什么 test 的 outer 指向全局执行上下文，而不是 test1，这是因为在 JavaScript 执行过程中，其作用域链是由词法作用域决定的。</p> <h2 id="什么是词法作用域">什么是词法作用域</h2> <p>词法作用域就是作用域是由代码中<strong>函数声明的位置</strong>来决定的，它是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符，它<strong>与函数是怎样调用的没有关系</strong>。所以刚才的例子打印的是<code>global的name</code>。</p> <p>看个具体例子：</p> <pre><code class="language-js">    const count = 0     function test() {       const count = 1        function test1() {         const count = 2          function test2() {           const count = 3         }       }     }</code></pre> <p>其包含关系和作用域链：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/411df79297f904c2775c8010b8fe8c25.jpg" alt="夯实基础图解作用域链和闭包"></p> <p>事实上在 Global Scope 全局作用域（Window）之前，还有一个 Script Scope 脚本作用域，它存放的是当前 Script 内可访问的 let 变量和 const 变量，而 var 变量存放在 Global 上的就不在 Script Scope，它类似于是<strong>脚本范围内</strong>的全局作用域。在下面的 demo 中再举例。</p> <h2 id="什么是闭包">什么是闭包</h2> <p>闭包指的是那些<strong>引用了另一个函数作用域中变量</strong>的函数，通常是在嵌套函数中实现的。</p> <p>比如这个例子：</p> <pre><code class="language-js">    var globalVariable = 1     const scriptVariable = 2          function test() {       let name = 'Jaychou'        return {         getName() {           const count = 1           return name         },         setName(newValue) {           name = newValue         }       }     }      const testFun = test()     console.log(testFun.getName()) // Jaychou     testFun.setName('小明')     console.log(testFun.getName()) // 小明</code></pre> <p>大家可以根据作用域链的知识，思考一下执行到<code>console.log(testFun.getName())</code>的 getName 里面的时候作用域链是怎样的~</p> <p>我们用浏览器的开发者工具看一下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e2db2b9bccfafd90f8159c2e558ce501.jpg" alt="夯实基础图解作用域链和闭包"><br /> 作用域链是<code>当前作用域 》test 函数的闭包 》Script 作用域 》Global 作用域</code></p> <ol> <li>为什么叫 test 函数的闭包？因为当<code>const testFun = test()</code>的 test 函数执行完之后，test 的函数执行上下文已经被销毁了，但它返回的<code>{ getName(){}, setName(){} }</code>对象被 testFun 引用着，而 getName 和 setName 引用着 test 函数内定义的 name 变量，所以这些被引用的变量依然需要被保存在内存中，而这些变量的集合称为闭包 Closure；</li> <li>目前闭包内的 name 变量就只能通过 getName 和 setName 去访问和设置，而这也是闭包的作用之一：封装私有变量；</li> <li>刚才说的 Script Scope 中保存着 scriptVariable 变量，globalVariable 变量是 var 声明的，所以在 Global Scope（Window）中。</li> </ol> <p>再看1个具体案例理解闭包：</p> <pre><code class="language-js">    const globalCount = 0      function test() {       const count = 0       return test1        function test1() {         const count1 = 1         return test2          function test2() {           const count2 = 2           console.log('test2', globalCount + count + count1 + count2)         }       }     }     test()()()</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8507654efd3eaf385d294567c41399ec.jpg" alt="夯实基础图解作用域链和闭包"><br /> 执行到 test2 内部的 console.log 那一行时，其作用域链是<code>当前作用域 》test1 的闭包 》test 的闭包 》Script Scope 》Global Scope</code></p> <blockquote> <p>闭包使用建议：当不需要使用了之后，注意要解除引用着闭包的变量，这样闭包才会被释放。比如第1个案例的 testFun 如果不需要用了，就把它释放 testFun = null。</p> </blockquote> <h2 id="闭包的实际使用案例">闭包的实际使用案例</h2> <h3 id="封装私有变量">封装私有变量</h3> <p>就是刚才的 getName、setName 案例，通过 getName 获取 name，通过 setName 设置 name</p> <h3 id="封装单例">封装单例</h3> <pre><code class="language-js">    const Single = (function () {       let instance = null        return function () {         if (!instance) {           instance = {             name: 'jaychou',             age: 40           }         }         return instance       }     })()     const obj1 = new Single()     const obj2 = new Single()     console.log(obj1 === obj2) // true</code></pre> <p>这里只是举个例子，具体的 instance 是什么类型，支持什么功能要看实际项目。</p> <h3 id="防抖和节流">防抖和节流</h3> <p>防抖：</p> <pre><code class="language-js">    function debounce(fn, delay) {       let timer = null;        return function () {         let context = this;         let args = arguments;          timer &amp;&amp; clearTimeout(timer);          timer = setTimeout(function () {           fn.apply(context, args);         }, delay);       }     }</code></pre> <p>节流：</p> <pre><code class="language-js">    function throttle(fn, interval) {       let last = 0;        return function () {         let now = +new Date()         if (now - last &gt;= interval) {           fn.apply(this, arguments);           last = now;         }       }     }</code></pre> <p>更完整的防抖和节流的实现可参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://lodash.com/"  target="_blank" rel="nofollow"> Lodash</a>，这里主要是演示闭包的使用</p> <h3 id="总结">总结</h3> <p>闭包的使用场景很多，功能很强大，可以说在前端项目中经常可见例如 React Hooks 等等，这里只列举了几个很简单的很实用的应用场景。</p> <h2 id="总结-1">总结</h2> <p>本文主要介绍了作用域链和闭包，沿着<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/qcjay/p/16122334.html"  target="_blank" rel="nofollow">夯实基础上篇-图解 JavaScript 执行机制</a> 来一起看的话应该比较容易理解，若对大家有所帮助，请不吝点赞关注~</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-3426.htm">springboot 使用 ActiveMQ</a></p>
                                                        <p>下一个：<a href="/html/category/article-3732.htm">前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-3124.htm">[JVM]java虚拟机运行时数据区域&#8211;程序计数器、虚拟机栈和本地方法栈</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1941.htm">Vue中的路由守卫</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-522.htm">用字符串中的ASCII值替换所有特殊字符-JavaScript</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-502.htm">python开发HDFS</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-495.htm">python读写hdfs</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-461.htm">记一次Spring|项目启动耗时超级长的优化</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-359.htm">uniapp中封装一个弹框组件</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-330.htm">spring security 基本介绍</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-285.htm">spring security 权限(注解)</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-268.htm">SpringBoot 自定义ThreadPoolTaskScheduler线程池执行定时任务</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4070.htm" title="taro跳转到tabBar报错问题">taro跳转到tabBar报错问题</a></li>
                        <li class="py-2"><a href="/html/category/article-1056.htm" title="vue项目的excel的导入与导出">vue项目的excel的导入与导出</a></li>
                        <li class="py-2"><a href="/html/category/article-517.htm" title="解决rancher和k8s集群ingress部署在同一台机器导致的80及443端口占用问题">解决rancher和k8s集群ingress部署在同一台机器导致的80及443端口占用问题</a></li>
                        <li class="py-2"><a href="/html/category/article-1631.htm" title="Vue动态样式:class用法">Vue动态样式:class用法</a></li>
                        <li class="py-2"><a href="/html/category/article-3731.htm" title="夯实基础图解作用域链和闭包">夯实基础图解作用域链和闭包</a></li>
                        <li class="py-2"><a href="/html/category/article-1353.htm" title="关于Redis缓存和数据库一致性问题">关于Redis缓存和数据库一致性问题</a></li>
                        <li class="py-2"><a href="/html/category/article-1055.htm" title="Java 轻松掌握字符缓冲流的使用_java">Java 轻松掌握字符缓冲流的使用_java</a></li>
                        <li class="py-2"><a href="/html/category/article-1334.htm" title="【openstack】cloudkitty组件，入门级安装（快速）_在线工具">【openstack】cloudkitty组件，入门级安装（快速）_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-512.htm" title="VUE3 之 使用 Mixin 实现代码的复用 &#8211; 这个系列的教程通俗易懂，适合新手">VUE3 之 使用 Mixin 实现代码的复用 &#8211; 这个系列的教程通俗易懂，适合新手</a></li>
                        <li class="py-2"><a href="/html/category/article-3426.htm" title="springboot 使用 ActiveMQ">springboot 使用 ActiveMQ</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>