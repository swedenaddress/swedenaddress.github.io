<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-429.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>SpringBoot入门，Dubbo+Zookeeper简单入门案例 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        SpringBoot入门，Dubbo+Zookeeper简单入门案例                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <h1>简介：</h1> <p>1、Dubbo：一款高性能，轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。架构如下图所示（摘自官网）</p> <p style="text-align:center;"><img fetchpriority="high" decoding="async" alt="" class="has" height="382" src="http://img.555519.xyz/uploads/20230110/c700aee4496a12ed61b9398d3d355e72.jpg"></p> <p>&nbsp;</p> <table border="1" cellpadding="1" cellspacing="1" style="width:500px;"> <caption>   节点及说明<br />  </caption> <tbody> <tr> <td>节点</td> <td>说明</td> </tr> <tr> <td>Consumer</td> <td>调用远程服务的服务消费方</td> </tr> <tr> <td>Provider</td> <td>暴露服务的服务提供方</td> </tr> <tr> <td>Container</td> <td>服务运行容器</td> </tr> <tr> <td>Registry</td> <td>服务注册与发现的注册中心</td> </tr> <tr> <td>Monitor</td> <td>统计服务的调用次数和调用时间的监控中心</td> </tr> </tbody> </table> <p>&nbsp;</p> <table border="1" cellpadding="1" cellspacing="1"> <caption>   调用关系说明<br />  </caption> <tbody> <tr> <td style="width:51px;">0</td> <td>服务容器负责启动，加载，运行服务提供者。</td> </tr> <tr> <td style="width:51px;">1</td> <td>服务提供者在启动时，向注册中心注册自己提供的服务。</td> </tr> <tr> <td style="width:51px;">2</td> <td>服务消费者在启动时，向注册中心订阅自己所需的服务。</td> </tr> <tr> <td style="width:51px;">3</td> <td>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</td> </tr> <tr> <td style="width:51px;">4</td> <td>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</td> </tr> <tr> <td style="width:51px;">5</td> <td>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</td> </tr> </tbody> </table> <p>&nbsp;</p> <p>2.Zookeeper：Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，Dubbo官方推荐使用。执行流程如下图所示（摘自网站）</p> <p style="text-align:center;"><img decoding="async" alt="/user-guide/images/zookeeper.jpg" class="has" src="http://img.555519.xyz/uploads/20230110/c82dac970da98ec6fd2ac0c1fb0282ab.jpg"></p> <p>&nbsp;</p> <table border="1" cellpadding="1" cellspacing="1"> <caption>   流程说明<br />  </caption> <tbody> <tr> <td> <ul> <li>服务提供者启动时: 向&nbsp;<code>/dubbo/com.foo.BarService/providers</code>&nbsp;目录下写入自己的 URL 地址</li> </ul> </td> </tr> <tr> <td> <ul> <li>服务消费者启动时: 订阅&nbsp;<code>/dubbo/com.foo.BarService/providers</code>&nbsp;目录下的提供者 URL 地址。并向&nbsp;<code>/dubbo/com.foo.BarService/consumers</code>&nbsp;目录下写入自己的 URL 地址</li> </ul> </td> </tr> <tr> <td> <ul> <li>监控中心启动时: 订阅&nbsp;<code>/dubbo/com.foo.BarService</code>&nbsp;目录下的所有提供者和消费者 URL 地址。</li> </ul> </td> </tr> </tbody> </table> <p>&nbsp;</p> <p>Dubbo与Zookeeper就简单介绍到这，详细请参考官方文档，下面开始进入实战练习。</p> <h1>1.安装Zookeeper</h1> <ul> <li>下载地址：https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/，我下载是的3.5.5版本，选择3.5.5，之后下载 <pre class="has"><code class="language-html">apache-zookeeper-3.5.5-bin.tar.gz </code></pre> </li> <li>下载完后解压，目录结构如下：</li> </ul> <p><img decoding="async" alt="" class="has" height="299" src="http://img.555519.xyz/uploads/20230110/7dda2ce964f464b118513309bb279b5b.jpg"></p> <ul> <li>修改配置文件，进入conf文件夹下，将zoo_sample.cfg重命名为zoo.cfg，zookeeper启动会默认加载这个配置文件，之后修改配置文件内容，设置数据及日志存储路径，并修改启动端口，避免与其他冲突，完整配置文件如下，主要配置的是<span style="color:#f33b45;"><strong>dataDir数据存储路径</strong></span>、<span style="color:#f33b45;"><strong>dataLogDir日志存储路径</strong></span>以及<span style="color:#f33b45;">a<strong>dmin.serverPort服务启动端口（避免与其他端口冲突）</strong></span>。</li> </ul> <pre class="has"><code class="language-java"># The number of milliseconds of each tick tickTime=2000 # The number of ticks that the initial  # synchronization phase can take initLimit=10 # The number of ticks that can pass between  # sending a request and getting an acknowledgement syncLimit=5 # the directory where the snapshot is stored. # do not use /tmp for storage, /tmp here is just  # example sakes.   dataDir=D:\\Zookeeper-3.5.5\\data dataLogDir=D:\\Zookeeper-3.5.5\\logs   # the port at which the clients will connect   clientPort=2181 admin.serverPort=8082   # the maximum number of client connections. # increase this if you need to handle more clients #maxClientCnxns=60 # # Be sure to read the maintenance section of the  # administrator guide before turning on autopurge. # # http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance # # The number of snapshots to retain in dataDir #autopurge.snapRetainCount=3 # Purge task interval in hours # Set to "0" to disable auto purge feature #autopurge.purgeInterval=1 </code></pre> <ul> <li>启动zookeeper，修改完配置文件后，进入到bin文件夹下，由于我是在window下，所以双击<span style="color:#f33b45;"><strong>zkServer.cmd</strong></span>启动，启动成功如下图所示</li> </ul> <p><img decoding="async" alt="" class="has" height="742" src="http://img.555519.xyz/uploads/20230110/3e5a793941f1382df2cf161c17f8d8bc.jpg"></p> <p><span style="color:#f33b45;"><strong>启动后不要关闭窗口，最小化就行。</strong></span></p> <h1>2.项目准备</h1> <p>新建一个SpringBoot项目<span style="color:#f33b45;"><strong>dubbo-demo</strong></span>，包含三个子模块，分别为<span style="color:#f33b45;"><strong>dubbo-demo-api</strong></span>、<span style="color:#f33b45;"><strong>demo-demo-consumer</strong></span>及<span style="color:#f33b45;"><strong>dubbo-demo-provider</strong></span>，目录结构如下：</p> <p>&nbsp;&nbsp;</p> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" class="has" height="298" src="http://img.555519.xyz/uploads/20230110/bcc1d389005c42efac5f54f19edf7702.jpg"></p> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" class="has" height="463" src="http://img.555519.xyz/uploads/20230110/a14f395f6c353437f385b7e8da73f2a8.jpg"></p> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" class="has" height="408" src="http://img.555519.xyz/uploads/20230110/4756a7e825134a2f871b49ac22ec41d2.jpg"></p> <h2><span style="color:#f33b45;"><strong>其中dubbo-demo-consumer和dubbo-demo-provider都引入dubbo-demo-api，依赖关如下：</strong></span></h2> <p style="text-align:center;"><img loading="lazy" decoding="async" alt="" class="has" height="321" src="http://img.555519.xyz/uploads/20230110/c92e2d7d5c920c3b1d6d1344a1be1ce6.jpg"></p> <table border="1" cellpadding="1" cellspacing="1" style="width:500px;"> <tbody> <tr> <td style="width:185px;">dubbo-demo-api</td> <td style="width:314px;">公共api接口</td> </tr> <tr> <td style="width:185px;">dubbo-demo-consumer</td> <td style="width:314px;">服务消费者</td> </tr> <tr> <td style="width:185px;">dubbo-demo-provier</td> <td style="width:314px;">服务提供者</td> </tr> </tbody> </table> <h2>（1）dubbo-demo-api</h2> <ul> <li> <h3>pom文件内容如下：就是新建一个springboot模块，没有引入其他依赖的默认状态</h3> </li> </ul> <pre class="has"><code><?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">     <modelVersion>4.0.0</modelVersion>     <parent>         <groupId>org.springframework.boot</groupId>         spring-boot-starter-parent</artifactId>         <version>2.2.1.RELEASE</version>         <relativePath/>     </parent>     <groupId>dubbo.demo.api</groupId>     <artifactId>dubbo-demo-api</artifactId>     <version>0.0.1-SNAPSHOT</version>     <name>dubbo-demo-api</name>     <description>Demo project for Spring Boot</description>      <properties>         <java.version>1.8</java.version>         <project.bulid.sourceEncoding>UTF-8</project.bulid.sourceEncoding>         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>     </properties>      <dependencies>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter</artifactId>         </dependency>          <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-test</artifactId>             <scope>test</scope>             <exclusions>                 <exclusion>                     <groupId>org.junit.vintage</groupId>                     <artifactId>junit-vintage-engine</artifactId>                 </exclusion>             </exclusions>         </dependency>     </dependencies>      <build>         <plugins>             <plugin>                 <groupId>org.springframework.boot</groupId>                 <artifactId>spring-boot-maven-plugin</artifactId>             </plugin>         </plugins>     </build>  </project> </code></pre> <ul> <li> <h3>IDeviceService内容如下：简单定义了一个借口，包含一个sayHello()的方法</h3> </li> </ul> <pre class="has"><code class="language-java">package dubbo.demo.api;  import java.io.Serializable;  public interface IDemoService {     Serializable sayHello(); } </code></pre> <h2>（2）dubbo-demo-consumer</h2> <ul> <li> <h3>pom文件内容如下：引入dubbo-demo-api，dubbo，zookeeper依赖，顺便复习了下整合swagger，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qq_27317475/article/details/102854536"  rel="nofollow">参考我的上一篇博客。</h3> </li> </ul> <pre class="has"><code><?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">     <modelVersion>4.0.0</modelVersion>     <parent>         <groupId>org.springframework.boot</groupId>         spring-boot-starter-parent</artifactId>         <version>2.2.1.RELEASE</version>         <relativePath/> <!-- lookup parent from repository -->     </parent>     <groupId>dubbo.demo.consumer</groupId>     <artifactId>dubbo-demo-consumer</artifactId>     <version>0.0.1-SNAPSHOT</version>     <name>dubbo-demo-consumer</name>     <description>Demo project for Spring Boot</description>      <properties>         <java.version>1.8</java.version>         <project.bulid.sourceEncoding>UTF-8</project.bulid.sourceEncoding>         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>     </properties>     <dependencies>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-web</artifactId>         </dependency>          <!-- 引入dubbo-demo-api依赖 -->         <dependency>             <groupId>dubbo.demo.api</groupId>             <artifactId>dubbo-demo-api</artifactId>             <version>0.0.1-SNAPSHOT</version>         </dependency>          <!-- 引入swagger2依赖 -->         <dependency>             <groupId>io.springfox</groupId>             <artifactId>springfox-swagger2</artifactId>             <version>2.9.2</version>         </dependency>         <dependency>             <groupId>io.springfox</groupId>             <artifactId>springfox-swagger-ui</artifactId>             <version>2.9.2</version>         </dependency>          <!-- 引入dubbo zookeeper依赖-->         <dependency>             <groupId>com.alibaba.boot</groupId>             <artifactId>dubbo-spring-boot-starter</artifactId>             <version>0.2.0</version>         </dependency>         <dependency>             <groupId>org.apache.zookeeper</groupId>             <artifactId>zookeeper</artifactId>             <version>3.5.5</version>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-test</artifactId>             <scope>test</scope>             <exclusions>                 <exclusion>                     <groupId>org.junit.vintage</groupId>                     <artifactId>junit-vintage-engine</artifactId>                 </exclusion>             </exclusions>         </dependency>     </dependencies>      <build>         <plugins>             <plugin>                 <groupId>org.springframework.boot</groupId>                 <artifactId>spring-boot-maven-plugin</artifactId>             </plugin>         </plugins>     </build>  </project> </code></pre> <ul> <li> <h3>Swagger2Config内容如下：</h3> </li> </ul> <pre class="has"><code class="language-java">package dubbo.demo.consumer.config;  import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2;  @EnableSwagger2 @Configuration public class Swagger2Config {     @Bean     public Docket swaggerPluginConfig(){         return new Docket(DocumentationType.SWAGGER_2)                 .apiInfo(apiInfo())                     //Api文档描述                 .select()                               //选择哪些路径和Api会生成文档                 .apis(RequestHandlerSelectors.basePackage("dubbo.demo.consumer.controller"))    //对指定路径下Api进行监控                 .paths(PathSelectors.any())             //对所有路径进行监控                 .build();     }      private ApiInfo apiInfo(){         return new ApiInfoBuilder()                 .title("Dubbo Demo接口文档")                 .description("API 接口文档")                 .termsOfServiceUrl("http://localhost")                 .version("1.0.0")                 .contact(new Contact("takano","","xxxxxx@qq.com"))                 .build();     } } </code></pre> <ul> <li> <h3>DemoController内容如下：简单定义了一个请求方法sayHello()，通过<span style="color:#f33b45;">@Reference</span>来标记IDemoSerice接口的成员变量 demoService 是一个 dubbo 服务的引用，在sayHello()方法内的通过该接口向远端的服务提供者发起调用，客户端并没有实现IDemoService接口。其中参数<span style="color:#f33b45;">version指定了服务的版本号，要与提供者提供的服务版本号一致</span>。除此之外，@Reference还有许多其他的参数，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://dubbo.apache.org/zh-cn/blog/dubbo-annotation.html"  rel="nofollow">请参考文档。</h3> </li> </ul> <pre class="has"><code class="language-java">package dubbo.demo.consumer.controller;  import com.alibaba.dubbo.config.annotation.Reference; import dubbo.demo.api.IDemoService; import io.swagger.annotations.Api; import io.swagger.annotations.ApiOperation; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController;  import java.io.Serializable;  @Api(value = "DemoController",tags = "dubbo-demo控制器") @RestController public class DemoController {      @Reference(version = "1.0.0")     private IDemoService demoService;      @ApiOperation(value = "测试方法",tags = "dubbo-demo控制器")     @GetMapping("/sayHello")     public Serializable sayHello(){         return demoService.sayHello();     } } </code></pre> <ul> <li> <h3>启动文件内容如下：使用<span style="color:#f33b45;"><strong>@EnableDubbo</strong></span>注解启用dubbo，它是<span style="color:#f33b45;"><strong>@EnableDubboConfig</strong></span>和<span style="color:#f33b45;"><strong>@DubboComponentScan</strong></span>的组合形式，用来扫描服务消费者，即用@Reference注解标注，对其进行组装初始化操作，最终完成服务引用工作。</h3> </li> </ul> <pre class="has"><code class="language-java">package dubbo.demo.consumer;  import com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @EnableDubbo @SpringBootApplication public class DubboDemoConsumerApplication {      public static void main(String[] args) {         SpringApplication.run(DubboDemoConsumerApplication.class, args);     }  } </code></pre> <ul> <li> <h3>配置文件内容如下：</h3> </li> </ul> <pre class="has"><code>#服务启动端口 server.port=9001  #dubbo #当前服务名 dubbo.application.name=dubbo-demo-consumer #注册中心的协议和地址 dubbo.registry.protocol=zookeeper dubbo.registry.address=localhost:2181 #连接监控中心 dubbo.monitor.protocol=registry  </code></pre> <h2>（3）dubbo-demo-provider</h2> <ul> <li> <h3>pom文件内容如下：引入dubbo-demo-api，dubbo，zookeeper依赖。</h3> </li> </ul> <pre class="has"><code><?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">     <modelVersion>4.0.0</modelVersion>     <parent>         <groupId>org.springframework.boot</groupId>         spring-boot-starter-parent</artifactId>         <version>2.2.1.RELEASE</version>         <relativePath/> <!-- lookup parent from repository -->     </parent>     <groupId>dubbo.demo.provider</groupId>     <artifactId>dubbo-demo-provider</artifactId>     <version>0.0.1-SNAPSHOT</version>     <name>dubbo-demo-provider</name>     <description>Demo project for Spring Boot</description>      <properties>         <java.version>1.8</java.version>         <project.bulid.sourceEncoding>UTF-8</project.bulid.sourceEncoding>         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>     </properties>      <dependencies>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-web</artifactId>         </dependency>          <!-- 引入dubbo-demo-api依赖 -->         <dependency>             <groupId>dubbo.demo.api</groupId>             <artifactId>dubbo-demo-api</artifactId>             <version>0.0.1-SNAPSHOT</version>         </dependency>          <!-- 引入dubbo zookeeper依赖 -->         <dependency>             <groupId>com.alibaba.boot</groupId>             <artifactId>dubbo-spring-boot-starter</artifactId>             <version>0.2.0</version>         </dependency>         <dependency>             <groupId>org.apache.zookeeper</groupId>             <artifactId>zookeeper</artifactId>             <version>3.5.5</version>         </dependency>          <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-test</artifactId>             <scope>test</scope>             <exclusions>                 <exclusion>                     <groupId>org.junit.vintage</groupId>                     <artifactId>junit-vintage-engine</artifactId>                 </exclusion>             </exclusions>         </dependency>     </dependencies>      <build>         <plugins>             <plugin>                 <groupId>org.springframework.boot</groupId>                 <artifactId>spring-boot-maven-plugin</artifactId>             </plugin>         </plugins>     </build>  </project> </code></pre> <ul> <li> <h3>DemoService内容如下：实现了demo-service-api的IDemoService接口，并实现了具体方法，使用<span style="color:#f33b45;">“dubbo的@Service”</span>注解配置服务提供者，暴露该服务。<span style="color:#f33b45;">version</span>指定了服务的版本号，<span style="color:#f33b45;">interfaceClass</span>指定了服务提供者实现的接口类，其他相关参数<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://dubbo.apache.org/zh-cn/blog/dubbo-annotation.html"  rel="nofollow">请查看文档。@Component声明该类是一个组件。</h3> </li> </ul> <pre class="has"><code class="language-java">package dubbo.demo.provider.service;  import com.alibaba.dubbo.config.annotation.Service; import dubbo.demo.api.IDemoService; import org.springframework.stereotype.Component;  import java.io.Serializable;  @Service(version = "1.0.0",interfaceClass = IDemoService.class) @Component public class DemoService implements IDemoService {     @Override     public Serializable sayHello() {         return "Hello World";     } } </code></pre> <ul> <li> <h3>启动文件内容如下：同样使用@EnableDubbo注解启动dubbo。</h3> </li> </ul> <pre class="has"><code class="language-java">package dubbo.demo.provider;  import com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @EnableDubbo @SpringBootApplication public class DubboDemoProviderApplication {      public static void main(String[] args) {         SpringApplication.run(DubboDemoProviderApplication.class, args);     }  } </code></pre> <ul> <li> <h3>配置文件内容如下：</h3> </li> </ul> <pre class="has"><code>#服务启动端口 server.port=9002  #dubbo #当前服务名 dubbo.application.name=dubbo-demo-provider #注册中心的协议和地址 dubbo.registry.protocol=zookeeper dubbo.registry.address=localhost:2181 #通信规则 dubbo.protocol.name=dubbo dubbo.protocol.port=8365 #连接监控中心 dubbo.monitor.protocol=registry </code></pre> <h1>3.测试</h1> <ul> <li> <h2>先启动服务提者dubbo-demo-provider，启动成功后，可以在zookeeper窗口下看到如下信息，说明在zookeeper中注册成功。</h2> </li> </ul> <p><img loading="lazy" decoding="async" alt="" class="has" height="28" src="http://img.555519.xyz/uploads/20230110/da899525ced8cd72b8ce165d49e50115.jpg"></p> <ul> <li> <h3>启动服务消费者dubbo-demo-consumer：同样，可以再zookeeper窗口下看到一条输出信息，说明在zookeeper中订阅成功。</h3> </li> </ul> <p><img loading="lazy" decoding="async" alt="" class="has" height="25" src="http://img.555519.xyz/uploads/20230110/1c934c1a8f0bb136a08cb6712ce0f654.jpg"></p> <ul> <li> <h3>由于我再服务消费者中整合了swagger，所以在浏览器中输入localhost:9001/swagger-ui.html，即可进入到api文档界面，测试暴露的api，也可以直接在浏览器输入localhost:9001/sayHello测试，结果如下图所示：</h3> </li> </ul> <p><img loading="lazy" decoding="async" alt="" class="has" height="774" src="http://img.555519.xyz/uploads/20230110/0adf69e5bf5347947341ddfa2de3762a.jpg"></p> <h3>可以看到我们成功的远程调用了服务提供者，并返回结果。至此一个简单的dubbo+zookeeper入门案例就完成了。</h3> <blockquote> <p>如有错误请批评指正，我会及时修改，欢迎大佬指点，让我更快进步。</p> </blockquote> <h1>&nbsp;</h1> </p></div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-428.htm">Glance基础服务运维_在线工具Live2D</a></p>
                                                        <p>下一个：<a href="/html/category/article-430.htm">JavaScript对数组的所有唯一值求和方法详解</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4552.htm" title="济南领养宠物的地方 济南领养宠物的地方有哪些">济南领养宠物的地方 济南领养宠物的地方有哪些</a></li>
                        <li class="py-2"><a href="/html/category/article-3758.htm" title="浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener_在线工具">浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-6150.htm" title="上海市青浦区二中分数线是多少分（上海市青浦区二中分数线是多少分啊）">上海市青浦区二中分数线是多少分（上海市青浦区二中分数线是多少分啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-6062.htm" title="猫粮制作机器多少钱一套（猫粮制作过程视频）">猫粮制作机器多少钱一套（猫粮制作过程视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-6194.htm" title="瑞鹏宠物医院什么时候上市（瑞鹏宠物医院创始人简历）">瑞鹏宠物医院什么时候上市（瑞鹏宠物医院创始人简历）</a></li>
                        <li class="py-2"><a href="/html/category/article-4588.htm" title="动物疫苗多长时间内打一次 动物疫苗多长时间内打一次最好">动物疫苗多长时间内打一次 动物疫苗多长时间内打一次最好</a></li>
                        <li class="py-2"><a href="/html/category/article-4294.htm" title="开宠物店的方案（开宠物店的方案有哪些）">开宠物店的方案（开宠物店的方案有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-6019.htm" title="动物医院申请条件有哪些要求和条件呢（动物医院诊疗许可证办理）">动物医院申请条件有哪些要求和条件呢（动物医院诊疗许可证办理）</a></li>
                        <li class="py-2"><a href="/html/category/article-4126.htm" title="vue 配置全局模块、SASS（自动引入模块）">vue 配置全局模块、SASS（自动引入模块）</a></li>
                        <li class="py-2"><a href="/html/category/article-5572.htm" title="1970年农历四月二十七是几号 1970年农历四月二十七是几号出生">1970年农历四月二十七是几号 1970年农历四月二十七是几号出生</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>