<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-357.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>Apache Tomcat如何高并发处理请求 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Apache Tomcat如何高并发处理请求                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h3 id="介绍">介绍</h3> <p>作为常用的<code>http</code>协议服务器，<code>tomcat</code>应用非常广泛。tomcat也是遵循Servelt协议的，<code>Servelt</code>协议可以让服务器与真实服务逻辑代码进行解耦。各自只需要关注<code>Servlet</code>协议即可。<br /> 对于tomcat是如何作为一个高性能的服务器的呢？你是不是也会有这样的疑问？</p> <p>tomcat是如何接收网络请求？</p> <p>如何做到高性能的<code>http</code>协议服务器？</p> <blockquote> <p>tomcat从8.0往后开始使用了NIO非阻塞io模型，提高了吞吐量，本文的源码是tomcat 9.0.48版本</p> </blockquote> <h3 id="接收socket请求">接收Socket请求</h3> <p><code>org.apache.tomcat.util.net.Acceptor</code>实现了<code>Runnable</code>接口，在一个单独的线程中以死循环的方式一直进行socket的监听</p> <p>线程的初始化及启动是在方法<code>org.apache.tomcat.util.net.AbstractEndpoint#startAcceptorThread</code></p> <p>有个很重要的属性<code>org.apache.tomcat.util.net.AbstractEndpoint</code>；同时实现了<code>run</code>方法，方法中主要有以下功能：</p> <ul> <li>请求最大连接数限制： 最大为 8*1024；请你注意到达最大连接数后操作系统底层还是会接收客户端连接，但用户层已经不再接收</li> <li>获取<code>socketChannel</code></li> </ul> <pre><code class="language-java">public void run() {         int errorDelay = 0;         try {             // Loop until we receive a shutdown command             while (!stopCalled) { 					...                 if (stopCalled) {                     break;                 }                 state = AcceptorState.RUNNING;                  try {                     //if we have reached max connections, wait                     // 如果连接超过了 8*1024，则线程阻塞等待; 是使用org.apache.tomcat.util.threads.LimitLatch类实现了分享锁(内部实现了AbstractQueuedSynchronizer)                     // 请你注意到达最大连接数后操作系统底层还是会接收客户端连接，但用户层已经不再接收。                     endpoint.countUpOrAwaitConnection();                      // Endpoint might have been paused while waiting for latch                     // If that is the case, don't accept new connections                     if (endpoint.isPaused()) {                         continue;                     }                      U socket = null;                     try {                         // Accept the next incoming connection from the server                         // socket                         // 抽象方法，不同的endPoint有不同的实现方法。NioEndPoint为例，实现方法为serverSock.accept()，这个方法主要看serverSock实例化时如果为阻塞，accept方法为阻塞；反之为立即返回，如果没有socket链接，则为null                         socket = endpoint.serverSocketAccept();                     } catch (Exception ioe) {                         // We didn't get a socket                         endpoint.countDownConnection();                         if (endpoint.isRunning()) {                             // Introduce delay if necessary                             errorDelay = handleExceptionWithDelay(errorDelay);                             // re-throw                             throw ioe;                         } else {                             break;                         }                     }                     // Successful accept, reset the error delay                     errorDelay = 0;                      // Configure the socket                     if (!stopCalled && !endpoint.isPaused()) {                         // setSocketOptions() will hand the socket off to                         // an appropriate processor if successful                         // endPoint类的抽象方法，不同的endPoint有不同的实现。处理获取到的socketChannel链接，如果该socket链接能正常处理，那么该方法会返回true，否则为false                         if (!endpoint.setSocketOptions(socket)) {                             endpoint.closeSocket(socket);                         }                     } else {                         endpoint.destroySocket(socket);                     }                 } catch (Throwable t) {                     ...                 }             }         } finally {             stopLatch.countDown();         }         state = AcceptorState.ENDED;     }</code></pre> <p>再来看下<code>org.apache.tomcat.util.net.NioEndpoint#setSocketOptions</code>方法的具体实现(NioEndpoint为例)</p> <p>这个方法中主要做的事：</p> <ul> <li>创建NioChannel</li> <li>设置socket为非阻塞</li> <li>将socket添加到Poller的队列中</li> </ul> <pre><code class="language-java"> protected boolean setSocketOptions(SocketChannel socket) {         NioSocketWrapper socketWrapper = null;         try {             // Allocate channel and wrapper             // 优先使用已有的缓存nioChannel             NioChannel channel = null;             if (nioChannels != null) {                 channel = nioChannels.pop();             }             if (channel == null) {                 SocketBufferHandler bufhandler = new SocketBufferHandler(                         socketProperties.getAppReadBufSize(),                         socketProperties.getAppWriteBufSize(),                         socketProperties.getDirectBuffer());                 if (isSSLEnabled()) {                     channel = new SecureNioChannel(bufhandler, this);                 } else {                     channel = new NioChannel(bufhandler);                 }             }             // 将nioEndpoint与NioChannel进行包装             NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);             channel.reset(socket, newWrapper);             connections.put(socket, newWrapper);             socketWrapper = newWrapper;              // Set socket properties             // Disable blocking, polling will be used             // 设置当前链接的socket为非阻塞             socket.configureBlocking(false);             if (getUnixDomainSocketPath() == null) {                 socketProperties.setProperties(socket.socket());             }              socketWrapper.setReadTimeout(getConnectionTimeout());             socketWrapper.setWriteTimeout(getConnectionTimeout());             socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());             // 将包装后的nioChannel与nioEndpoint进行注册，注册到Poller，将对应的socket包装类添加到Poller的队列中，同时唤醒selector             poller.register(socketWrapper);             return true;         } catch (Throwable t) {             ExceptionUtils.handleThrowable(t);             try {                 log.error(sm.getString("endpoint.socketOptionsError"), t);             } catch (Throwable tt) {                 ExceptionUtils.handleThrowable(tt);             }             if (socketWrapper == null) {                 destroySocket(socket);             }         }         // Tell to close the socket if needed         return false;     }</code></pre> <h3 id="socket请求轮询">Socket请求轮询</h3> <p>上一小节是接收到了socket请求，进行包装之后，将socket添加到了<code>Poller</code>的队列上，并可能唤醒了<code>Selector</code>，本小节就来看看，Poller是如何进行socket的轮询的。</p> <p>首先<code>org.apache.tomcat.util.net.NioEndpoint.Poller</code>也是实现了Runnable接口，是一个可以单独启动的线程</p> <p>初始化及启动是在<code>org.apache.tomcat.util.net.NioEndpoint#startInternal</code></p> <p>重要的属性：</p> <ul> <li><code>java.nio.channels.Selector</code>：在Poller对象初始化的时候，就会启动轮询器</li> <li><code>SynchronizedQueue<PollerEvent></code>：同步的事件队列</li> </ul> <p>再来看下具体处理逻辑，run方法的源码</p> <pre><code class="language-java">		public void run() {             // Loop until destroy() is called             while (true) {                  boolean hasEvents = false;                  try {                     if (!close) {                         // 去SynchronizedQueue事件队列中拉去，看是否已经有了事件，如果有，则返回true                         // 如果从队列中拉取到了event(即上一步将NioSocketWrapper封装为PollerEvent添加到次队列中)，将socketChannel注册到Selector上，标记为SelectionKey.OP_READ，添加处理函数attachment(为Accetpor添加到Poller时的                             // NioSocketWrapper)                         hasEvents = events();                         if (wakeupCounter.getAndSet(-1) > 0) {                             // If we are here, means we have other stuff to do                             // Do a non blocking select                             keyCount = selector.selectNow();                         } else {                             keyCount = selector.select(selectorTimeout);                         }                         wakeupCounter.set(0);                     }                     if (close) {                         events();                         timeout(0, false);                         try {                             selector.close();                         } catch (IOException ioe) {                             log.error(sm.getString("endpoint.nio.selectorCloseFail"), ioe);                         }                         break;                     }                     // Either we timed out or we woke up, process events first                     if (keyCount == 0) {                         hasEvents = (hasEvents | events());                     }                 } catch (Throwable x) {                     ExceptionUtils.handleThrowable(x);                     log.error(sm.getString("endpoint.nio.selectorLoopError"), x);                     continue;                 }                  Iterator<SelectionKey> iterator =                     keyCount > 0 ? selector.selectedKeys().iterator() : null;                 // Walk through the collection of ready keys and dispatch                 // any active event.                 // selector轮询获取已经注册的事件，如果有事件准备好，此时通过selectKeys方法就能拿到对应的事件                 while (iterator != null && iterator.hasNext()) {                     SelectionKey sk = iterator.next();                     // 获取到事件后，从迭代器删除事件，防止事件重复轮询                     iterator.remove();                     // 获取事件的处理器，这个attachment是在event()方法中注册的，后续这个事件的处理，就交给这个wrapper去处理                     NioSocketWrapper socketWrapper = (NioSocketWrapper) sk.attachment();                     // Attachment may be null if another thread has called                     // cancelledKey()                     if (socketWrapper != null) {                         processKey(sk, socketWrapper);                     }                 }                  // Process timeouts                 timeout(keyCount,hasEvents);             }              getStopLatch().countDown();         }</code></pre> <p>在这里，有一个很重要的方法，<code>org.apache.tomcat.util.net.NioEndpoint.Poller#events()</code>，他是从<code>Poller</code>的事件队列中获取<code>Acceptor</code>接收到的可用socket，并将其注册到<code>Selector</code>上</p> <pre><code class="language-java">		/**          * Processes events in the event queue of the Poller.          *          * @return <code>true</code> if some events were processed,          *   <code>false</code> if queue was empty          */         public boolean events() {             boolean result = false;              PollerEvent pe = null;             // 如果Acceptor将socket添加到队列中，那么events.poll()方法就能拿到对应的事件，否则拿不到就返回false             for (int i = 0, size = events.size(); i < size && (pe = events.poll()) != null; i++ ) {                 result = true;                 NioSocketWrapper socketWrapper = pe.getSocketWrapper();                 SocketChannel sc = socketWrapper.getSocket().getIOChannel();                 int interestOps = pe.getInterestOps();                 if (sc == null) {                     log.warn(sm.getString("endpoint.nio.nullSocketChannel"));                     socketWrapper.close();                 } else if (interestOps == OP_REGISTER) {                     // 如果是Acceptor刚添加到队列中的事件，那么此时的ops就是OP_REGISTER                     try {，                         // 将次socket注册到selector上，标记为OP_READ事件，添加事件触发时处理函数socketWrapper                         sc.register(getSelector(), SelectionKey.OP_READ, socketWrapper);                     } catch (Exception x) {                         log.error(sm.getString("endpoint.nio.registerFail"), x);                     }                 } else {                     // ？？这里的逻辑，不清楚什么情况下会进入到这个分支里面                     final SelectionKey key = sc.keyFor(getSelector());                     if (key == null) {                         // The key was cancelled (e.g. due to socket closure)                         // and removed from the selector while it was being                         // processed. Count down the connections at this point                         // since it won't have been counted down when the socket                         // closed.                         socketWrapper.close();                     } else {                         final NioSocketWrapper attachment = (NioSocketWrapper) key.attachment();                         if (attachment != null) {                             // We are registering the key to start with, reset the fairness counter.                             try {                                 int ops = key.interestOps() | interestOps;                                 attachment.interestOps(ops);                                 key.interestOps(ops);                             } catch (CancelledKeyException ckx) {                                 cancelledKey(key, socketWrapper);                             }                         } else {                             cancelledKey(key, socketWrapper);                         }                     }                 }                 if (running && !paused && eventCache != null) {                     pe.reset();                     eventCache.push(pe);                 }             }              return result;         }</code></pre> <p>还有一个重要方法就是<code>org.apache.tomcat.util.net.NioEndpoint.Poller#processKey</code>，上一个方法是获取event，并注册到selector，那这个方法就是通过<code>Selector</code>获取到的数据准备好的event，并开始封装成对应的业务处理线程<code>SocketProcessorBase</code>，扔到线程池里开始处理</p> <pre><code class="language-java">	    protected void processKey(SelectionKey sk, NioSocketWrapper socketWrapper) {             try {                 if (close) {                     cancelledKey(sk, socketWrapper);                 } else if (sk.isValid()) {                     if (sk.isReadable() || sk.isWritable()) {                         if (socketWrapper.getSendfileData() != null) {                             processSendfile(sk, socketWrapper, false);                         } else {                             unreg(sk, socketWrapper, sk.readyOps());                             boolean closeSocket = false;                             // Read goes before write                             if (sk.isReadable()) {                                 //这里如果是异步的操作，就会走这里                                 if (socketWrapper.readOperation != null) {                                     if (!socketWrapper.readOperation.process()) {                                         closeSocket = true;                                     }                                 } else if (socketWrapper.readBlocking) {                                     // readBlocking默认为false                                     synchronized (socketWrapper.readLock) {                                         socketWrapper.readBlocking = false;                                         socketWrapper.readLock.notify();                                     }                                 } else if (!processSocket(socketWrapper, SocketEvent.OPEN_READ, true)) {                                     // 处理正常的事件，这里的processSocket就要正式开始处理请求了。                                     // 将对应的事件封装成对应的线程，然后交给线程池去处理正式的请求业务                                     closeSocket = true;                                 }                             }                             if (!closeSocket && sk.isWritable()) {                                 if (socketWrapper.writeOperation != null) {                                     if (!socketWrapper.writeOperation.process()) {                                         closeSocket = true;                                     }                                 } else if (socketWrapper.writeBlocking) {                                     synchronized (socketWrapper.writeLock) {                                         socketWrapper.writeBlocking = false;                                         socketWrapper.writeLock.notify();                                     }                                 } else if (!processSocket(socketWrapper, SocketEvent.OPEN_WRITE, true)) {                                     closeSocket = true;                                 }                             }                             if (closeSocket) {                                 cancelledKey(sk, socketWrapper);                             }                         }                     }                 } else {                     // Invalid key                     cancelledKey(sk, socketWrapper);                 }             } catch (CancelledKeyException ckx) {                 cancelledKey(sk, socketWrapper);             } catch (Throwable t) {                 ExceptionUtils.handleThrowable(t);                 log.error(sm.getString("endpoint.nio.keyProcessingError"), t);             }         }</code></pre> <h3 id="请求具体处理">请求具体处理</h3> <p>上一步，Selector获取到了就绪的请求socket，然后根据socket注册的触发处理函数等，将这些数据进行封装，扔到了线程池里，开始具体的业务逻辑处理。本节就是从工作线程封装开始，<code>org.apache.tomcat.util.net.SocketProcessorBase</code>为工作线程类的抽象类，实现了Runnable接口，不同的Endpoint实现具体的处理逻辑，本节以NioEndpoint为例</p> <p>以下为<code>org.apache.tomcat.util.net.AbstractEndpoint#processSocket</code>方法源码</p> <pre><code class="language-java">    /**      * Process the given SocketWrapper with the given status. Used to trigger      * processing as if the Poller (for those endpoints that have one)      * selected the socket.      *      * @param socketWrapper The socket wrapper to process      * @param event         The socket event to be processed      * @param dispatch      Should the processing be performed on a new      *                          container thread      *      * @return if processing was triggered successfully      */     public boolean processSocket(SocketWrapperBase<S> socketWrapper,             SocketEvent event, boolean dispatch) {         try {             if (socketWrapper == null) {                 return false;             }             // 优先使用已经存在的线程             SocketProcessorBase<S> sc = null;             if (processorCache != null) {                 sc = processorCache.pop();             }             if (sc == null) {                 sc = createSocketProcessor(socketWrapper, event);             } else {                 sc.reset(socketWrapper, event);             }             // 获取线程池。线程池的初始化，是在Acceptor、Poller这两个单独线程启动之前创建             // tomcat使用了自定义的org.apache.tomcat.util.threads.TaskQueue，这块tomcat也进行了小的适配开发             // 核心线程为10个，最大200线程             Executor executor = getExecutor();             if (dispatch && executor != null) {                 executor.execute(sc);             } else {                 sc.run();             }         } catch (RejectedExecutionException ree) {             getLog().warn(sm.getString("endpoint.executor.fail", socketWrapper) , ree);             return false;         } catch (Throwable t) {             ExceptionUtils.handleThrowable(t);             // This means we got an OOM or similar creating a thread, or that             // the pool and its queue are full             getLog().error(sm.getString("endpoint.process.fail"), t);             return false;         }         return true;     }</code></pre> <p>上面的方法是得到了处理业务逻辑的线程SocketProcessorBase，NioEndpoint内部类<code>org.apache.tomcat.util.net.NioEndpoint.SocketProcessor</code>继承了这个抽象类，也就是具体的业务处理逻辑在<code>org.apache.tomcat.util.net.NioEndpoint.SocketProcessor#doRun</code>方法中，最终调用到我们的<code>Servlet</code></p> <pre><code class="language-java">        protected void doRun() {             /*              * Do not cache and re-use the value of socketWrapper.getSocket() in              * this method. If the socket closes the value will be updated to              * CLOSED_NIO_CHANNEL and the previous value potentially re-used for              * a new connection. That can result in a stale cached value which              * in turn can result in unintentionally closing currently active              * connections.              */             Poller poller = NioEndpoint.this.poller;             if (poller == null) {                 socketWrapper.close();                 return;             }              try {                 int handshake = -1;                 try {                     // 握手相关判断逻辑                    ...                  } catch (IOException x) {                   ...                 }                 // 三次握手成功了                 if (handshake == 0) {                     SocketState state = SocketState.OPEN;                     // Process the request from this socket                     // event为SocketEvent.OPEN_READ，这个变量是org.apache.tomcat.util.net.NioEndpoint.Poller#processKey方法赋值                     if (event == null) {                         state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);                     } else {                         // 这里就开始正式处理请求了                         state = getHandler().process(socketWrapper, event);                     }                     if (state == SocketState.CLOSED) {                         poller.cancelledKey(getSelectionKey(), socketWrapper);                     }                 } else if (handshake == -1 ) {                     getHandler().process(socketWrapper, SocketEvent.CONNECT_FAIL);                     poller.cancelledKey(getSelectionKey(), socketWrapper);                 } else if (handshake == SelectionKey.OP_READ){                     socketWrapper.registerReadInterest();                 } else if (handshake == SelectionKey.OP_WRITE){                     socketWrapper.registerWriteInterest();                 }             } catch (CancelledKeyException cx) {                 poller.cancelledKey(getSelectionKey(), socketWrapper);             } catch (VirtualMachineError vme) {                 ExceptionUtils.handleThrowable(vme);             } catch (Throwable t) {                 log.error(sm.getString("endpoint.processing.fail"), t);                 poller.cancelledKey(getSelectionKey(), socketWrapper);             } finally {                 socketWrapper = null;                 event = null;                 //return to cache                 if (running && !paused && processorCache != null) {                     processorCache.push(this);                 }             }         }</code></pre> <h3 id="总结">总结</h3> <ul> <li> <p><code>Tomcat</code>是如何接收网络请求？</p> <p>使用java nio的同步非阻塞去进行网络监听。</p> <p><code>org.apache.tomcat.util.net.AbstractEndpoint#bindWithCleanup</code>中初始化网络监听、SSL</p> <blockquote> <pre><code class="language-java">		{	             ....             serverSock = ServerSocketChannel.open();             socketProperties.setProperties(serverSock.socket());             InetSocketAddress addr = new InetSocketAddress(getAddress(), getPortWithOffset());             // 当应用层面的连接数到达最大值时，操作系统可以继续接收连接，那么操作系统能继续接收的最大连接数就是这个队列长度，可以通过acceptCount 参数配置，默认是 100             serverSock.bind(addr, getAcceptCount());         }         serverSock.configureBlocking(true); //mimic APR behavior</code></pre> </blockquote> <p><code>org.apache.tomcat.util.net.NioEndpoint#startInternal</code>中初始化业务处理的线程池、连接限制器、Poller线程、Acceptor线程</p> </li> <li> <p>如何做到高性能的<code>http</code>协议服务器？</p> <p>Tomcat把接收连接、检测 I/O 事件以及处理请求进行了拆分，用不同规模的线程去做对应的事情，这也是tomcat能高并发处理请求的原因。不让线程阻塞，尽量让CPU忙起来</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f541d80a405652cb2ec1df3e366ed6c5.jpg" alt="Apache Tomcat如何高并发处理请求"></p> <ul> <li> <p>是怎么设计的呢？</p> <p>通过接口、抽象类等，将不同的处理逻辑拆分，各司其职</p> <ul> <li><code>org.apache.tomcat.util.net.AbstractEndpoint</code>：I/O事件的检测、处理逻辑都在这个类的实现类里面。使用模板方法，不同的协议有不同的实现方法。NioEndpoint/Nio2Endpoint/AprEndpoint <ul> <li><code>org.apache.tomcat.util.net.NioEndpoint.Poller</code>：引用了<code>java.nio.channels.Selector</code>，内部有个事件队列，监听I/O事件具体就是在这里做的</li> <li><code>org.apache.tomcat.util.net.NioEndpoint.NioSocketWrapper</code></li> <li><code>org.apache.tomcat.util.net.NioEndpoint.SocketProcessor</code>: 具体处理请求的线程类</li> </ul> </li> </ul> </li> </ul> <h3 id="参考">参考：</h3> <p>NioEndpoint组件：Tomcat如何实现非阻塞I/O？</p> <p>Java NIO浅析</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-356.htm">Java中的hashcode方法</a></p>
                                                        <p>下一个：<a href="/html/category/article-358.htm">js删除数组指定元素</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7168.htm" title="花样年华 电视剧（电视剧继父的花样年华33-40集播放）">花样年华 电视剧（电视剧继父的花样年华33-40集播放）</a></li>
                        <li class="py-2"><a href="/html/category/article-6984.htm" title="广州领养宠物中心在哪里啊（广州有领养宠物猫的地方吗?）">广州领养宠物中心在哪里啊（广州有领养宠物猫的地方吗?）</a></li>
                        <li class="py-2"><a href="/html/category/article-6938.htm" title="什么叫品牌营销 什么叫品牌活动呢(什么叫品牌营销策划?)">什么叫品牌营销 什么叫品牌活动呢(什么叫品牌营销策划?)</a></li>
                        <li class="py-2"><a href="/html/category/article-6617.htm" title="免费领养宠物送到家门口违法吗（免费领养宠物怎么赚钱）">免费领养宠物送到家门口违法吗（免费领养宠物怎么赚钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-6755.htm" title="法医学的就业前景怎么样(法医学专业就业方向及就业前景分析)">法医学的就业前景怎么样(法医学专业就业方向及就业前景分析)</a></li>
                        <li class="py-2"><a href="/html/category/article-6801.htm" title="关于动物医院的动画片有哪些（动物医院绘本故事）">关于动物医院的动画片有哪些（动物医院绘本故事）</a></li>
                        <li class="py-2"><a href="/html/category/article-7352.htm" title="宠物领养协议合同电子版怎么弄的啊 宠物领养协议合同电子版怎么弄的啊图片">宠物领养协议合同电子版怎么弄的啊 宠物领养协议合同电子版怎么弄的啊图片</a></li>
                        <li class="py-2"><a href="/html/category/article-6663.htm" title="同安宠物领养中心电话多少（厦门同安宠物领养中心地址）">同安宠物领养中心电话多少（厦门同安宠物领养中心地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-7030.htm" title="动物疫苗规定最新消息通知（动物 疫苗）">动物疫苗规定最新消息通知（动物 疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7077.htm" title="电影演员李羚近况（这都可以？）演员李羚年轻时候的照片，传闻中的陈芊芊分集剧情，李羚，">电影演员李羚近况（这都可以？）演员李羚年轻时候的照片，传闻中的陈芊芊分集剧情，李羚，</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>