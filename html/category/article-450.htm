<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-450.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>设计模式详解之结构型设计模式——适配器、装饰器 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        设计模式详解之结构型设计模式——适配器、装饰器                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h2 id="结构型设计模式">结构型设计模式</h2> <p>创建型设计模式主要是为了解决创建对象的问题，而结构型设计模式则是为了解决已有对象的使用问题。</p> <h3 id="适配器模式">适配器模式</h3> <p>适配器模式比较好理解，因为在我们的日常生活中就很常见，如耳机转换线、充电器适配器、插座等，举个最常见的例子：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cac0851c9d7461b1c86901aee9c78a36.jpg" alt="设计模式详解之结构型设计模式——适配器、装饰器"></p> <p>插座就是个适配器，将一个接口扩展为多个接口，将墙上的双孔接口转换为三孔接口。而这也就是适配器的作用：将一个接口<strong>转换</strong>为用户期望的另一个接口。</p> <p>适配器的使用场景：</p> <ul> <li>需要使用第三方SDK的核心功能，但其接口或者功能不符合需求，这时可以使用适配器对其进行兼容和扩展</li> <li>随着业务发展，旧接口已经不能满足需求，但重写代价又太大，这时可以使用适配器对接口功能进行扩展</li> </ul> <blockquote> <p>注意：适配器是对已有资源进行兼容和扩展，属于一种折中的方式，如果可以的话，尽量重构系统而不是使用适配器</p> </blockquote> <p>继承器的实现有两种方式：<strong>继承</strong>和<strong>组合</strong>,基于合成复用的原则，组合优于继承，所以应尽量使用组合的方式实现适配器。类图如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d54612541514eaed432da4cff77aacf8.jpg" alt="设计模式详解之结构型设计模式——适配器、装饰器"></p> <p>实现代码：</p> <pre><code>    //已有的旧接口,不兼容于现在的系统     public interface IAmericanElectrictService     {         int Get110VElectric();     }          //adaptee，需要适配的SDK     public class AmericanElectrictService : IAmericanElectrictService     {         public int Get110VElectric()         {             Console.WriteLine("美国的电压是110v，只能提供110V的电压");             return 110;         }     }          //已有接口，现在的系统需要使用这个接口     public interface IChineseElectricService     {         int Get220VElectric();     }          //适配器，采取组合的方式     //这里是为了适配已有接口，所以实现了这个接口     public class AdapterPattern : IChineseElectricService     {         private readonly IAmericanElectrictService _service;          public AdapterPattern(IAmericanElectrictService service)         {             this._service = service;         }         public int Get220VElectric()         {             var electric = this._service.Get110VElectric();             Console.WriteLine("劈里啪啦劈里啪啦，经过一番操作，现在电压转换为220V的了");             return electric + 110;         }     }          //使用适配器，将110V电压转换成220V     public class AdapterRunner : IRunner     {         public void Run()         {             //实际情况中，adaptee有可能是已有SDK，有可能是interface，通过IOC容器对应具体实现类             var americanElectric = new AmericanElectrictService();             var electric = americanElectric.Get110VElectric();             Console.WriteLine($"获得了{electric}V电压");             Console.WriteLine("使用适配器");             var adapter = new AdapterPattern(americanElectric);             electric = adapter.Get220VElectric();             Console.WriteLine($"使用适配器后获得了{electric}V电压");         }     }     //输出     //------------------------------------     //美国的电压是110v，只能提供110V的电压     //获得了110V电压     //使用适配器     //美国的电压是110v，只能提供110V的电压     //劈里啪啦劈里啪啦，经过一番操作，现在电压转换为220V的了     //使用适配器后获得了220V电压</code></pre> <h3 id="总结">总结</h3> <p>优点：</p> <ul> <li>可以扩展和兼容现有类，灵活性高</li> <li>提高了类的复用，原本不能使用的类适配后能使用</li> </ul> <p>缺点：</p> <ul> <li>适配器本质是套一层，如果使用过多，可能导致系统混乱，甚至出现套中套的复杂情况</li> </ul> <h2 id="装饰器模式">装饰器模式</h2> <blockquote> <p>利用继承和组合，在不改变现有结构的情况下对功能进行扩展的模式称为<strong>装饰器模式</strong></p> </blockquote> <p>装饰器模式和适配器模式很像，但侧重点不一样。适配器的重心在于兼容已有系统，而装饰器的重心在于功能扩展。装饰器的类图如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/424a0141ca3490031f09824d463013ee.jpg" alt="设计模式详解之结构型设计模式——适配器、装饰器"></p> <p>上图中，基础装饰器继承抽象类，每个装饰器继承前一个装饰器，一步一步添加功能，并且所有装饰器都用到具体实现类，因为需要扩展具体功能。</p> <p>这里其实就能看出一些装饰器和适配器的区别，适配器和装饰器都使用组合来包装已有类，不同的是装饰器用到了<strong>继承</strong>。装饰器的核心原则是<strong>里氏替换原则</strong>，即父类一定能被子类替换而不影响现有代码。实现代码如下：</p> <pre><code>//抽象基础类 public abstract class AbstractStudent {     public abstract void Study(); }  //具体实现类 public class Student : AbstractStudent {     public override void Study()     {         Console.WriteLine("我正在学习！！！");     } }   //基础装饰器，什么也不做 //注意，这里标记为抽象类，此后的装饰器以此为基础 public abstract class BaseDecorator : AbstractStudent {     private readonly AbstractStudent _student;     public BaseDecorator(AbstractStudent student)     {         this._student = student;     }     //这里使用override还是Virtual取决于AbstractStudent基础类是抽象类还是接口     public override void Study()     {         this._student.Study();     } }  //前缀装饰器，在调用具体功能前做点什么  public class PreDecorator : BaseDecorator {     public PreDecorator(AbstractStudent student) : base(student)     {     }     public override void Study()     {         Console.WriteLine("学习前看会儿小说");         base.Study();     } }  //后缀装饰器，在调用具体功能后做点什么 public class NextDecorator : PreDecorator {     public NextDecorator(AbstractStudent student) : base(student)     {     }     public override void Study()     {         base.Study();         Console.WriteLine("学习辛苦啦，奖励自己一包辣条");     } }  //测试代码 public class DecoratorRunner : IRunner {     public void Run()     {         Console.WriteLine("没有用装饰器的基本功能：");         var student = new Student();         student.Study();         Console.WriteLine();                  Console.WriteLine("使用前缀装饰器在基础功能之前做点什么");         var preDecorator = new PreDecorator(student);         preDecorator.Study();         Console.WriteLine();                  Console.WriteLine("使用后缀装饰器在前缀装饰器功能之后做点什么");         //注意：这里传入的前缀装饰器，在前缀装饰器的基础之上做扩展         var nextDecorator = new NextDecorator(student);         nextDecorator.Study();     } }  //输出：   //没有用装饰器的基本功能： //我正在学习！！！ // //使用前缀装饰器在基础功能之前做点什么 //学习前看会儿小说 //我正在学习！！！ // //使用后缀装饰器在前缀装饰器功能之后做点什么 //学习前看会儿小说 //我正在学习！！！ //学习辛苦啦，奖励自己一包辣条</code></pre> <p>可以看出，装饰器其实就是利用<strong>组合+继承(实现)+override</strong>不断包装和更新对象，使其功能得到扩展。装饰器是用于<strong>替换继承</strong>的设计模式，主要使用场景如下：</p> <ul> <li>想扩展实现类的功能，又不想添加太多子类</li> <li>需要动态增加和撤销功能(例如游戏技能)</li> </ul> <p>装饰器的优点在于灵活，耦合性低，且不会改变现有结构。缺点则是嵌套过多会增加系统复杂度。</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-449.htm">feign实现微服务之间的远程调用</a></p>
                                                        <p>下一个：<a href="/html/category/article-451.htm">vue实现右键菜单栏_vue.js_</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7215.htm" title="宠物粮厂家招聘 宠物粮厂家招聘最新信息">宠物粮厂家招聘 宠物粮厂家招聘最新信息</a></li>
                        <li class="py-2"><a href="/html/category/article-6106.htm" title="猫打疫苗总共多少钱（猫打疫苗多少钱一只啊）">猫打疫苗总共多少钱（猫打疫苗多少钱一只啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-7306.htm" title="动物疫苗的作用有哪些方面 动物疫苗的作用有哪些方面呢">动物疫苗的作用有哪些方面 动物疫苗的作用有哪些方面呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7169.htm" title="促醒的治疗方法（燃爆了）促醒dbs，东方母亲，陈昊蓝，">促醒的治疗方法（燃爆了）促醒dbs，东方母亲，陈昊蓝，</a></li>
                        <li class="py-2"><a href="/html/category/article-7536.htm" title="上海领养宠物狗多少钱一个（上海领养狗狗机构）">上海领养宠物狗多少钱一个（上海领养狗狗机构）</a></li>
                        <li class="py-2"><a href="/html/category/article-7767.htm" title="北京观赏动物医院电话是多少（北京观赏动物医院地址）">北京观赏动物医院电话是多少（北京观赏动物医院地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-6939.htm" title="高宇桥个人资料年龄简介（快来看）高宇桥原名叫什么，丁冬影视，徐若琪，">高宇桥个人资料年龄简介（快来看）高宇桥原名叫什么，丁冬影视，徐若琪，</a></li>
                        <li class="py-2"><a href="/html/category/article-7076.htm" title="一首《十送红军》为何总让人热泪盈眶呢（这样也行？）一首《十送红军》为何总让人热泪盈眶的歌，东方母亲，十送红军电视剧，">一首《十送红军》为何总让人热泪盈眶呢（这样也行？）一首《十送红军》为何总让人热泪盈眶的歌，东方母亲，十送红军电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-7168.htm" title="花样年华 电视剧（电视剧继父的花样年华33-40集播放）">花样年华 电视剧（电视剧继父的花样年华33-40集播放）</a></li>
                        <li class="py-2"><a href="/html/category/article-6893.htm" title="动物疫苗排名前十名品种有哪些（动物疫苗的作用）">动物疫苗排名前十名品种有哪些（动物疫苗的作用）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>