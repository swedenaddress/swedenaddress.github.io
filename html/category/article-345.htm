<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-345.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>面试题目:手写一个LRU算法实现 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        面试题目:手写一个LRU算法实现                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h3>一、常见的内存淘汰算法</h3> <div> <ul> <li> <p>FIFO&nbsp; 先进先出</p> <ul> <li> <p>在这种淘汰算法中，先进⼊缓存的会先被淘汰</p> </li> <li> <p>命中率很低</p> </li> </ul> </li> <li> <p>LRU</p> </li> </ul> <div> <ul> <li style="list-style-type: none"> <ul> <li> <p>Least recently used，最近最少使⽤get</p> </li> </ul> </li> </ul> <div> <ul> <li style="list-style-type: none"> <ul> <li> <p>根据数据的历史访问记录来进⾏淘汰数据，其核⼼思想是“如果数据最近被访问过，那么将来被访问的⼏率也更⾼”</p> </li> </ul> </li> </ul> <ul> <li style="list-style-type: none"> <ul> <li> <p>LRU算法原理剖析</p> </li> </ul> </li> </ul> </div> </div> <div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/64e6aa49e4b949ab7d8137cbc62de7c6.jpg" alt="面试题目:手写一个LRU算法实现"></p> <ul> <li> <p>LFU</p> <ul> <li>Least Frequently Used</li> <li> <div> <p>算法根据数据的历史访问频率来淘汰数据，其核⼼思想是“如果数据过去被访问多次，那么将来被访问的频率也更⾼”</p> </div> </li> </ul> </li> </ul> <ul> <li style="list-style-type: none"> <ul> <li> <p>LFU算法原理剖析</p> </li> </ul> </li> </ul> <ul> <li style="list-style-type: none"> <ul> <li style="list-style-type: none"> <ul> <li> <p>新加⼊数据插⼊到队列尾部（因为引⽤计数为1）</p> </li> </ul> </li> </ul> </li> </ul> <div> <ul> <li style="list-style-type: none"> <ul> <li style="list-style-type: none"> <ul> <li class="_mce_tagged_br"> <p>队列中的数据被访问后，引⽤计数增加，队列重新排序；</p> </li> <li class="_mce_tagged_br"> <p>当需要淘汰数据时，将已经排序的列表最后的数据块删除。</p> </li> </ul> </li> </ul> </li> </ul> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cf39945b3bd6c52d6d3bd30ba465d795.jpg" alt="面试题目:手写一个LRU算法实现"></p> <div> <ul> <li>LFU的缺点</li> <ul> <li>复杂度</li> <li>存储成本</li> <li>尾部容易被淘汰</li> </ul> </ul> </div> <h3>二、手写LRU算法实现</h3> <p>利用了LinkedHashMap双向链表插入可排序</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">@Slf4j</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> LRUCache&lt;K, V&gt;<span style="color: rgba(0, 0, 255, 1)">extends</span> LinkedHashMap&lt;K, V&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> cacheSize;</span><span style="color: rgba(0, 0, 255, 1)">public</span> LRUCache(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> cacheSize) {</span><span style="color: rgba(0, 0, 255, 1)">super</span>(16, 0.75f,<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">this</span>.cacheSize =<span style="color: rgba(0, 0, 0, 1)"> cacheSize;     }      @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">synchronized</span><span style="color: rgba(0, 0, 0, 1)"> V get(Object key) {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">.get(key);     }      @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">synchronized</span><span style="color: rgba(0, 0, 0, 1)"> V put(K key, V value) {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">.put(key, value);     }      @Override</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">boolean</span> removeEldestEntry(Map.Entry&lt;K, V&gt;<span style="color: rgba(0, 0, 0, 1)"> eldest) {</span><span style="color: rgba(0, 0, 255, 1)">boolean</span> f = size() &gt;<span style="color: rgba(0, 0, 0, 1)"> cacheSize;</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (f) {             log.info(</span>"LRUCache清除第三方密钥缓存Key:[{}]"<span style="color: rgba(0, 0, 0, 1)">, eldest.getKey());         }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> f;     }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {         LRUCache</span>&lt;String, Object&gt; cache =<span style="color: rgba(0, 0, 255, 1)">new</span> LRUCache&lt;&gt;(5<span style="color: rgba(0, 0, 0, 1)">);         cache.put(</span>"A","A"<span style="color: rgba(0, 0, 0, 1)">);         cache.put(</span>"B","B"<span style="color: rgba(0, 0, 0, 1)">);         cache.put(</span>"C","C"<span style="color: rgba(0, 0, 0, 1)">);         cache.put(</span>"D","D"<span style="color: rgba(0, 0, 0, 1)">);         cache.put(</span>"E","E"<span style="color: rgba(0, 0, 0, 1)">);         System.out.println(</span>"初始化:" +<span style="color: rgba(0, 0, 0, 1)"> cache.keySet());         System.out.println(</span>"访问值:" + cache.get("C"<span style="color: rgba(0, 0, 0, 1)">));         System.out.println(</span>"访问C后:" +<span style="color: rgba(0, 0, 0, 1)"> cache.keySet());         System.out.println(</span>"PUT F后:" + cache.put("F","F"<span style="color: rgba(0, 0, 0, 1)">));         System.out.println(cache.keySet());     }  }</span></pre> </div> <p>main函数执行效果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ff4d87a52766005a295eb888e9a8ad9a.jpg" alt="面试题目:手写一个LRU算法实现"></p> <h3>三、注意事项</h3> <p>LinkedHashMap有五个构造函数</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/be4cb82a55d3442838cc75db355ced3c.jpg" alt="面试题目:手写一个LRU算法实现"></p> <div class="cnblogs_code"><img decoding="async" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="面试题目:手写一个LRU算法实现" id="code_img_closed_e57bb9e0-b7ee-46ae-97fe-789d845e4581" class="code_img_closed"/><img decoding="async" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="面试题目:手写一个LRU算法实现" id="code_img_opened_e57bb9e0-b7ee-46ae-97fe-789d845e4581" class="code_img_opened" style="display: none"/></p> <div id="cnblogs_code_open_e57bb9e0-b7ee-46ae-97fe-789d845e4581" class="cnblogs_code_hide"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用父类中的构造，初始化容量和加载因子，该初始化容量是指数组大小。</span><span style="color: rgba(0, 0, 255, 1)">public</span> LinkedHashMap(<span style="color: rgba(0, 0, 255, 1)">int</span> initialCapacity,<span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> loadFactor) {</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">(initialCapacity, loadFactor);         accessOrder</span>=<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">一个参数的构造</span><span style="color: rgba(0, 0, 255, 1)">public</span> LinkedHashMap(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> initialCapacity) {</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">(initialCapacity);         accessOrder</span>=<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">无参构造</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> LinkedHashMap() {</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">();         accessOrder</span>=<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这个不用多说，用来接受map类型的值转换为LinkedHashMap</span><span style="color: rgba(0, 0, 255, 1)">public</span> LinkedHashMap(Map&lt;?<span style="color: rgba(0, 0, 255, 1)">extends</span> K, ?<span style="color: rgba(0, 0, 255, 1)">extends</span> V&gt;<span style="color: rgba(0, 0, 0, 1)"> m) {</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">(m);         accessOrder</span>=<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">真正有点特殊的就是这个，多了一个参数accessOrder。存储顺序，LinkedHashMap关键的参数之一就在这个，</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">true：指定迭代的顺序是按照访问顺序(近期访问最少到近期访问最多的元素)来迭代的。 false：指定迭代的顺序是按照插入顺序迭代，也就是通过插入元素的顺序来迭代所有元素</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果你想指定访问顺序，那么就只能使用该构造方法，其他三个构造方法默认使用插入顺序。</span><span style="color: rgba(0, 0, 255, 1)">public</span> LinkedHashMap(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> initialCapacity,</span><span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> loadFactor,</span><span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> accessOrder) {</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">(initialCapacity, loadFactor);</span><span style="color: rgba(0, 0, 255, 1)">this</span>.accessOrder =<span style="color: rgba(0, 0, 0, 1)"> accessOrder;     }</span></pre> </div> <p><span class="cnblogs_code_collapse">View Code</span></div> <p>　　参数accessOrder。存储顺序，LinkedHashMap关键的参数之一就在这个， true：指定迭代的顺序是按照访问顺序(近期访问最少到近期访问最多的元素)来迭代的。 false：指定迭代的顺序是按照插入顺序迭代，也就是通过插入元素的顺序来迭代所有元素。</p> <p>　　如果你想指定访问顺序，那么就只能使用该构造方法，其他三个构造方法默认使用插入顺序。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span> LinkedHashMap(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> initialCapacity,</span><span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> loadFactor,</span><span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> accessOrder) {</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">(initialCapacity, loadFactor);</span><span style="color: rgba(0, 0, 255, 1)">this</span>.accessOrder =<span style="color: rgba(0, 0, 0, 1)"> accessOrder;     }</span></pre> </div> <p>LinkedHashMap是非线程安全的，需要加互斥锁解决并发问题。</p> <h3>四、思考</h3> <p>　　需要根据应用场景确定cacheSize大小，如果实际缓存数量过小，会导致缓存中的数据长期得不到刷新，为防止这种或偶发情况的发生，可配合定时任务如起一个newSingleThreadScheduledExecutor，将上面存储的value修改封装为一个对象，里面增加一个时间戳储存，每次访问实时更新，定时扫描该队列将最近30分钟未访问的key删除；还需增加一个初始进入队列的历史时间记录，将超过1小时的数据清除。</p> </div> </div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-344.htm">从源码看ONNXRuntime的执行流程</a></p>
                                                        <p>下一个：<a href="/html/category/article-346.htm">React中事件的写法总结</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3758.htm" title="浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener_在线工具">浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4098.htm" title="python-模块（random模块、time模块）">python-模块（random模块、time模块）</a></li>
                        <li class="py-2"><a href="/html/category/article-1927.htm" title="常用注解使用总结系列: @Order 注解">常用注解使用总结系列: @Order 注解</a></li>
                        <li class="py-2"><a href="/html/category/article-4097.htm" title="Java程序整数的位运算">Java程序整数的位运算</a></li>
                        <li class="py-2"><a href="/html/category/article-4371.htm" title="瑞鹏宠物医院百度百科（瑞鹏宠物医院成立时间）">瑞鹏宠物医院百度百科（瑞鹏宠物医院成立时间）</a></li>
                        <li class="py-2"><a href="/html/category/article-3732.htm" title="前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)">前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)</a></li>
                        <li class="py-2"><a href="/html/category/article-4552.htm" title="济南领养宠物的地方 济南领养宠物的地方有哪些">济南领养宠物的地方 济南领养宠物的地方有哪些</a></li>
                        <li class="py-2"><a href="/html/category/article-2532.htm" title="面向对象编程-终结篇 es6新增语法">面向对象编程-终结篇 es6新增语法</a></li>
                        <li class="py-2"><a href="/html/category/article-528.htm" title="我们如何在MySQL返回的结果集的组级别上应用过滤条件？">我们如何在MySQL返回的结果集的组级别上应用过滤条件？</a></li>
                        <li class="py-2"><a href="/html/category/article-1333.htm" title="在vue项目中如何获取视频的时长_vue.js_">在vue项目中如何获取视频的时长_vue.js_</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>