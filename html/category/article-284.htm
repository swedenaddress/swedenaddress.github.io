<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-284.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>Python调用C++程序的几种方法 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Python调用C++程序的几种方法                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <h1><strong>0 前言</strong></h1> <p>大家都知道Python的优点是开发效率高，使用方便，C++则是运行效率高，这两者可以相辅相成，不管是在Python项目中嵌入C++代码，或是在C++项目中用Python实现外围功能，都可能遇到Python调用C++模块的需求，下面列举出集中c++代码导出成Python接口的几种基本方法，一起来学习学习吧。</p> <h1><strong>1 原生态导出</strong></h1> <p>Python解释器就是用C实现，因此只要我们的C++的数据结构能让Python认识，理论上就是可以被直接调用的。我们实现test1.cpp如下</p> <pre class="has"><code class="language-cpp">#include &lt;Python.h&gt;     int Add(int x, int y)  {      return x + y;  }     int Del(int x, int y)  {      return x - y;  }     PyObject* WrappAdd(PyObject* self, PyObject* args)  {      int x, y;      if (!PyArg_ParseTuple(args, "ii", &amp;x, &amp;y))      {          return NULL;      }      return Py_BuildValue("i", Add(x, y));  }     PyObject* WrappDel(PyObject* self, PyObject* args)  {      int x, y;      if (!PyArg_ParseTuple(args, "ii", &amp;x, &amp;y))      {          return NULL;      }      return Py_BuildValue("i", Del(x, y));  }   static PyMethodDef test_methods[] = {      {"Add", WrappAdd, METH_VARARGS, "something"},      {"Del", WrappDel, METH_VARARGS, "something"},      {NULL, NULL}  };     extern "C" void inittest1()  {      Py_InitModule("test1", test_methods);     } </code></pre> <p>编译命令如下</p> <pre class="has"><code>g++ -fPIC -shared test1.cpp -I/usr/include/python2.7 -o test1.so  </code></pre> <blockquote> <p>-fPIC：生成位置无关目标代码，适用于动态连接；<br /> -L path：表示在path目录中搜索库文件，如-L.表示在当前目录；<br /> -I path：表示在path目录中搜索头文件；<br /> -o file：制定输出文件为file；<br /> -shared：生成一个共享库文件；</p> </blockquote> <p>&nbsp;运行Python解释器，测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test1  &gt;&gt;&gt; test1.Add(1,2)  3  </code></pre> <p><strong>这里要注意一下几点</strong></p> <ol> <li>如果生成的动态库名字为test1，则源文件里必须有inittest1这个函数，且Py_InitModule的第一个参数必须是“test1”，否则Python导入模块会失败</li> <li>如果是cpp源文件，inittest1函数必须用extern "C"修饰，如果是c源文件，则不需要。原因是Python解释器在导入库时会寻找initxxx这样的函数，而C和C++对函数符号的编码方式不同，C++在对函数符号进行编码时会考虑函数长度和参数类型，具体可以通过<code>nm test1.so</code>查看函数符号，c++filt工具可通过符号反解出函数原型</li> </ol> <h1><strong>2 通过boost实现</strong></h1> <p>我们使用和上面同样的例子，实现test2.cpp如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python/module.hpp&gt;  #include &lt;boost/python/def.hpp&gt;  using namespace boost::python;     int Add(const int x, const int y)  {      return x + y;  }     int Del(const int x, const int y)  {      return x - y;  }     BOOST_PYTHON_MODULE(test2)  {      def("Add", Add);      def("Del", Del);  } </code></pre> <p>其中BOOST_PYTHON_MODULE的参数为要导出的模块名字，编译命令如下</p> <pre class="has"><code>g++ test2.cpp -fPIC -shared -o test2.so -I/usr/include/python2.7 -I/usr/local/include -L/usr/local/lib -lboost_python  </code></pre> <p><strong>注意：</strong> 编译时需要指定boost头文件和库的路径，我这里分别是/usr/local/include和/usr/local/lib</p> <p>或者通过setup.py导出模块</p> <pre class="has"><code class="language-python">#!/usr/bin/env python  from distutils.core import setup  from distutils.extension import Extension     setup(name="PackageName",   ext_modules=[    Extension("test2", ["test2.cpp"],    libraries = ["boost_python"])   ]) </code></pre> <p>Extension的第一个参数为模块名，第二个参数为文件名</p> <p>执行如下命令</p> <pre class="has"><code>python setup.py build  </code></pre> <p>这时会生成build目录，找到里面的test2.so，并进入同一级目录，验证如下</p> <pre class="has"><code>&gt;&gt;&gt; import test2  &gt;&gt;&gt; test2.Add(1,2)  3 &gt;&gt;&gt; test2.Del(1,2)  -1  </code></pre> <h1>3 导出类</h1> <p>test3.cpp实现如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python.hpp&gt;  using namespace boost::python;     class Test  {      public:          int Add(const int x, const int y)          {              return x + y;          }           int Del(const int x, const int y)          {              return x - y;          }  };     BOOST_PYTHON_MODULE(test3)  {      class_&lt;Test&gt;("Test")          .def("Add", &amp;Test::Add)          .def("Del", &amp;Test::Del);  } </code></pre> <p><strong>注意：</strong>BOOST_PYTHON_MODULE里的.def使用方法有点类似Python的语法，等同于</p> <pre class="has"><code>class_&lt;Test&gt;("Test").def("Add", &amp;Test::Add);  class_&lt;Test&gt;("Test").def("Del", &amp;Test::Del);  </code></pre> <p>编译命令如下</p> <pre class="has"><code>g++ test3.cpp -fPIC -shared -o test3.so -I/usr/include/python2.7 -I/usr/local/include/boost -L/usr/local/lib -lboost_python  </code></pre> <p>测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test3  &gt;&gt;&gt; test = test3.Test()  &gt;&gt;&gt; test.Add(1,2)  3 &gt;&gt;&gt; test.Del(1,2)  -1  </code></pre> <h1><strong>4 导出变参函数</strong></h1> <p>test4.cpp实现如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python.hpp&gt;  using namespace boost::python;     class Test  {      public:          int Add(const int x, const int y, const int z = 100)          {          return x + y + z;          }  };     int Del(const int x, const int y, const int z = 100)  {      return x - y - z;  }     BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(Add_member_overloads, Add, 2, 3)  BOOST_PYTHON_FUNCTION_OVERLOADS(Del_overloads, Del, 2, 3)     BOOST_PYTHON_MODULE(test4)  {      class_&lt;Test&gt;("Test")          .def("Add", &amp;Test::Add, Add_member_overloads(args("x", "y", "z"), "something"));      def("Del", Del, Del_overloads(args("x", "y", "z"), "something"));      } </code></pre> <p>这里Add和Del函数均采用了默认参数，Del为普通函数，Add为类成员函数，这里分别调用了不同的宏，宏的最后两个参数分别代表函数的最少参数个数和最多参数个数</p> <p>编译命令如下</p> <pre class="has"><code>g++ test4.cpp -fPIC -shared -o test4.so -I/usr/include/python2.7 -I/usr/local/include/boost -L/usr/local/lib -lboost_python  </code></pre> <p>测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test4  &gt;&gt;&gt; test = test4.Test()  &gt;&gt;&gt; print test.Add(1,2)  103 &gt;&gt;&gt; print test.Add(1,2,z=3)  6 &gt;&gt;&gt; print test4.Del(1,2)  -1 &gt;&gt;&gt; print test4.Del(1,2,z=3)  -1 </code></pre> <h1><strong>5 导出带Python对象的接口</strong></h1> <p>既然是导出为Python接口，调用者难免会使用Python特有的数据结构，比如tuple,list,dict，由于原生态方法太麻烦，这里只记录boost的使用方法，假设要实现如下的Python函数功能</p> <pre class="has"><code>def Square(list_a)  {      return [x * x for x in list_a]  } </code></pre> <p>即对传入的list每个元素计算平方，返回list类型的结果，代码如下</p> <pre class="has"><code class="language-cpp">#include &lt;boost/python.hpp&gt;     boost::python::list Square(boost::python::list&amp; data)  {      boost::python::list ret;      for (int i = 0; i &lt; len(data); ++i)      {          ret.append(data[i] * data[i]);      }       return ret;  }     BOOST_PYTHON_MODULE(test5)  {      def("Square", Square);   } </code></pre> <p>编译命令如下</p> <pre class="has"><code>g++ test5.cpp -fPIC -shared -o test5.so -I/usr/include/python2.7 -I/usr/local/include/boost -L/usr/local/lib -lboost_python  </code></pre> <p>测试如下</p> <pre class="has"><code>&gt;&gt;&gt; import test5  &gt;&gt;&gt; test5.Square([1,2,3])  [1, 4, 9]  </code></pre> <p>boost实现了<code>boost::python::tuple</code>, <code>boost::python::list</code>, <code>boost::python::dict</code>这几个数据类型，使用方法基本和Python保持一致，具体方法可以查看boost头文件里的boost/python/tuple.hpp及其它对应文件</p> <p>另外比较常用的一个函数是<code>boost::python::make_tuple()</code> ，使用方法如下</p> <pre class="has"><code>boost::python::tuple(int a, int b, int c)  {       return boost::python::make_tuple(a, b, c);  }  </code></pre> </p></div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-283.htm">Spring Boot 新特性一键构建Docker镜像</a></p>
                                                        <p>下一个：<a href="/html/category/article-285.htm">spring security 权限(注解)</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-510.htm" title="PHP对象序列化">PHP对象序列化</a></li>
                        <li class="py-2"><a href="/html/category/article-519.htm" title="Springboot 整合 xxljob 动态API调度任务(进阶篇)">Springboot 整合 xxljob 动态API调度任务(进阶篇)</a></li>
                        <li class="py-2"><a href="/html/category/article-505.htm" title="Springboot2 集成Swagger2，解决配置完成后不显示的坑">Springboot2 集成Swagger2，解决配置完成后不显示的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-1941.htm" title="Vue中的路由守卫">Vue中的路由守卫</a></li>
                        <li class="py-2"><a href="/html/category/article-2826.htm" title="Python生成迷宫">Python生成迷宫</a></li>
                        <li class="py-2"><a href="/html/category/article-1955.htm" title="@DateTimeFormat 和 @JsonFormat 注解">@DateTimeFormat 和 @JsonFormat 注解</a></li>
                        <li class="py-2"><a href="/html/category/article-3425.htm" title="【UWP】实现一个波浪进度条">【UWP】实现一个波浪进度条</a></li>
                        <li class="py-2"><a href="/html/category/article-513.htm" title="springboot整合log4j的踩坑实战记录_java">springboot整合log4j的踩坑实战记录_java</a></li>
                        <li class="py-2"><a href="/html/category/article-499.htm" title="我们如何将值添加到MySQL表的列中？">我们如何将值添加到MySQL表的列中？</a></li>
                        <li class="py-2"><a href="/html/category/article-2825.htm" title="MySQL VARCHAR列的最大长度是多少？">MySQL VARCHAR列的最大长度是多少？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>