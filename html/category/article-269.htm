<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-269.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>SpringCloudConfig集成Bus消息总线实现动态刷新配置(全局广播和定点通知) - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        SpringCloudConfig集成Bus消息总线实现动态刷新配置(全局广播和定点通知)                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="htmledit_views"> <h1 id="autoid-0-0-0">场景</h1> <p>SpringCloudConfig分布式配置中心介绍与搭建使用以及ConfigClient实现动态刷新配置：</p> <p>SpringCloudConfig分布式配置中心介绍与搭建使用以及ConfigClient实现动态刷新配置_霸道流氓气质的博客-CSDN博客</p> <p>在上面实现ConfigClient动态刷新的机制下，是通过post接口调用ConfigClient的方式去进行动态</p> <p>刷新配置。如果ConfigClient较多的话，需要调用每个的接口进行动态刷新配置。</p> <p>有没有可以统一通知的方式，让所有的ConfigClient都可以进行刷新配置或者部分ConfigClient刷新配置。</p> <p>实现思路:</p> <p>利用消息总线触发一个服务端ConfigServer的/bus/refresh，从而刷新所有客户端的配置。</p> <h2 id="autoid-1-0-0">Bus消息总线</h2> <p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架。</p> <p>它整合了Java的事件处理机制和消息中间件的功能。</p> <p>Bus支持两种消息代理：RabbitMQ和Kafka。</p> <p>什么是总线？</p> <p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中</p> <p>所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p> <p>基本原理</p> <p>ConfigClient实例都监听MQ中同一个topic（默认是springCloudBus）。当一个服务刷新数据的时候，它就会把这个信息放入到Topic中，这样其它监听同一个Topic的服务就能得到通知，然后去更新自身的配置。</p> <p>注：</p> <p>博客：<br />霸道流氓气质的博客_CSDN博客-C#,架构之路,SpringBoot领域博主<br /> 关注公众号<br /> 霸道的程序猿<br /> 获取编程相关电子书、教程推送与免费下载。</p> <h1 id="autoid-1-1-0">实现</h1> <p>1、首先搭建RabbitMQ,这里建议将RabbitMQ搭建在本地使用localhost访问，避免使用guest账户远程连接时提示连接被</p> <p>拒绝等问题，需要进行其他相关配置。</p> <p>Windows上安装rabbirmq(包括安装erlong环境与配置环境变量)：</p> <p>Windows上安装rabbirmq(包括安装erlong环境与配置环境变量)_霸道流氓气质的博客-CSDN博客_rabbitmq默认安装路径</p> <p>2、给ConfigServer添加消息总线支持</p> <p>在上面的3344配置中心服务端的pom文件中添加消息总线支持</p> <pre><code>        <!--添加消息总线RabbitMQ支持-->         <dependency>             <groupId>org.springframework.cloud</groupId>             spring-cloud-starter-bus-amqp</artifactId>         </dependency></code></pre> <p>注意这里还需要actuator以及其他依赖</p> <pre><code><?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">     <parent>         <artifactId>SpringCloudDemo</artifactId>         <groupId>com.badao</groupId>         <version>1.0-SNAPSHOT</version>     </parent>     <modelVersion>4.0.0</modelVersion>      <artifactId>cloud-config-center-3344</artifactId>      <properties>         <maven.compiler.source>8</maven.compiler.source>         <maven.compiler.target>8</maven.compiler.target>     </properties>      <dependencies>         <!--添加消息总线RabbitMQ支持-->         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-bus-amqp</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-config-server</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-web</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-actuator</artifactId>         </dependency>     </dependencies> </project></code></pre> <p>然后修改配置文件添加rabbitmq的相关配置</p> <pre><code>#rabbitmq相关配置 rabbitmq:   host: localhost   port: 5672   username: guest   password: guest  #服务注册到eureka地址 eureka:   client:     service-url:       defaultZone: http://localhost:7001/eureka     ##rabbitmq相关配置,暴露bus刷新配置的端点 management:   endpoints: #暴露bus刷新配置的端点     web:       exposure:         include: 'bus-refresh'</code></pre> <p>注意这里的rabbitmq是顶格开始的。</p> <p>完整配置文件</p> <pre><code>server:   port: 3344  spring:   application:     name:  cloud-config-center #注册进Eureka服务器的微服务名   cloud:     config:       server:         git:           uri: https://gitee.com/badaoliumang/springcloud-config.git #Gitee上面的git仓库名字         ####搜索目录           search-paths:             - springcloud-config           username: 你的用户名           password: 你的密码       ####读取分支       label: master  #rabbitmq相关配置 rabbitmq:   host: localhost   port: 5672   username: guest   password: guest  #服务注册到eureka地址 eureka:   client:     service-url:       defaultZone: http://localhost:7001/eureka     ##rabbitmq相关配置,暴露bus刷新配置的端点 management:   endpoints: #暴露bus刷新配置的端点     web:       exposure:         include: 'bus-refresh'</code></pre> <p>3、ConfigClient添加消息总线支持</p> <p>参考上面博客在搭建完3355ConfigClent之后修改其pom文件添加消息总线支持</p> <pre><code>        <!--添加消息总线RabbitMQ支持-->         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-bus-amqp</artifactId>         </dependency></code></pre> <p>完整pom</p> <pre><code><?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">     <parent>         <artifactId>SpringCloudDemo</artifactId>         <groupId>com.badao</groupId>         <version>1.0-SNAPSHOT</version>     </parent>     <modelVersion>4.0.0</modelVersion>      <artifactId>cloud-config-client3355</artifactId>      <properties>         <maven.compiler.source>8</maven.compiler.source>         <maven.compiler.target>8</maven.compiler.target>     </properties>      <dependencies>         <!--添加消息总线RabbitMQ支持-->         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-bus-amqp</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-config</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-web</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-actuator</artifactId>         </dependency>     </dependencies> </project></code></pre> <p>然后修改配置文件，添加rabbitmq相关配置并暴露监控端点</p> <pre><code>server:   port: 3355  spring:   application:     name: config-client   cloud:     #Config客户端配置     config:       label: master #分支名称       name: config #配置文件名称       profile: dev #读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://localhost:3344/master/config-dev.yml       uri: http://localhost:3344 #配置中心地址  #rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口   rabbitmq:     host: localhost     port: 5672     username: guest     password: guest  #服务注册到eureka地址 eureka:   client:     service-url:       defaultZone: http://localhost:7001/eureka  # 暴露监控端点 management:   endpoints:     web:       exposure:         include: "*"</code></pre> <p>注意这里的rabbitmq是位于spring的下层。</p> <p>4、为了演示出广播的效果，这里参考3355ConfigClient再新建一模一样端口为3366的ConfigClient</p> <p>pom文件为</p> <pre><code><?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">     <parent>         <artifactId>SpringCloudDemo</artifactId>         <groupId>com.badao</groupId>         <version>1.0-SNAPSHOT</version>     </parent>     <modelVersion>4.0.0</modelVersion>      <artifactId>cloud-config-client3366</artifactId>      <properties>         <maven.compiler.source>8</maven.compiler.source>         <maven.compiler.target>8</maven.compiler.target>     </properties>      <dependencies>         <!--添加消息总线RabbitMQ支持-->         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-bus-amqp</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-config</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.cloud</groupId>             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-web</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-actuator</artifactId>         </dependency>     </dependencies> </project></code></pre> <p>配置文件为</p> <pre><code>server:   port: 3366  spring:   application:     name: config-client   cloud:     #Config客户端配置     config:       label: master #分支名称       name: config #配置文件名称       profile: dev #读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://localhost:3344/master/config-dev.yml       uri: http://localhost:3344 #配置中心地址  #rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口   rabbitmq:     host: localhost     port: 5672     username: guest     password: guest  #服务注册到eureka地址 eureka:   client:     service-url:       defaultZone: http://localhost:7001/eureka  # 暴露监控端点 management:   endpoints:     web:       exposure:         include: "*"</code></pre> <p>5、下面将模拟运维人员修改gitee上的配置文件，然后调用ConfigServer3344的post接口，广播通知3355和3366这两个ConfigClient动态刷新配置。</p> <p>依次启动EurekaServer7001、ConfigServer3344、ConfigClient3355、ConfigClient3366</p> <p>然后登录Rabbitmq的管理页面</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:15672/"  title="http://localhost:15672/" rel="nofollow">http://localhost:15672/</p> <p>可以看到启动3344、3355、3366时分别有新增的连接。</p> <p class="img-center"></p> <p>此时修改gitee中的配置文件，然后调用3344的post接口</p> <p>http://localhost:3344/actuator/bus-refresh</p> <p>接口没有任何返回则正常，如果返回500或者3344后台有报错则不正常。</p> <p class="img-center"></p> <p>此时再查看3355和3366的配置文件都已经实现了广播通知并动态刷新。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/9bccff07a9e66cc428994007f4890690.jpg"></p> <p>6、如果不想通知全部的ConfigClient，只想定点通知部分，比如这里只需要3355动态刷新配置而不需要3366刷新配置。</p> <p>可以通过如下公式</p> <p>http://localhost:配置中心的端口号/actuator/bus-refresh/{destination}</p> <p>/bus/refresh请求不再发送到具体的实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例。</p> <p>比如这里只通知3355，则路径为</p> <p>http://localhost:3344/actuator/bus-refresh/config-client:3355</p> <p>这里的destination就是服务名:端口号的格式，是在3355的配置文件中配置的内容</p> <p class="img-center"></p> <p>测试效果</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/fa2a7efbc8e4e61822a5f78266226fa0.jpg"></p> </p></div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-268.htm">SpringBoot 自定义ThreadPoolTaskScheduler线程池执行定时任务</a></p>
                                                        <p>下一个：<a href="/html/category/article-270.htm">事务的隔离级别与MVCC</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4588.htm" title="动物疫苗多长时间内打一次 动物疫苗多长时间内打一次最好">动物疫苗多长时间内打一次 动物疫苗多长时间内打一次最好</a></li>
                        <li class="py-2"><a href="/html/category/article-4587.htm" title="养猫的十大禁忌（养猫的十大禁忌猫摇尾巴）">养猫的十大禁忌（养猫的十大禁忌猫摇尾巴）</a></li>
                        <li class="py-2"><a href="/html/category/article-6709.htm" title="宠物店一个月挣5万（宠物店一个月盈利大概是多少）">宠物店一个月挣5万（宠物店一个月盈利大概是多少）</a></li>
                        <li class="py-2"><a href="/html/category/article-4552.htm" title="济南领养宠物的地方 济南领养宠物的地方有哪些">济南领养宠物的地方 济南领养宠物的地方有哪些</a></li>
                        <li class="py-2"><a href="/html/category/article-6018.htm" title="猫三联三针间隔时间多久打第二针（猫三联打2针还是3针）">猫三联三针间隔时间多久打第二针（猫三联打2针还是3针）</a></li>
                        <li class="py-2"><a href="/html/category/article-5572.htm" title="1970年农历四月二十七是几号 1970年农历四月二十七是几号出生">1970年农历四月二十七是几号 1970年农历四月二十七是几号出生</a></li>
                        <li class="py-2"><a href="/html/category/article-6617.htm" title="免费领养宠物送到家门口违法吗（免费领养宠物怎么赚钱）">免费领养宠物送到家门口违法吗（免费领养宠物怎么赚钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-6107.htm" title="开宠物食品店赚钱吗现在（开宠物食品店需要多少钱）">开宠物食品店赚钱吗现在（开宠物食品店需要多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-4404.htm" title="动物疫苗品牌排名前十 动物疫苗品牌排名前十名">动物疫苗品牌排名前十 动物疫苗品牌排名前十名</a></li>
                        <li class="py-2"><a href="/html/category/article-4370.htm" title="女生学动物医学好吗专科生（女生学动物医学专业好吗）">女生学动物医学好吗专科生（女生学动物医学专业好吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>