<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-3732.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions) - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<div id="content_views" class="markdown_views prism-dracula"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li>一、state</li> <li> <ul> <li>1.1 state使用</li> <li>1.2 mapState 辅助函数</li> </ul> </li> <li>二、getters</li> <li> <ul> <li>2.1 getters的使用</li> </ul> </li> <li>三、Mutation</li> <li> <ul> <li>3.1 mutations的使用</li> <li>3.2 mapMutations</li> <li>3.3 使用常量替代Mutation事件类型</li> </ul> </li> <li>四、actions</li> <li> <ul> <li>4.1 action类似于mutation</li> </ul> </li> </ul> </li> </ul> </div> <h2>一、state</h2> <h3>1.1 state使用</h3> <p>引入vuex 以后，我们需要在state中定义变量，类似于vue中的data，通过state来存放状态</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//存放状态</span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>注册两个组件分别引入到app.vue中</p> <pre><code class="prism language-javascript"><span class="token operator"><</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token operator"><</span>vabout<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>vabout<span class="token operator">></span><span class="token operator"><</span>vhome<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>vhome<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre> <p>vhome组件内容</p> <pre><code class="prism language-javascript"><span class="token operator"><</span>div<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre> <p>vabout组件内容</p> <pre><code class="prism language-javascript"><span class="token operator"><</span>h1<span class="token operator">></span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220605/bb3a25d7380b9ec4c76a0b25df3c4f72.jpg" alt="前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)"><br /> 如图，显示出显示出相应的内容，有了vuex，我们不必在考虑组件之间的传值，直接就可以通过$store来获取不同的数据，但是如果需要vuex中的多个数据的这时候，这样写就太啰嗦了，我们可以将它定义在computed中。</p> <p>Props，methods,data和computed的初始化都是在beforeCreated和created之间完成的。<br /> 例：</p> <pre><code class="prism language-javascript"><span class="token operator"><</span>template<span class="token operator">></span><span class="token operator"><</span>div<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator"><</span>script<span class="token operator">></span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">nickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>这样引入就方便了很多。</p> <h3>1.2 mapState 辅助函数</h3> <p>1.1中的方法虽然引入的时候方便了，但是computed中定义的代码还是很多，而这时候vuex又给我们提供了更简便的方法mapState方法</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span>mapState<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>其中</p> <pre><code class="prism language-javascript"><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//映射哪些字段就填入哪些字段</span></code></pre> <p>这一句代码就相当于下面这些</p> <pre><code class="prism language-javascript"><span class="token function">nickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token function">gender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>gender<span class="token punctuation">}</span></code></pre> <p><strong>记住：用mapState等这种辅助函数的时候，前面的方法名和获取的属性名是一致的。</strong></p> <p>如果我们需要自定义一个计算属性怎么办呢？怎么添加呢？<br /> 毕竟现在已经成这样了 computed: mapState([‘nickname’,‘age’,‘gender’])<br /> 这时候我们就需要es6中的展开运算符：…</p> <pre><code class="prism language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//computed是不能传参数的</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <h2>二、getters</h2> <h3>2.1 getters的使用</h3> <p>getters相当于vue中的计算属性，通过getters进一步处理，得到我们想要的值，而且允许传参，第一个参数就是state</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//存放状态</span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">firstname</span><span class="token operator">:</span><span class="token string">'张'</span><span class="token punctuation">,</span><span class="token literal-property property">lastname</span><span class="token operator">:</span><span class="token string">'三丰'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">money</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">realname</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> state<span class="token punctuation">.</span>firstname<span class="token operator">+</span>state<span class="token punctuation">.</span>lastname<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">money_us</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>money<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//computed是不能传参数的</span><span class="token function">valued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'realname'</span><span class="token punctuation">,</span><span class="token string">'money_us'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <h2>三、Mutation</h2> <h3>3.1 mutations的使用</h3> <p>我们代码中定义的时候需要些mutations，它类似于vue中的methods，</p> <p>mutations需要通过commit来调用其里面的方法，它也可以传入参数，第一个参数是state，第二个参数是载荷（payLoad），也就是额外的参数</p> <p>代码如下</p> <pre><code class="prism language-javacript">mutations: { //类似于methods   addAge(state,payLoad){      state.age+=payLoad.number   } }</code></pre> <p>template部分</p> <pre><code class="prism language-javascript"><span class="token operator"><</span>div<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span><span class="token operator"><</span>div<span class="token operator">></span><span class="token operator"><</span>button @click<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>测试<span class="token operator"><</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre> <p>js部分</p> <pre><code class="prism language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addAge'</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">number</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>调用的时候第二个参数最好写成对象形式，这样我们就可以传递更多信息。</p> <p>但是，这样写还是会遇到同样的问题，就是如果需要操作多个数据，就会变的麻烦，这时候我们就需要mapMutations，通过它将方法映射过来</p> <h3>3.2 mapMutations</h3> <p>跟mapState、mapGetters一样</p> <pre><code class="prism language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addAge'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>mapMutations([‘addAge’])这一句就相当于下面的代码</p> <pre><code class="prism language-javascript"><span class="token function">addAge</span><span class="token punctuation">(</span><span class="token parameter">payLoad</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addAge'</span><span class="token punctuation">,</span>payLoad<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>参数我们可以在调用这个方法的时候写入</p> <pre><code class="prism language-javascript"><span class="token operator"><</span>button @click<span class="token operator">=</span><span class="token string">"addAge({number:5})"</span><span class="token operator">></span>测试<span class="token operator"><</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre> <p>这时候一些杠精就要说了，我为什么要绕一圈，从mutations里面去改state呢？我能不能直接改state呢？</p> <p>比如这样：</p> <pre><code class="prism language-javascript"><span class="token function">addAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>实际看结果也可以，那我为什么从mutations里面中转一下呢？</p> <p>原因如下：<br /> ① 在mutations中不仅仅能做赋值操作<br /> ② 作者在mutations中做了类似埋点操作，如果从mutations中操作的话， 能被检测到，可以更方便用调试工具调试，调试工具可以检测到实时变化，而直接改变state中的属性，则无法实时监测</p> <p>注意：mutations只能写同步方法，不能写异步，比如axios、setTimeout等，这些都不能写，mutations的主要作用就是为了修改state的。</p> <p>原因类似：如果在mutations中写异步，也能够调成功，但是由于是异步的，不能被调试工具追踪到，所有不推荐这样写，不利于调试,这是官方的约定。</p> <h3>3.3 使用常量替代Mutation事件类型</h3> <p>把原本的方法名称由字符串转变成常量</p> <p>代码如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">const</span><span class="token constant">ADD_AGE</span><span class="token operator">=</span><span class="token string">'addAge'</span>  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//存放状态</span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">firstname</span><span class="token operator">:</span><span class="token string">'张'</span><span class="token punctuation">,</span><span class="token literal-property property">lastname</span><span class="token operator">:</span><span class="token string">'三丰'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">money</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//类似于 computed</span><span class="token function-variable function">realname</span><span class="token operator">:</span><span class="token parameter">state</span><span class="token operator">=></span>state<span class="token punctuation">.</span>firstname<span class="token operator">+</span>state<span class="token punctuation">.</span>lastname<span class="token punctuation">,</span><span class="token function">money_us</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>money<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//类似于methods</span><span class="token punctuation">[</span><span class="token constant">ADD_AGE</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payLoad</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          state<span class="token punctuation">.</span>age<span class="token operator">+=</span>payLoad<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>将addAge方法名字定义为一个常量，当调用的时候直接引入</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span><span class="token constant">ADD_AGE</span><span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'../store'</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span>mapMutations<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">ADD_AGE</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>这样写的好处：</p> <p>① 不容易写错，字符串容易写错，而且字符串写错以后不会报错位置，而用常量替代，如果写错，eslint可以提示错误位置</p> <p>用常量替代mutations的时候我我们可以新建一个文件（mutation_type.js）专门存储这些常量</p> <p>mutation_type.js部分</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token constant">ADD_AGE</span><span class="token operator">:</span> ‘addAge’<span class="token punctuation">}</span></code></pre> <p>然后再store/index.js中引入</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token constant">MUTATION_TYPES</span> from ‘<span class="token punctuation">.</span><span class="token operator">/</span>mutation_type’（先引入）<span class="token keyword">export</span><span class="token keyword">let</span><span class="token constant">MUTATION_TYPE</span><span class="token operator">=</span><span class="token constant">MUTATION_TYPES</span> （再导出）</code></pre> <p>这个地方有一个坑，不要将引入和导出合并成一行代码：比如这样</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span><span class="token punctuation">{<!-- --></span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token comment">// 可以简单理解为</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token keyword">export</span><span class="token punctuation">{<!-- --></span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>需要注意的是，两者并不一样，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。</p> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span><span class="token constant">MUTATION_TYPE</span><span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'../store'</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">MUTATION_TYPE</span><span class="token punctuation">.</span><span class="token constant">ADD_AGE</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>总结一下：<br /> ① 依赖state得到新的数据，用getters（跟computed一样，只读）<br /> ② 修改state的属性值，就用mutations（同步操作）</p> <h2>四、actions</h2> <h3>4.1 action类似于mutation</h3> <p>区别：action可以提交mutation<br /> action也不要直接去操作state，而是去操作mutation</p> <p>action包含异步操作，类似于axios请求，可以都放在action中写</p> <p>action中的方法默认的就是异步，并且返回promise</p> <p>代码如下</p> <p>store部分</p> <pre><code class="prism language-javascript"><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在actions中定义一个方法：getUserInfo，并且返回一个对象</p> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'getUserInfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>在created中调用此方法，并将结果赋值给res，打印res，结果打印出Promise</p> <p>这表明，在actions中的方法，默认就是异步的，通过then获取数据</p> <p>mapActions([‘getUserInfo’]) 相当于以下代码</p> <pre><code class="prism language-javascript"><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>‘getUserInfo’<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>在实际开发当中，state里面的属性值是空的，当登录以后，再进行获取对应的信息。</p> <p>登录以后，需要得到用户信息，那如何得到呢？</p> <p>首先进入页面的时候调用actions中的getUserInfo方法</p> <p>代码如下</p> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>‘getUserInfo’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>store部分</p> <p>首先要想得到数据，那就相当于给state赋值，那首先想到的就是mutations来操作state，但是请求的接口都是axios异步，所以就不能用mutations而是用actions，通过actions来操作mutations从而操作state</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">nickname</span><span class="token operator">:</span>‘’<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">money</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">setUerInfo</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payLoad</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>    state<span class="token punctuation">.</span>nickname<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>nickname    state<span class="token punctuation">.</span>age<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>age    state<span class="token punctuation">.</span>gender<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>gender    state<span class="token punctuation">.</span>money<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>money<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//actions没有提供state当参数</span><span class="token keyword">async</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{<!-- --></span>commit<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/token接口'</span><span class="token punctuation">)</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setToken'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//context可以理解为它是整个Store的对象.类似于this.$store，他里面包含了state，getter，mutations，actions</span><span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/接口url'</span><span class="token punctuation">)</span>   context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setUerInfo'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token comment">//相当于 this.$store.commit,第一个参数是方法名，第二个参数是要传入的数据</span>   context<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getToken'</span><span class="token punctuation">)</span><span class="token comment">//actions也可以调用自己的其他方法</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>运行过程，调用getUserInfo方法以后，进入actions，然后通过commit调用setUserInfo，将res（用户信息）作为参数传入传入进去，并将相对应的属性值赋值给state，完成这一过程的操作。</p> <p>getUserInfo的参数也可以用解构，这样更方便</p> <pre><code class="prism language-javascript"><span class="token keyword">async</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{<!-- --></span>commit<span class="token punctuation">,</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/接口url'</span><span class="token punctuation">)</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setUerInfo'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getToken'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> </div> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-3731.htm">夯实基础图解作用域链和闭包</a></p>
                                                        <p>下一个：<a href="/html/category/article-3757.htm">Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-504.htm">Infrastructure 知识: dnf对module的处理</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-486.htm">如何使用Copy-Item在PowerShell中复制多个文件？</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-473.htm">VUE前端开发环境版本查看命令方法详解</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-455.htm">并发同时访问_实践篇（09）Redis如何应对并发访问？</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-419.htm">Web支持可暂停的超大文件上传</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-384.htm">C语言字符串、字符数组、字符指针</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-372.htm">脚本如何加入html文件中,html中加载JavaScript脚本文件的常用方式总结</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-364.htm">建立对分布式锁的系统认知 &#8211; 从 Redlock 开始</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-363.htm">C#自定义配置文件方法详解_在线工具</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-302.htm">PHP静态属性和方法详解</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-8043.htm" title="动物疫苗批准文号是什么 动物疫苗批准文号是什么意思啊">动物疫苗批准文号是什么 动物疫苗批准文号是什么意思啊</a></li>
                        <li class="py-2"><a href="/html/category/article-7951.htm" title="宠物回收站（宠物回收app）">宠物回收站（宠物回收app）</a></li>
                        <li class="py-2"><a href="/html/category/article-8364.htm" title="宠物粮食品牌上市公司排名榜（宠物粮龙头企业）">宠物粮食品牌上市公司排名榜（宠物粮龙头企业）</a></li>
                        <li class="py-2"><a href="/html/category/article-8227.htm" title="春节指的是除夕还是正月初一(春节是农历的哪一天除夕是哪天)">春节指的是除夕还是正月初一(春节是农历的哪一天除夕是哪天)</a></li>
                        <li class="py-2"><a href="/html/category/article-7629.htm" title="动物疫苗销售需要什么手续和条件呢英语作文（动物疫苗经销商资格）">动物疫苗销售需要什么手续和条件呢英语作文（动物疫苗经销商资格）</a></li>
                        <li class="py-2"><a href="/html/category/article-7583.htm" title="汉文帝的霸陵原来是这么发现的！网友：原来历史剧都是真的(汉文帝霸陵原址)">汉文帝的霸陵原来是这么发现的！网友：原来历史剧都是真的(汉文帝霸陵原址)</a></li>
                        <li class="py-2"><a href="/html/category/article-8134.htm" title="海拉鲁旁边的神庙（海拉鲁主殿神庙）">海拉鲁旁边的神庙（海拉鲁主殿神庙）</a></li>
                        <li class="py-2"><a href="/html/category/article-7215.htm" title="宠物粮厂家招聘 宠物粮厂家招聘最新信息">宠物粮厂家招聘 宠物粮厂家招聘最新信息</a></li>
                        <li class="py-2"><a href="/html/category/article-7031.htm" title="圣诞树是什么品种的松树(圣诞树是什么品种的松树图片)">圣诞树是什么品种的松树(圣诞树是什么品种的松树图片)</a></li>
                        <li class="py-2"><a href="/html/category/article-7077.htm" title="电影演员李羚近况（这都可以？）演员李羚年轻时候的照片，传闻中的陈芊芊分集剧情，李羚，">电影演员李羚近况（这都可以？）演员李羚年轻时候的照片，传闻中的陈芊芊分集剧情，李羚，</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>