<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-3758.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener_在线工具 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener_在线工具                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h1 id="浅尝spring注解开发_简单理解beanfactorypostprocessorbeandefinitionregistrypostprocessorapplicationlistener">浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener</h1> <blockquote> <p>浅尝Spring注解开发，基于Spring 4.3.12<br /><font color="red">分析BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener</font></p> </blockquote> <p>浅尝Spring注解开发_自定义注册组件、属性赋值、自动装配<br />浅尝Spring注解开发_Bean生命周期及执行过程<br />浅尝Spring注解开发_AOP原理及完整过程分析（源码）<br />浅尝Spring注解开发_声明式事务及原理<br />浅尝Spring注解开发_简单理解BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor、ApplicationListener<br />Spring注解开发_Spring容器创建概述</p> <h2 id="beanfactorypostprocessor">BeanFactoryPostProcessor</h2> <ul> <li> <code>BeanPostProcessor</code>：bean后置处理器，bean创建对象初始化前后进行拦截工作的</li> <li> <code>BeanFactoryPostProcessor</code>：beanFactory的后置处理器</p> <ul> <li><font color="red">在<code>BeanFactory</code>标准初始化之后调用，来定制和修改<code>BeanFactory</code>的内容</font></li> <li>所有的bean定义已经保存加载到<code>beanFactory</code>，但是bean的实例还未创建</li> </ul> </li> </ul> <h3 id="原理">原理</h3> <ol> <li>ioc容器创建对象</li> <li> <code>refresh()->invokeBeanFactoryPostProcessors(beanFactory)</code></p> <ul> <li>如何找到所有的<code>BeanFactoryPostProcessor</code>并执行他们的方法？ <ol> <li>直接在<code>BeanFactory</code>中找到所有类型是<code>BeanFactoryPostProcessor</code>的组件，</li> <li>按照<code>Ordered</code>接口排序</li> <li>依次执行它们的方法。在初始化创建其他组件前面执行</li> </ol> </li> </ul> </li> </ol> <pre><code class="language-java">@Component public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {  	@Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { 		System.out.println("MyBeanFactoryPostProcessor...postProcessBeanFactory..."); 		int count = beanFactory.getBeanDefinitionCount(); 		String[] names = beanFactory.getBeanDefinitionNames(); 		System.out.println("当前BeanFactory中有"+count+" 个Bean"); 		System.out.println(Arrays.asList(names)); 	} } </code></pre> <p>输出</p> <pre><code class="language-java">MyBeanFactoryPostProcessor...postProcessBeanFactory... 当前BeanFactory中有9 个Bean //[输出所有BeanDefinitionNames...] //创建注入容器中的一个Bean blue...constructor </code></pre> <h2 id="beandefinitionregistrypostprocessor">BeanDefinitionRegistryPostProcessor</h2> <ul> <li> <code>BeanDefinitionRegistryPostProcessor</code></p> <ul> <li>继承自<code>BeanFactoryPostProcessor</code>：<code>BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor</code> </li> <li> <code>postProcessBeanDefinitionRegistry()</code>在所有bean定义信息将要被加载，bean实例还未创建</li> </ul> </li> <li><font color="red">优先于<code>BeanFactoryPostProcessor</code>执行</font></li> <li><font color="red">利用<code>BeanDefinitionRegistryPostProcessor</code>给容器中再额外添加一些组件</font></li> </ul> <h3 id="原理-1">原理</h3> <ol> <li>ioc创建对象</li> <li><code>refresh()->invokeBeanFactoryPostProcessors(beanFactory)</code></li> <li>从容器中获取到所有的<code>BeanDefinitionRegistryPostProcessor</code>组件 <ol> <li>同样实现了<code>Ordered</code>接口排序，<font color="red">依次触发所有的<code>postProcessBeanDefinitionRegistry()</code>方法</font> </li> <li><font color="red">再来触发<code>BeanFactoryPostProcessor</code>方法<code>postProcessBeanFactory()</code></font></li> </ol> </li> </ol> <pre><code class="language-java">@Component public class MyBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor{  	@Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { 		// TODO Auto-generated method stub 		System.out.println("MyBeanDefinitionRegistryPostProcessor...bean的数量："+beanFactory.getBeanDefinitionCount()); 	}  	//BeanDefinitionRegistry Bean定义信息的保存中心，以后BeanFactory就是按照BeanDefinitionRegistry里面保存的每一个bean定义信息创建bean实例； 	@Override 	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException { 		// TODO Auto-generated method stub 		System.out.println("postProcessBeanDefinitionRegistry...bean的数量："+registry.getBeanDefinitionCount());                  //再注册一个Bean，两种不同方法 		//RootBeanDefinition beanDefinition = new RootBeanDefinition(Blue.class); 		AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(Blue.class).getBeanDefinition(); 		registry.registerBeanDefinition("hello", beanDefinition); 	} } </code></pre> <p>输出</p> <pre><code class="language-java">//下面两个都是MyBeanDefinitionRegistryPostProcessor方法，由于在方法内又手动注册了一个，所以是11个 postProcessBeanDefinitionRegistry...bean的数量：10 MyBeanDefinitionRegistryPostProcessor...bean的数：11 //下面一个是BeanFactoryPostProcessor方法 MyBeanFactoryPostProcessor...postProcessBeanFactory... 当前BeanFactory中有11 个Bean //输出所有BeanDefinitionNames... [org.springframework...] //两个Bean blue...constructor blue...constructor </code></pre> <h2 id="applicationlistener">ApplicationListener</h2> <ul> <li> <p><code>ApplicationListener</code>：监听容器中发布的事件。事件驱动模型开发</p> </li> <li> <p><code>public interface ApplicationListener<E extends ApplicationEvent></code>：监听 <code>ApplicationEvent</code> 及其下面的子事件</p> </li> </ul> <h3 id="步骤">步骤</h3> <ol> <li>写一个监听器（<code>ApplicationListener</code>实现类）来监听某个事件（<code>ApplicationEvent</code>及其子类），或者使用<code>@EventListener</code>注解标注在监听方法上</li> <li>把监听器加入到容器</li> <li>只要容器中有相关事件的发布，我们就能监听到这个事件 <ul> <li> <code>ContextRefreshedEvent</code>：容器刷新完成（所有bean都完全创建）会发布这个事件</li> <li> <code>ContextClosedEvent</code>：关闭容器会发布这个事件</li> </ul> </li> <li>发布一个事件 <ul> <li><code>applicationContext.publishEvent()</code></li> </ul> </li> </ol> <p>自定义监听器</p> <pre><code class="language-java">@Component public class MyApplicationListener implements ApplicationListener<ApplicationEvent> {  	//当容器中发布此事件以后，方法触发 	@Override 	public void onApplicationEvent(ApplicationEvent event) { 		// TODO Auto-generated method stub 		System.out.println("收到事件："+event); 	} } </code></pre> <pre><code class="language-java">@Service public class UserService { 	 	@EventListener(classes={ApplicationEvent.class}) 	public void listen(ApplicationEvent event){ 		System.out.println("UserService..监听到的事件："+event); 	}  } </code></pre> <p>发布事件</p> <pre><code class="language-java">public class IOCTest_Ext { 	 	@Test 	public void test01(){ 		AnnotationConfigApplicationContext applicationContext  = new AnnotationConfigApplicationContext(ExtConfig.class); 		 		//发布事件； 		applicationContext.publishEvent(new ApplicationEvent(new String("我发布的事件")) { 		}); 		 		applicationContext.close(); 	}  } </code></pre> <p>输出</p> <pre><code class="language-java">//注入Bean blue...constructor //监听容器刷新事件 UserService..监听到的事件：org.springframework.context.event.ContextRefreshedEvent[] 收到事件：org.springframework.context.event.ContextRefreshedEvent[] UserService..监听到的事件：com.atguigu.test.IOCTest_Ext$1[source=我发布的事件] //监听自定义事件 UserService..监听到的事件：org.springframework.context.event.ContextClosedEvent[] 收到事件：com.atguigu.test.IOCTest_Ext$1[source=我发布的事件] //监听容器关闭事件 UserService..监听到的事件：org.springframework.context.event.ContextClosedEvent 收到事件：org.springframework.context.event.ContextClosedEvent[] </code></pre> <h3 id="原理-2">原理</h3> <ol> <li> <p>发布<code>ContextRefreshedEvent</code>事件为例：</p> <ol> <li> <p>容器创建对象：<code>refresh()</code></p> </li> <li> <p><code>finishRefresh()</code>，容器刷新完成</p> <p>事件发布流程：</p> <ol> <li> <p><font color="red">获取事件的多播器（派发器）</font>：<code>getApplicationEventMulticaster()</code></p> </li> <li> <p><code>multicastEvent</code>派发事件</p> </li> <li> <p>获取到所有的<code>ApplicationListener</code></p> <p><code>for (final ApplicationListener<?> listener : getApplicationListeners(event, type))</code></p> <ol> <li>如果有<code>Executor</code>，可以支持使用<code>Executor</code>进行异步派发：<code>Executor executor = getTaskExecutor()</code> </li> <li>否则，同步的方式直接执行<code>listener</code>方法：<code>invokeListener(listener, event)</code> </li> <li>拿到<code>listener</code>回调<code>onApplicationEvent</code>方法</li> </ol> </li> </ol> </li> </ol> </li> <li> <p>发布自定义事件</p> </li> <li> <p>容器关闭发布<code>ContextClosedEvent</code>事件</p> </li> </ol> <p><strong>事件多播器（派发器）</strong></p> <ol> <li>容器创建对象：<code>refresh()</code> </li> <li> <code>initApplicationEventMulticaster()</code>：初始化<code>ApplicationEventMulticaster</code></p> <ol> <li>先去容器中找有没有<code>id="applicationEventMulticaster"</code>的组件</li> <li>如果没有就创建一个：<code>this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory)</code>，并且加入到容器中，我们就可以在其他组件要派发事件，自动注入这个<code>applicationEventMulticaster</code> </li> </ol> </li> </ol> <p><strong>容器中有哪些监听器</strong></p> <ol> <li>容器创建对象：<code>refresh()</code> </li> <li> <code>registerListeners()</code></p> <ol> <li>从容器中拿到所有的监听器，把他们注册到<code>applicationEventMulticaster</code>中<code>String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false)</code> </li> <li>将<code>listener</code>注册到<code>ApplicationEventMulticaster</code>中<code>getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName)</code> </li> </ol> </li> </ol> <p><strong>SmartInitializingSingleton原理</strong></p> <p><code>@EventListener</code>使用<code>EventListenerMethodProcessor</code>处理器来解析方法上的<code>@EventListener</code>，<code>EventListenerMethodProcessor</code>实现了<code>SmartInitializingSingleton</code></p> <ol> <li> <p>ioc容器创建对象并<code>refresh()</code></p> </li> <li> <p><code>finishBeanFactoryInitialization(beanFactory)</code>：初始化剩下的单实例bean</p> <ol> <li> <p>先创建所有的单实例bean，<code>getBean()</code></p> </li> <li> <p>获取所有创建好的单实例bean，判断是否是<code>SmartInitializingSingleton</code>类型的</p> <p>如果是就调用<code>afterSingletonsInstantiated()</code></p> </li> </ol> </li> </ol> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-3757.htm">Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法</a></p>
                                                        <p>下一个：<a href="/html/category/article-4069.htm">Rust如何开发eBPF应用</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-1333.htm">在vue项目中如何获取视频的时长_vue.js_</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-521.htm">typescript的安装运行与自动编译</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-482.htm">Hyperledger Fabric节点的动态添加和删除</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-379.htm">QT学习-08-Qt连接Sqllite数据库</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-377.htm">Eureka的配置项详解</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-339.htm">Springboot 使用RestTemplate</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-291.htm">pip 和 Conda 镜像站配置</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-279.htm">编码器原理与电机转速、角度控制</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-277.htm">DataView 过滤、排序、DISTINCT功能</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-273.htm">深入理解mmap&#8211;内核代码分析及驱动demo示例</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4069.htm" title="Rust如何开发eBPF应用">Rust如何开发eBPF应用</a></li>
                        <li class="py-2"><a href="/html/category/article-1956.htm" title="企业应用架构研究系列二十八：身份认证 Beginning Out With IdentityServer4">企业应用架构研究系列二十八：身份认证 Beginning Out With IdentityServer4</a></li>
                        <li class="py-2"><a href="/html/category/article-1344.htm" title="Java8新特性之Instant详解">Java8新特性之Instant详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1343.htm" title="HttpClient 设置超时时间">HttpClient 设置超时时间</a></li>
                        <li class="py-2"><a href="/html/category/article-1353.htm" title="关于Redis缓存和数据库一致性问题">关于Redis缓存和数据库一致性问题</a></li>
                        <li class="py-2"><a href="/html/category/article-4480.htm" title="一岁的猫还用打猫三联吗（一岁的猫还打疫苗吗）">一岁的猫还用打猫三联吗（一岁的猫还打疫苗吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4405.htm" title="兽药疫苗查询（兽药疫苗查询真伪）">兽药疫苗查询（兽药疫苗查询真伪）</a></li>
                        <li class="py-2"><a href="/html/category/article-1928.htm" title="Java 9中的JShell中的前向参考是什么？">Java 9中的JShell中的前向参考是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-4516.htm" title="公务员国考考试报名入口官网（国家公务员国考报名入口）">公务员国考考试报名入口官网（国家公务员国考报名入口）</a></li>
                        <li class="py-2"><a href="/html/category/article-1913.htm" title="Nacos配置管理基础应用">Nacos配置管理基础应用</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>