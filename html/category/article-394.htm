<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://swedenaddress.github.io/html/category/article-394.htm" />
<link rel="icon" href="/assets/addons/xcblog/img/swedenaddress/favicon.ico" type="image/x-icon"/>
<title>bellman-ford 单源最短路问题 图解 - SwedenAddress</title>
<link rel="stylesheet" href="/assets/addons/xcblog/css/swedenaddress/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?ff0c66a832e6568df61664f01ded8b73";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Sweden Address
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/jquery-3.3.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/addons/xcblog/js/frontend/swedenaddress/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        bellman-ford 单源最短路问题 图解                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/html/category/" class="">文章分类 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                          				  				  				<h1><strong>核心思想</strong>：松弛操作</h1> <p>对于边(u,v)，用dist（u）和（u，v）的和尝试更新dist（v）:</p> <p><strong>dist(v) = min(dist(v) , dist(u)+l(u,v)</strong></p> <p>注：dist（i）为源点（起点）到i点的距离，l（u，v）为u-&gt;v的边权。</p> <p>Bellman-Ford的基本操作是进行多次迭代，每一轮迭代对图上所有边进行松弛操作，直到再<strong>一次迭代中没有点的dist发生变化</strong>即可停止迭代。为什么呢？不妨假设已经没有dist发生变化了，再进行一轮迭代的话，很显然，之后的迭代没有产生任何作用，dist数组依旧没有改变，反倒增大了时间复杂度，这不是多此一举么。</p> <h1 id="%E5%9B%BE%E8%A7%A3%EF%BC%9A"><strong>图解：</strong></h1> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected" data-cke-display-name="图像" data-cke-filter="off" data-cke-widget-id="10" data-cke-widget-wrapper="1"><img fetchpriority="high" decoding="async" src="http://img.555519.xyz/uploads3/20220509/b31eeb1951fa70b7bd8ce904b05e8195.jpg" alt="bellman-ford 单源最短路问题 图解"><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4b95a2cbcccd911f9cc71db1a3306327.jpg" alt="bellman-ford 单源最短路问题 图解" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/><span class="cke_image_resizer" title="点击并拖拽以改变尺寸"></span></span></span></p> <p><strong>初始</strong>：（S为源点）</p> <p>初始设置为inf无穷大，表示还没有最短路</p> <table style="height: 63px; width: 453px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">inf</td> <td style="text-align: center">inf</td> <td style="text-align: center">inf</td> <td style="text-align: center">inf</td> <td style="text-align: center">inf</td> </tr> </tbody> </table> <p><strong>第一轮迭代：</strong></p> <p>对S点连出的边（s-&gt;e，s-&gt;a）</p> <table style="height: 59px; width: 471px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">S</span></td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">7(0+7)</span></td> <td style="text-align: center">inf</td> <td style="text-align: center">inf</td> <td style="text-align: center">inf</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">5(0+5)</span></td> </tr> </tbody> </table> <p>&nbsp;对A连出的边（a-&gt;c）</p> <table style="height: 68px; width: 460px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">A</span></td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">inf</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">9(7+2)</span></td> <td style="text-align: center">inf</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>对B连出的边（b-&gt;a)</p> <table style="height: 68px; width: 453px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">B</span></td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">inf</td> <td style="text-align: center">9</td> <td style="text-align: center">inf</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp; &nbsp; &nbsp; &nbsp; 　　　　　　　dist(B)还没有找到最短路，更新其他点的最短路径无意义，故对B点的出边不进行松弛</p> <p>对C连出的边（c-&gt;b）</p> <table style="height: 65px; width: 454px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">C</span></td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">7(9+(-2))</span></td> <td style="text-align: center">9</td> <td style="text-align: center">inf</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>对D连出的边（d-&gt;c,d-&gt;a）</p> <table style="height: 73px; width: 446px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">D</span></td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">7</td> <td style="text-align: center">9</td> <td style="text-align: center">inf</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　dist(D)还没有找到最短路，更新其他点的最短路径无意义，故对D点的出边不进行松弛</p> <p>&nbsp;对E连出的边（e-&gt;d）</p> <table style="height: 67px; width: 454px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">E</span></td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">7</td> <td style="text-align: center">9</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">6(5+1)</span></td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>已经对所有的边进行了松弛操作，第一轮迭代结束</p> <p><strong>第二轮迭代</strong></p> <p>对S点连出的边（s-&gt;e，s-&gt;a）</p> <table style="height: 28px; width: 461px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">S</span></td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">7</td> <td style="text-align: center">9</td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　　　　　　　　无需更新</p> <p>&nbsp;对A连出的边（a-&gt;c）</p> <table style="height: 61px; width: 474px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">A</span></td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">7</td> <td style="text-align: center">9</td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　　　　　　　无需更新</p> <p>对B连出的边（b-&gt;a)</p> <table style="height: 57px; width: 466px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">B</span></td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">7</td> <td style="text-align: center">9</td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 　　　　　　　　　　　　　无需更新</p> <p>对C连出的边（c-&gt;b）</p> <table style="height: 67px; width: 462px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">C</span></td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">7</td> <td style="text-align: center">7</td> <td style="text-align: center">9</td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;　　　　　　　　　　　　 无需更新</p> <p>对D连出的边（d-&gt;c,d-&gt;a）</p> <table style="height: 66px; width: 461px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">D</span></td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">2(6+(-4))</span></td> <td style="text-align: center">7</td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">5(6+(-1))</span></td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>&nbsp;对E连出的边（e-&gt;d）</p> <table style="height: 61px; width: 467px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center"><span style="color: rgba(0, 0, 255, 1)">E</span></td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center">2</td> <td style="text-align: center">7</td> <td style="text-align: center">5</td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p>已经对所有的边进行了松弛操作，第二轮迭代结束</p> <p><strong>第三轮迭代</strong></p> <p>与第一第二轮同理（此处直接给出迭代结束的结果）</p> <table style="height: 63px; width: 479px" border="1" cellspacing="1" cellpadding="1"> <tbody> <tr> <td style="text-align: center">S</td> <td style="text-align: center">A</td> <td style="text-align: center">B</td> <td style="text-align: center">C</td> <td style="text-align: center">D</td> <td style="text-align: center">E</td> </tr> <tr> <td style="text-align: center">0</td> <td style="text-align: center"><span style="background-color: rgba(255, 255, 255, 1); color: rgba(0, 0, 0, 1)">2</span></td> <td style="text-align: center"><span style="background-color: rgba(255, 255, 255, 1); color: rgba(255, 0, 0, 1)">2</span></td> <td style="text-align: center"><span style="color: rgba(255, 0, 0, 1)">4</span></td> <td style="text-align: center">6</td> <td style="text-align: center">5</td> </tr> </tbody> </table> <p><strong>第四轮迭代</strong></p> <p>无任何更新，迭代结束，更新完成</p> <p><strong>算法分析：</strong></p> <p>如果最短路存在，一定存在一个不含环的最短路。（理由：对零环和正环，去掉后路径不会边长；对负环，若最短路径中存在负环，那一定不是最短路，负环可以无限绕下去，路径可以是负无穷）</p> <p>最短路不含环，那么一条最短路径最多经过n-1个点（不含起点），所以最多需要n-1轮松弛操作。</p> <p><strong>复杂度分析：</strong></p> <p>最多进行n-1次迭代，每次迭代枚举遍历所有边，尝试通过边进行松弛操作，故复杂度为</p> <p>O(N-1)*O(M)即O(NM)，（注：N为点数，M为边数）</p> <p><strong>伪代码</strong></p> <blockquote> <p>&nbsp; &nbsp;for (int i = 0; i &lt;= n; i++)</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; dist[i] = inf;//初始化为无穷大</p> <p>&nbsp; &nbsp; dist<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0;//s为起点，自己到自己的最短路为0</p> <p>&nbsp; &nbsp; for (int k = 1; k &lt;= n - 1; k++)//迭代n-1轮</p> <p>&nbsp; &nbsp; {</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; for (int i = 1; i &lt;= m; i++)//枚举每一条边</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; {</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int x = u[i], y = v[i];</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (dist[x] &lt; inf)</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dist[y] = min(dist[y], dist[x] + w[i]);//松弛</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; }</p> </blockquote> <p><strong>&nbsp;检查有无负环</strong></p> <p>将dist数组初始化为0，迭代n-1次后进行第n次迭代，如果第n次迭代有进行松弛操作，则一定存在负环，因为不存在负环最多只能进行n-1次松弛操作</p> <p><strong>代码实现：</strong></p> <blockquote> <p>void bellman_ford(int s, int end) // s为起点,end为终点</p> <p>{</p> <p>&nbsp; &nbsp; memset(dis, 127, sizeof(dis));</p> <p>&nbsp; &nbsp; dis<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0; //起点最短路为0</p> <p>&nbsp; &nbsp; pre<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = -1;</p> <p>&nbsp; &nbsp; for (int i = 1; i &lt;= n - 1; i++)</p> <p>&nbsp; &nbsp; {</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; bool ok = false;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; for (int j = 1; j &lt;= m; j++)</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; {</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int x = edge[j].u, y = edge[j].v, w = edge[j].w;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (dis[x] &lt; (1 &lt;&lt; 30) &amp;&amp; dis[x] + w &lt; dis[y])</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dis[y] = dis[x] + w;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pre[y] = x; // y的上一个点为x，如不需打印路径无需pre数组</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ok = true;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; if (ok == false)</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; {</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break; //未进行松弛操作，提前退出循环，减小时间复杂度</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; }</p> <p>&nbsp; &nbsp; if (dis[end] &lt; (1 &lt;&lt; 30))</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; dis[end] &lt;&lt; "\n";</p> <p>&nbsp; &nbsp; else</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; cout &lt;&lt; "-1\n";</p> <p>&nbsp; &nbsp; // Print_Path(end); //打印路径</p> <p>}</p> </blockquote> <p><strong>模板题</strong></p> <p>题目链接：<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="9" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="最短路 - 题目 - Daimayuan Online Judge" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://oj.daimayuan.top/course/14/problem/655"  data-cke-enter-mode="2" data-cke-saved-href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://oj.daimayuan.top/course/14/problem/655"  data-cke-widget-data="%7B%22url%22%3A%22http%3A%2F%2Foj.daimayuan.top%2Fcourse%2F14%2Fproblem%2F655%22%2C%22text%22%3A%22%E6%9C%80%E7%9F%AD%E8%B7%AF%20-%20%E9%A2%98%E7%9B%AE%20-%20Daimayuan%20Online%20Judge%22%2C%22desc%22%3A%22%22%2C%22icon%22%3A%22http%3A%2F%2Foj.daimayuan.top%2Fimages%2Ffavicon.ico%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.1.0%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DM3K6%22%2C%22id%22%3A%22A8N2KN-1651063637519%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-icon="http://oj.daimayuan.top/images/favicon.ico" data-link-title="最短路 - 题目 - Daimayuan Online Judge" data-widget="csdnlink" rel="nofollow">最短路 - 题目 - Daimayuan Online Judge</a></span></p> <p><strong>题目描述：</strong></p> <p>给你一张简单有向图，边权都为非负整数。以及一些询问，询问两个点之间的距离。</p> <p>图用以下形式给出：</p> <p>第一行输入三个整数&nbsp;n,m,k表示图的顶点数、边数和询问次数，顶点编号从&nbsp;1&nbsp;到&nbsp;n。</p> <p>接下来&nbsp;m 行，每行三个整数&nbsp;x,y,z表示&nbsp;x&nbsp;到&nbsp;y&nbsp;有一条有向边，边权为&nbsp;z。</p> <p>接下来&nbsp;k&nbsp;行，每行两个整数&nbsp;x,y 询问从&nbsp;x&nbsp;到&nbsp;y&nbsp;的最短路长度，如果无法到达，输出&nbsp;−1。</p> <p><strong>输入格式：</strong></p> <p>第一行三个整数&nbsp;n,m,k 表示图的顶点数、边数和询问次数。</p> <p>接下来&nbsp;m&nbsp;行，每行有三个整数，代表一条边。</p> <p>接下来&nbsp;k&nbsp;行，每行有两个整数，代表一次询问。</p> <p><strong>输出格式：</strong></p> <p>输出共&nbsp;k&nbsp;行，每行一个数表示一次询问的答案。</p> <p><strong>数据规模：</strong></p> <p>对于所有数据，保证&nbsp;2≤n≤5000,0≤m≤10000,1≤k≤5,1≤x,y≤n,x≠y,1≤z≤10000。</p> <p>样例输入：</p> <blockquote> <p>3 3 2</p> <p>1 2 3</p> <p>2 3 2</p> <p>3 2 1</p> <p>1 3</p> <p>3 1</p> </blockquote> <p>样例输出：</p> <blockquote> <p>5</p> <p>-1</p> </blockquote> <p>直接给代码了</p> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="11" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22classes%22%3Anull%2C%22lang%22%3A%22cpp%22%2C%22code%22%3A%22%23include%20%3Cbits%2Fstdc%2B%2B.h%3E%5Cnusing%20namespace%20std%3B%5Cnstruct%20Edge%5Cn%7B%5Cn%20%20%20%20int%20u%2C%20v%2C%20w%3B%5Cn%7D%20edge%5B100009%5D%3B%5Cnint%20pre%5B100009%5D%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%AE%B0%E5%BD%95%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%82%B9%EF%BC%8C%E4%B8%BA%E4%BA%86%E6%89%93%E5%8D%B0%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%5Cnint%20dis%5B100009%5D%2C%20n%2C%20m%2C%20k%3B%20%2F%2F%20n%E4%B8%BA%E7%82%B9%E6%95%B0%EF%BC%8Cm%E4%B8%BA%E8%BE%B9%E6%95%B0%EF%BC%8Cdis%5Bi%5D%E4%B8%BA%E8%B5%B7%E7%82%B9%E5%88%B0i%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB%5Cnvoid%20Print_Path(int%20x)%5Cn%7B%5Cn%20%20%20%20if%20(pre%5Bx%5D%20%3D%3D%20-1)%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20cout%20%3C%3C%20x%3B%20%2F%2F%E8%B5%B7%E7%82%B9%E7%9A%84pre%E4%B8%BA-1%EF%BC%8C%E6%89%80%E4%BB%A5x%E4%B8%BA%E8%B5%B7%E7%82%B9%5Cn%20%20%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20else%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20Print_Path(pre%5Bx%5D)%3B%5Cn%20%20%20%20%20%20%20%20cout%20%3C%3C%20%5C%22-%3E%5C%22%20%3C%3C%20x%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cnvoid%20bellman_ford(int%20s%2C%20int%20end)%20%2F%2F%20s%E4%B8%BA%E8%B5%B7%E7%82%B9%2Cend%E4%B8%BA%E7%BB%88%E7%82%B9%5Cn%7B%5Cn%20%20%20%20memset(dis%2C%20127%2C%20sizeof(dis))%3B%5Cn%20%20%20%20dis%5Bs%5D%20%3D%200%3B%20%2F%2F%E8%B5%B7%E7%82%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E4%B8%BA0%5Cn%20%20%20%20pre%5Bs%5D%20%3D%20-1%3B%5Cn%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%3D%20n%20-%201%3B%20i%2B%2B)%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20bool%20ok%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20j%20%3D%201%3B%20j%20%3C%3D%20m%3B%20j%2B%2B)%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20x%20%3D%20edge%5Bj%5D.u%2C%20y%20%3D%20edge%5Bj%5D.v%2C%20w%20%3D%20edge%5Bj%5D.w%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(dis%5Bx%5D%20%3C%20(1%20%3C%3C%2030)%20%26%26%20dis%5Bx%5D%20%2B%20w%20%3C%20dis%5By%5D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dis%5By%5D%20%3D%20dis%5Bx%5D%20%2B%20w%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pre%5By%5D%20%3D%20x%3B%20%2F%2F%20y%E7%9A%84%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%82%B9%E4%B8%BAx%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ok%20%3D%20true%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20if%20(ok%20%3D%3D%20false)%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20break%3B%20%2F%2F%E6%9C%AA%E8%BF%9B%E8%A1%8C%E6%9D%BE%E5%BC%9B%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%8F%90%E5%89%8D%E9%80%80%E5%87%BA%E5%BE%AA%E7%8E%AF%EF%BC%8C%E5%87%8F%E5%B0%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(dis%5Bend%5D%20%3C%20(1%20%3C%3C%2030))%5Cn%20%20%20%20%20%20%20%20cout%20%3C%3C%20dis%5Bend%5D%20%3C%3C%20%5C%22%5C%5Cn%5C%22%3B%5Cn%20%20%20%20else%5Cn%20%20%20%20%20%20%20%20cout%20%3C%3C%20%5C%22-1%5C%5Cn%5C%22%3B%5Cn%20%20%20%20%2F%2F%20Print_Path(end)%3B%20%2F%2F%E6%89%93%E5%8D%B0%E8%B7%AF%E5%BE%84%5Cn%7D%5Cnint%20main()%5Cn%7B%5Cn%20%20%20%20ios%3A%3Async_with_stdio(false)%2C%20cin.tie(nullptr)%2C%20cout.tie(nullptr)%3B%20%2F%2F%E5%85%B3%E5%90%8C%E6%AD%A5%E6%B5%81%5Cn%20%20%20%20cin%20%3E%3E%20n%20%3E%3E%20m%20%3E%3E%20k%3B%5Cn%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%3D%20m%3B%20i%2B%2B)%20%2F%2F%E8%AF%BB%E5%85%A5%E8%BE%B9%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20cin%20%3E%3E%20edge%5Bi%5D.u%20%3E%3E%20edge%5Bi%5D.v%20%3E%3E%20edge%5Bi%5D.w%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20for%20(int%20i%20%3D%201%3B%20i%20%3C%3D%20k%3B%20i%2B%2B)%20%2F%2F%20k%E6%AC%A1%E8%AF%A2%E9%97%AE%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20int%20x%2C%20y%3B%5Cn%20%20%20%20%20%20%20%20cin%20%3E%3E%20x%20%3E%3E%20y%3B%5Cn%20%20%20%20%20%20%20%20bellman_ford(x%2C%20y)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D" data-cke-widget-keep-attr="0" data-widget="codeSnippet"><code class="hljs language-cpp"><span class="hljs-meta">#<span class="hljs-keyword">include<span class="hljs-string">&lt;bits/stdc++.h&gt;<span class="hljs-keyword">using<span class="hljs-keyword">namespace std;<span class="hljs-keyword">struct<span class="hljs-title class_">Edge {<span class="hljs-type">int u, v, w; } edge[<span class="hljs-number">100009];<span class="hljs-type">int pre[<span class="hljs-number">100009];<span class="hljs-comment">//记录上一个点，为了打印最短路径<span class="hljs-type">int dis[<span class="hljs-number">100009], n, m, k;<span class="hljs-comment">// n为点数，m为边数，dis[i]为起点到i的最短距离<span class="hljs-function"><span class="hljs-type">void<span class="hljs-title">Print_Path<span class="hljs-params">(<span class="hljs-type">int x) {<span class="hljs-keyword">if (pre[x] ==<span class="hljs-number">-1)     {         cout &lt;&lt; x;<span class="hljs-comment">//起点的pre为-1，所以x为起点<span class="hljs-keyword">return;     }<span class="hljs-keyword">else     {<span class="hljs-built_in">Print_Path(pre[x]);         cout &lt;&lt;<span class="hljs-string">"-&gt;" &lt;&lt; x;     } }<span class="hljs-function"><span class="hljs-type">void<span class="hljs-title">bellman_ford<span class="hljs-params">(<span class="hljs-type">int s,<span class="hljs-type">int end)<span class="hljs-comment">// s为起点,end为终点 {<span class="hljs-built_in">memset(dis,<span class="hljs-number">127,<span class="hljs-built_in">sizeof(dis));     dis<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> =<span class="hljs-number">0;<span class="hljs-comment">//起点最短路为0     pre<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> =<span class="hljs-number">-1;<span class="hljs-keyword">for (<span class="hljs-type">int i =<span class="hljs-number">1; i &lt;= n -<span class="hljs-number">1; i++)     {<span class="hljs-type">bool ok =<span class="hljs-literal">false;<span class="hljs-keyword">for (<span class="hljs-type">int j =<span class="hljs-number">1; j &lt;= m; j++)         {<span class="hljs-type">int x = edge[j].u, y = edge[j].v, w = edge[j].w;<span class="hljs-keyword">if (dis[x] &lt; (<span class="hljs-number">1 &lt;&lt;<span class="hljs-number">30) &amp;&amp; dis[x] + w &lt; dis[y])             {                 dis[y] = dis[x] + w;                 pre[y] = x;<span class="hljs-comment">// y的上一个点为x                 ok =<span class="hljs-literal">true;             }         }<span class="hljs-keyword">if (ok ==<span class="hljs-literal">false)         {<span class="hljs-keyword">break;<span class="hljs-comment">//未进行松弛操作，提前退出循环，减小时间复杂度         }     }<span class="hljs-keyword">if (dis[end] &lt; (<span class="hljs-number">1 &lt;&lt;<span class="hljs-number">30))         cout &lt;&lt; dis[end] &lt;&lt;<span class="hljs-string">"\n";<span class="hljs-keyword">else         cout &lt;&lt;<span class="hljs-string">"-1\n";<span class="hljs-comment">// Print_Path(end); //打印路径 }<span class="hljs-function"><span class="hljs-type">int<span class="hljs-title">main<span class="hljs-params">() {     ios::<span class="hljs-built_in">sync_with_stdio(<span class="hljs-literal">false), cin.<span class="hljs-built_in">tie(<span class="hljs-literal">nullptr), cout.<span class="hljs-built_in">tie(<span class="hljs-literal">nullptr);<span class="hljs-comment">//关同步流     cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<span class="hljs-keyword">for (<span class="hljs-type">int i =<span class="hljs-number">1; i &lt;= m; i++)<span class="hljs-comment">//读入边     {         cin &gt;&gt; edge[i].u &gt;&gt; edge[i].v &gt;&gt; edge[i].w;     }<span class="hljs-keyword">for (<span class="hljs-type">int i =<span class="hljs-number">1; i &lt;= k; i++)<span class="hljs-comment">// k次询问     {<span class="hljs-type">int x, y;         cin &gt;&gt; x &gt;&gt; y;<span class="hljs-built_in">bellman_ford(x, y);     } }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4b95a2cbcccd911f9cc71db1a3306327.jpg" alt="bellman-ford 单源最短路问题 图解" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p><strong>&nbsp;参考文献：</strong></p> <p>《算法竞赛，入门经典（第二版）》</p> <p>2022 Namomo Spring Camp Div2 Day8 直播课</p> <p>ending</p> <p>有什么错误之处欢迎指正！不胜感激！</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-393.htm">CoreWCF 1.0.0 发布，微软正式支持WCF_在线工具</a></p>
                                                        <p>下一个：<a href="/html/category/article-395.htm">springMvc+spring security 注解方式实现权限控制</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-524.htm" title="数据库四大特性及数据库隔离级别（*）">数据库四大特性及数据库隔离级别（*）</a></li>
                        <li class="py-2"><a href="/html/category/article-474.htm" title="实际业务处理 Kafka 消息丢失、重复消费和顺序消费的问题">实际业务处理 Kafka 消息丢失、重复消费和顺序消费的问题</a></li>
                        <li class="py-2"><a href="/html/category/article-505.htm" title="Springboot2 集成Swagger2，解决配置完成后不显示的坑">Springboot2 集成Swagger2，解决配置完成后不显示的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-514.htm" title="Windows 系统电脑如何下载安装并运行 Kubectl 查看云服务器 k8s 集群资源">Windows 系统电脑如何下载安装并运行 Kubectl 查看云服务器 k8s 集群资源</a></li>
                        <li class="py-2"><a href="/html/category/article-489.htm" title="CSS中文本居中显示">CSS中文本居中显示</a></li>
                        <li class="py-2"><a href="/html/category/article-490.htm" title="vue实现简单无缝滚动效果_vue.js">vue实现简单无缝滚动效果_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-484.htm" title="Springboot启动原理详细解析">Springboot启动原理详细解析</a></li>
                        <li class="py-2"><a href="/html/category/article-481.htm" title="如何在同一个MySQL表中存储固定长度字符串和可变长度字符串？">如何在同一个MySQL表中存储固定长度字符串和可变长度字符串？</a></li>
                        <li class="py-2"><a href="/html/category/article-482.htm" title="Hyperledger Fabric节点的动态添加和删除">Hyperledger Fabric节点的动态添加和删除</a></li>
                        <li class="py-2"><a href="/html/category/article-480.htm" title="JAVA基础小细节——equals()与hashCode()">JAVA基础小细节——equals()与hashCode()</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">28</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    SwedenAddress 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>